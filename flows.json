[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": ""
    },
    {
        "id": "427808241d304283",
        "type": "tab",
        "label": "Event Scheduler",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e1a40699ea85764e",
        "type": "tab",
        "label": "Light Controls",
        "disabled": false,
        "info": ""
    },
    {
        "id": "56ae43efe9a5b4d3",
        "type": "tab",
        "label": "Audio Controls",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4fcd3dd2df70f0c8",
        "type": "tab",
        "label": "System Controls",
        "disabled": false,
        "info": ""
    },
    {
        "id": "024a5d7a17bad4d1",
        "type": "tab",
        "label": "Local Storage",
        "disabled": false,
        "info": ""
    },
    {
        "id": "39c947163c4b72c5",
        "type": "tab",
        "label": "Hardware Interface",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4b91f5d2f9b78292",
        "type": "tab",
        "label": "Network",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2beab0d8.f64dc",
        "type": "subflow",
        "name": "Light Quick Fade-On",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 60,
                "wires": [
                    {
                        "id": "c9f5b0f2.57521"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 840,
            "y": 60,
            "wires": []
        }
    },
    {
        "id": "650a8f6f7f65f9de",
        "type": "subflow",
        "name": "Light Quick Fade-On (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 60,
                "wires": [
                    {
                        "id": "8e2b8cf8fe6698eb"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 840,
            "y": 60,
            "wires": [
                {
                    "id": "91c21372e5dc0457",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b7f24f4584cfd7ab",
        "type": "subflow",
        "name": "Fade",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "437ad050babab08f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 180,
                "wires": [
                    {
                        "id": "3f54b697c73637aa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3f2c5e5d.9118c2",
        "type": "ui_tab",
        "name": "REST Sleep Node",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9933a45d.b3b0e",
        "type": "ui_group",
        "name": "Nightlight",
        "tab": "3f2c5e5d.9118c2",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "91c4859.9f3e5f8",
        "type": "ui_group",
        "name": "WakeUp Light",
        "tab": "3f2c5e5d.9118c2",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "e3bb1fc6.01612",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#89a45b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#89a45b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#89a45b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#acbf8c",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#89a45b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "18c6c46d15594407",
        "type": "websocket-listener",
        "path": "/restnode",
        "wholemsg": "false"
    },
    {
        "id": "3bcabf98.3b81",
        "type": "link in",
        "z": "2beab0d8.f64dc",
        "name": "quickFadeOn",
        "links": [],
        "x": 90,
        "y": 140,
        "wires": [
            [
                "c9f5b0f2.57521"
            ]
        ],
        "l": true
    },
    {
        "id": "4fd7a6cd.192be8",
        "type": "delay",
        "z": "2beab0d8.f64dc",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "883559c4.769128"
            ]
        ]
    },
    {
        "id": "bf9ec4d.2f82938",
        "type": "change",
        "z": "2beab0d8.f64dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "-127",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 100,
        "wires": [
            [
                "3096a8ec.3f6f78"
            ]
        ]
    },
    {
        "id": "883559c4.769128",
        "type": "function",
        "z": "2beab0d8.f64dc",
        "name": "Increment Brightness",
        "func": "const scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\n// If at the max brightness, then terminate the sub-flow\nif (msg.payload >= 128) {\n    return;\n}\n    \n// Otherwise, increment the brightness\nmsg.payload += 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cd1bd09d.e12dd",
        "type": "inject",
        "z": "2beab0d8.f64dc",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-128",
        "payloadType": "num",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "bf9ec4d.2f82938"
            ]
        ]
    },
    {
        "id": "3096a8ec.3f6f78",
        "type": "function",
        "z": "2beab0d8.f64dc",
        "name": "Enable/disable",
        "func": "// If the light is not off, then enable the control GPIO\nif (msg.payload != 0)\n    msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c9f5b0f2.57521",
        "type": "delay",
        "z": "2beab0d8.f64dc",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "bf9ec4d.2f82938"
            ]
        ]
    },
    {
        "id": "ba1a941db48c4067",
        "type": "link in",
        "z": "650a8f6f7f65f9de",
        "name": "quickFadeOn",
        "links": [],
        "x": 90,
        "y": 140,
        "wires": [
            [
                "8e2b8cf8fe6698eb"
            ]
        ],
        "l": true
    },
    {
        "id": "f440b6f2e7d9e1cc",
        "type": "delay",
        "z": "650a8f6f7f65f9de",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "fab6c0545bb83fa7"
            ]
        ]
    },
    {
        "id": "91c21372e5dc0457",
        "type": "i2c out",
        "z": "650a8f6f7f65f9de",
        "name": "Set Brightness",
        "busno": "1",
        "address": "8",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 700,
        "y": 100,
        "wires": [
            [
                "f440b6f2e7d9e1cc"
            ]
        ]
    },
    {
        "id": "13eef392766c7000",
        "type": "change",
        "z": "650a8f6f7f65f9de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "-127",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 100,
        "wires": [
            [
                "5f5921f92b98783f",
                "91c21372e5dc0457"
            ]
        ]
    },
    {
        "id": "fab6c0545bb83fa7",
        "type": "function",
        "z": "650a8f6f7f65f9de",
        "name": "Increment Brightness",
        "func": "const scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\n// If at the max brightness, then terminate the sub-flow\nif (msg.payload >= 128) {\n    return;\n}\n    \n// Otherwise, increment the brightness\nmsg.payload += 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "91c21372e5dc0457"
            ]
        ]
    },
    {
        "id": "3664037d789b2491",
        "type": "inject",
        "z": "650a8f6f7f65f9de",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-128",
        "payloadType": "num",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "13eef392766c7000"
            ]
        ]
    },
    {
        "id": "5f5921f92b98783f",
        "type": "function",
        "z": "650a8f6f7f65f9de",
        "name": "Enable/disable",
        "func": "// If the light is not off, then enable the control GPIO\nif (msg.payload != 0)\n    msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "ab861da4eb8ef389"
            ]
        ]
    },
    {
        "id": "ab861da4eb8ef389",
        "type": "pi-gpiod out",
        "z": "650a8f6f7f65f9de",
        "name": "NL Enable",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "22",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "8e2b8cf8fe6698eb",
        "type": "delay",
        "z": "650a8f6f7f65f9de",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "13eef392766c7000"
            ]
        ]
    },
    {
        "id": "f0e97be702be0e23",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "406cc2bc2f372440",
                "f0c75390fa0772e0"
            ]
        ]
    },
    {
        "id": "406cc2bc2f372440",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Fade Counter",
        "func": "const { FADE_ON, ON } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { state, light, max_brightness } = night_light\n\nif(msg.counter >= max_brightness) {\n    flow.set(light, {\n        ...night_light, state: ON\n    })\n    \n    return null\n}\n\nif(state !== FADE_ON)\n    return null\n\nmsg.counter++\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1220,
        "wires": [
            [
                "f0e97be702be0e23"
            ]
        ]
    },
    {
        "id": "91b733e0b0b35e42",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Fade On",
        "func": "const { FADE_ON } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { light, max_brightness, tick } = night_light\nconst counter = flow.get('night_light_current_brightness')\n\nconst light_config = {\n    ...night_light, state: FADE_ON\n}\n\nflow.set(light, light_config)\n\nmsg.counter = counter\nmsg.delay = tick\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1220,
        "wires": [
            [
                "406cc2bc2f372440"
            ]
        ]
    },
    {
        "id": "f0c75390fa0772e0",
        "type": "change",
        "z": "e1a40699ea85764e",
        "name": "Payload to Counter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "counter",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "night_light_current_brightness",
                "pt": "flow",
                "to": "counter",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1380,
        "wires": [
            [
                "69f5739f6c172707"
            ]
        ]
    },
    {
        "id": "e70d1942fa62036c",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Fade On)",
        "links": [
            "b2e7a0407aea6a2a",
            "48503f83daebe740",
            "bd5fce3febdf15d7",
            "0eb1bec83ebe053c",
            "8f4f3375b91bce77"
        ],
        "x": 35,
        "y": 1220,
        "wires": [
            [
                "91b733e0b0b35e42"
            ]
        ]
    },
    {
        "id": "a1917919418e600f",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Fade Off",
        "func": "const { FADE_OFF } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { light, max_brightness, tick } = night_light\nconst counter = flow.get('night_light_current_brightness')\n\nconst light_config = {\n    ...night_light, state: FADE_OFF\n}\n\nflow.set(light, light_config)\n\nmsg.counter = counter\nmsg.delay = tick\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1540,
        "wires": [
            [
                "111b8044a4a2c809"
            ]
        ]
    },
    {
        "id": "111b8044a4a2c809",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Fade Counter",
        "func": "const { FADE_OFF, OFF } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { state, light, max_brightness } = night_light\n\nif(msg.counter <= 0) {\n    flow.set(light, {\n        ...night_light, state: OFF\n    })\n    \n    return null\n}\n\nif(state !== FADE_OFF)\n    return null\n\nmsg.counter--\nflow.set('night_light_current_brightness', msg.counter)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1540,
        "wires": [
            [
                "4de216b02ff64d27"
            ]
        ]
    },
    {
        "id": "99d636e4c54833d3",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Fade Off)",
        "links": [
            "960cc71d221701e5",
            "6e09738fba4f3349",
            "d9103be68bd22c99",
            "60a1514379cf765d",
            "ea31ccf57e478c46"
        ],
        "x": 35,
        "y": 1540,
        "wires": [
            [
                "a1917919418e600f"
            ]
        ]
    },
    {
        "id": "83e2f5a55a74d18b",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Off",
        "func": "const { OFF } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { light, max_brightness, tick } = night_light\nconst light_config = {\n    ...night_light, state: OFF\n}\n\nflow.set(light, light_config)\n\nmsg.counter = 0\nmsg.delay = tick\n\nflow.set('night_light_current_brightness', 0)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "aa04e4d2977d7fff"
            ]
        ]
    },
    {
        "id": "7ca518af31291cf3",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle On",
        "func": "const { ON } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { light, max_brightness, tick } = night_light\nconst light_config = {\n    ...night_light, state: ON\n}\n\nflow.set(light, light_config)\n\nmsg.counter = max_brightness\nmsg.delay = tick\nmsg.payload = light_config\n\nflow.set('night_light_current_brightness', max_brightness)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "c9ce0d6ad1cb5c50"
            ]
        ]
    },
    {
        "id": "aa04e4d2977d7fff",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1480,
        "wires": [
            [
                "f0c75390fa0772e0"
            ]
        ]
    },
    {
        "id": "4de216b02ff64d27",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1540,
        "wires": [
            [
                "111b8044a4a2c809",
                "f0c75390fa0772e0"
            ]
        ]
    },
    {
        "id": "c9ce0d6ad1cb5c50",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1280,
        "wires": [
            [
                "f0c75390fa0772e0"
            ]
        ]
    },
    {
        "id": "437ad050babab08f",
        "type": "function",
        "z": "b7f24f4584cfd7ab",
        "name": "Toggle Fade Off",
        "func": "const { FADE_OFF } = flow.get('light_states')\n\nflow.set('night_light_state', FADE_OFF)\nmsg.counter = 100\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "1d2d711a8a0673e0"
            ]
        ]
    },
    {
        "id": "1d2d711a8a0673e0",
        "type": "function",
        "z": "b7f24f4584cfd7ab",
        "name": "Fade Counter",
        "func": "const { FADE_OFF, OFF } = flow.get('light_states')\nconst night_light_state = flow.get('night_light_state')\n\nif(msg.counter <= 0) {\n    flow.set('night_light_state', OFF)\n    \n    return null\n}\n\nif(night_light_state !== FADE_OFF)\n    return null\n\nmsg.counter--\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "3f54b697c73637aa"
            ]
        ]
    },
    {
        "id": "3f54b697c73637aa",
        "type": "delay",
        "z": "b7f24f4584cfd7ab",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "1d2d711a8a0673e0"
            ]
        ]
    },
    {
        "id": "103ef86aff47b2d5",
        "type": "websocket in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "server": "18c6c46d15594407",
        "client": "",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "db7057806dca5e74"
            ]
        ]
    },
    {
        "id": "62e6a71c4cb08a51",
        "type": "websocket out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "server": "18c6c46d15594407",
        "client": "",
        "x": 660,
        "y": 620,
        "wires": []
    },
    {
        "id": "35e4ae63f18d6679",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (On)",
        "links": [
            "81c8ed3d1f966e48",
            "5bde7861c88f93ce",
            "9161018b3a1cc506",
            "627d595124cde24e",
            "6e61cac404cd1fd5"
        ],
        "x": 35,
        "y": 1280,
        "wires": [
            [
                "7ca518af31291cf3"
            ]
        ]
    },
    {
        "id": "f6a3886c0d4dd377",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Off)",
        "links": [
            "25cd6159ea46fd09",
            "7f04188022e29c07",
            "6277dbf5345db5cb",
            "404746cedc16dfcd",
            "88f4bd92c145a669"
        ],
        "x": 35,
        "y": 1480,
        "wires": [
            [
                "83e2f5a55a74d18b"
            ]
        ]
    },
    {
        "id": "305ca6698a091b49",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Night Light Controls",
        "info": "",
        "x": 110,
        "y": 1160,
        "wires": []
    },
    {
        "id": "1590337acdb5b8fc",
        "type": "debug",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 520,
        "wires": []
    },
    {
        "id": "1e74388b5934da98",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Type Selector",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "audio",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "system",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "assets",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "volume",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 400,
        "y": 380,
        "wires": [
            [
                "f304279097451e82"
            ],
            [
                "ec9a880fb55d1e9a"
            ],
            [
                "06969b016a3d71a1"
            ],
            [
                "6d1ad8d437a846ce"
            ],
            [
                "8ed46fa8a0ac2bfe",
                "6bbaf5f11895eebf"
            ],
            [
                "62a71b748c924363"
            ]
        ]
    },
    {
        "id": "db7057806dca5e74",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 250,
        "y": 380,
        "wires": [
            [
                "1e74388b5934da98"
            ]
        ]
    },
    {
        "id": "766cf8448e1566aa",
        "type": "trigger",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "op1": "false",
        "op2": "true",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "1590337acdb5b8fc",
                "87766fb3ee062bef"
            ]
        ]
    },
    {
        "id": "1620cc6ba52e96c1",
        "type": "debug",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 520,
        "wires": []
    },
    {
        "id": "99890cfd06ef832a",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "From API (Lights)",
        "links": [
            "07e37e563f84c4ef",
            "144b0ce6de73da81",
            "6d92577b0a9c447d",
            "fe19b0d6879b5403"
        ],
        "x": 175,
        "y": 520,
        "wires": [
            [
                "379e9aab2c3b613a",
                "3bf4ebc6242428fd"
            ]
        ]
    },
    {
        "id": "6022aef9ff5d1e91",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 480,
        "wires": []
    },
    {
        "id": "a0d0ba5fe385674b",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "const { NIGHT_LIGHT, WAKE_LIGHT } = flow.get('lights') \nconst { FADE_ON, FADE_OFF } = flow.get('light_states')\n\nmsg.payload = {\n    light: WAKE_LIGHT,\n    max_brightness: 70,\n    state: FADE_ON\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 580,
        "wires": [
            [
                "379e9aab2c3b613a"
            ]
        ]
    },
    {
        "id": "0189daa5f53e7eaf",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "Test API Call for Light Controls",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "a0d0ba5fe385674b"
            ]
        ]
    },
    {
        "id": "379e9aab2c3b613a",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Light State Handler",
        "func": "const { light } = msg.payload\nconst prev_light_state = flow.get(light) || {}\nconst new_light_state = {\n    ...prev_light_state, ...msg.payload\n}\n\nflow.set(light, new_light_state)\n\nmsg.payload = new_light_state\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "6022aef9ff5d1e91",
                "076a5ab5e051a561"
            ]
        ]
    },
    {
        "id": "723b2b9bac1a7185",
        "type": "file in",
        "z": "e1a40699ea85764e",
        "name": "Retrieve Lights Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 360,
        "wires": [
            [
                "c66d3893f2da6fef"
            ]
        ]
    },
    {
        "id": "3d590f59ba52ee01",
        "type": "catch",
        "z": "e1a40699ea85764e",
        "name": "If Lights Config Does Not Exist",
        "scope": [
            "723b2b9bac1a7185"
        ],
        "uncaught": false,
        "x": 140,
        "y": 420,
        "wires": [
            [
                "e2447a0bb398c179"
            ]
        ]
    },
    {
        "id": "b532aa6c3ea97ef1",
        "type": "file",
        "z": "e1a40699ea85764e",
        "name": "Create Lights Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 730,
        "y": 420,
        "wires": [
            [
                "c66d3893f2da6fef"
            ]
        ]
    },
    {
        "id": "76c66935f94f3d2f",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "b6b9c922ac0177ab",
                "4c149006d1618a77",
                "1a5068f4b0cae0d9"
            ]
        ]
    },
    {
        "id": "b6b9c922ac0177ab",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Global Config",
        "func": "const NIGHT_LIGHT = {\n    light: 'NIGHT_LIGHT',\n    max_brightness: 100,\n    state: 'OFF',\n    tick: 100\n}\n\nconst WAKE_LIGHT = {\n    light: 'WAKE_LIGHT',\n    max_brightness: 100,\n    state: 'OFF',\n    tick: 100\n}\n\nconst NIGHT_SOUND = {\n    audio_file: null, // url for the audio file\n    volume: 50,\n    max_volume: 100,\n    state: 'STOPPED', // offpayload state can either be: 'STOPPED', 'PAUSED'\n    sound: 'NIGHT_SOUND'\n}\n\nconst WAKE_SOUND = {\n    audio_file: null,\n    volume: 50,\n    max_volume: 100,\n    state: 'STOPPED',\n    sound: 'WAKE_SOUND'\n}\n\nconst RELAXATION_SOUND = {\n    audio_file: null,\n    volume: 50,\n    max_volume: 100,\n    state: 'STOPPED',\n    sound: 'RELAXATION_SOUND'\n}\n\nconst days_selected = {\n    mon: true,\n    tue: true,\n    wed: true,\n    thu: true,\n    fri: true,\n    sat: true,\n    sun: true\n}\n\nconst bedtime = {\n    type: 'bedtime', // Should be one of the values: bedtime, waketime, sunrise, sunset\n    time: '21:00', // Base time of the on and off offsets\n    light: {\n        onoffset: 0, // integer - The on time offset in minutes e.g. the light will turn on at the same time (0* minutes) that was set\n        offoffset: 60, // integer - The off time offset in minutes e.g. the light will turn off after 60 minutes of the time set\n        onpayload: {\n            ...NIGHT_LIGHT,\n            state: 'FADE_ON' // Can be one of the following values: ON, FADE_ON\n        },\n        offpayload: {\n            ...NIGHT_LIGHT,\n            state: 'FADE_OFF' // Can be one of the following values: OFF, FADE_OFF\n        },\n        days_selected\n    },\n\n    sound: {\n        onoffset: 0, // The on time offset in minutes e.g. the sound will start playing at the same time (0* minutes) that was set\n        offoffset: 420, // The off time offset in minutes e.g. the sound will stop playing after 420* minutes (7 hours) of the time set\n        onpayload: {\n            ...NIGHT_SOUND,\n            state: 'PLAYING'\n        },\n        offpayload: {\n            ...NIGHT_SOUND,\n            state: 'STOPPED'\n        },\n        days_selected\n    },\n\n    relax: {\n        onoffset: -30, // 30 minutes before bedtime\n        offoffset: 0,\n        onpayload: {\n            ...RELAXATION_SOUND,\n            state: 'PLAYING'\n        },\n        offpayload: {\n            ...RELAXATION_SOUND,\n            state: 'STOPPED'\n        },\n        days_selected\n    }\n}\n\nconst waketime = {\n    type: 'waketime',\n    time: '5:00',\n    light: {\n        onoffset: 0,\n        offoffset: 60,\n        onpayload: {\n            ...WAKE_LIGHT,\n            state: 'FADE_ON'\n        },\n        offpayload: {\n            ...WAKE_LIGHT,\n            state: 'FADE_OFF'\n        },\n        days_selected\n    },\n    sound: {\n        onoffset: 0,\n        offoffset: 60,\n        onpayload: {\n            ...WAKE_SOUND,\n            state: 'PLAYING'\n        },\n        offpayload: {\n            ...WAKE_SOUND,\n            state: 'STOPPED'\n        },\n        days_selected\n    },\n    \n    relax: {\n        onoffset: 10, // 30 minutes before bedtime\n        offoffset: 15,\n        onpayload: {\n            ...RELAXATION_SOUND,\n            state: 'PLAYING'\n        },\n        offpayload: {\n            ...RELAXATION_SOUND,\n            state: 'STOPPED'\n        },\n        days_selected\n    }\n}\n\nconst sunrise = {\n    type: 'sunrise',\n    time: 'sunrise',\n    light: {\n        onoffset: 0,\n        offoffset: 60,\n        onpayload: {\n            ...WAKE_LIGHT,\n            state: 'FADE_ON'\n        },\n        offpayload: {\n            ...WAKE_LIGHT,\n            state: 'FADE_OFF'\n        },\n        days_selected\n    },\n    // sound: {\n    //     onoffset: 0,\n    //     offoffset: 60,\n    //     onpayload: {\n    //         ...WAKE_SOUND,\n    //         state: 'PLAYING' \n    //     },\n    //     offpayload: {\n    //         ...WAKE_SOUND,\n    //         state: 'STOPPED'\n    //     },\n    //     days_selected\n    // }\n}\n\nconst sunset = {\n    type: 'sunset',\n    time: 'sunset',\n    light: {\n        onoffset: 0,\n        offoffset: 60,\n        onpayload: {\n            ...NIGHT_LIGHT,\n            state: 'FADE_ON'\n        },\n        offpayload: {\n            ...NIGHT_LIGHT,\n            state: 'FADE_OFF'\n        },\n        days_selected\n    },\n    // sound: {\n    //     onoffset: 0,\n    //     offoffset: 60,\n    //     onpayload: {\n    //         ...WAKE_SOUND,\n    //         state: 'PLAYING' \n    //     },\n    //     offpayload: {\n    //         ...WAKE_SOUND,\n    //         state: 'STOPPED'\n    //     },\n    //     days_selected\n    // }\n}\n\nconst AUDIO_DOWNLOAD_RESPONSE = \"AUDIO_DOWNLOAD_RESPONSE\"\n\nconst defaults_config = {\n    assets_dir: '/data/projects/REST_NODE/assets',\n    light: './defaults/light.config.json',\n    audio: './defaults/audio.config.json',\n    event: './defaults/event.config.json',\n    system: './defaults/system.config.json',\n    network: './defaults/network.config.json',\n    \n    api_response_types: {\n        AUDIO_DOWNLOAD_RESPONSE\n    },\n    \n    default_light_config: {\n        NIGHT_LIGHT, WAKE_LIGHT\n    },\n\n    default_audio_config: {\n        NIGHT_SOUND, WAKE_SOUND, RELAXATION_SOUND\n    },\n\n    default_event_config: {\n        bedtime,\n        waketime,\n        sunrise,\n        sunset,\n        days_selected\n    },\n\n    default_system_config: {\n        system_volume: 100,\n        audio_device: 'Headphone'\n    },\n\n    default_network_config: {\n        \n    }\n}\n\nglobal.set('defaults_config', defaults_config)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "6c3ef41b9b35c8fd",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "FileName",
        "func": "const { light } = global.get('defaults_config')\n\nmsg.filename = light\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 360,
        "wires": [
            [
                "723b2b9bac1a7185"
            ]
        ]
    },
    {
        "id": "c66d3893f2da6fef",
        "type": "json",
        "z": "e1a40699ea85764e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "d39db940d012a468"
            ]
        ]
    },
    {
        "id": "e2447a0bb398c179",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Default Lights Config",
        "func": "const { default_light_config } = global.get('defaults_config')\n\nmsg.payload = default_light_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 420,
        "wires": [
            [
                "b532aa6c3ea97ef1"
            ]
        ]
    },
    {
        "id": "187d77bbac4e11b7",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "From API",
        "info": "",
        "x": 80,
        "y": 480,
        "wires": []
    },
    {
        "id": "31f728f22bd028c9",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Default Config (Lights)",
        "info": "",
        "x": 120,
        "y": 320,
        "wires": []
    },
    {
        "id": "0eb1bec83ebe053c",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "e70d1942fa62036c"
        ],
        "x": 875,
        "y": 100,
        "wires": []
    },
    {
        "id": "60a1514379cf765d",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "99d636e4c54833d3"
        ],
        "x": 875,
        "y": 140,
        "wires": []
    },
    {
        "id": "404746cedc16dfcd",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "f6a3886c0d4dd377"
        ],
        "x": 875,
        "y": 180,
        "wires": []
    },
    {
        "id": "59d2f5a0fe0738df",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Testing (Lights)",
        "info": "",
        "x": 100,
        "y": 20,
        "wires": []
    },
    {
        "id": "628f1ede24fe8779",
        "type": "trigger",
        "z": "e1a40699ea85764e",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 2520,
        "wires": [
            [
                "0d47c729aedd341c"
            ]
        ]
    },
    {
        "id": "89a5244ab48b41b7",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2520,
        "wires": [
            [
                "628f1ede24fe8779",
                "6ba7acfd5afc440a"
            ]
        ]
    },
    {
        "id": "0d47c729aedd341c",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 2520,
        "wires": []
    },
    {
        "id": "6ba7acfd5afc440a",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 2460,
        "wires": []
    },
    {
        "id": "54f5fc3d7401f62e",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Testing Section",
        "info": "",
        "x": 100,
        "y": 2420,
        "wires": []
    },
    {
        "id": "eea4862a45819507",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Wake Light Controls",
        "info": "",
        "x": 110,
        "y": 1620,
        "wires": []
    },
    {
        "id": "7b84691ef016a6ab",
        "type": "pi-gpiod out",
        "z": "39c947163c4b72c5",
        "name": "Night Light",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "18",
        "set": false,
        "level": "0",
        "out": "pwm",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "2000",
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "d479c906edc53339",
        "type": "pi-gpiod out",
        "z": "39c947163c4b72c5",
        "name": "Wake Light",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "23",
        "set": false,
        "level": "0",
        "out": "pwm",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "2000",
        "x": 750,
        "y": 240,
        "wires": []
    },
    {
        "id": "108c9cd67defe8d0",
        "type": "link in",
        "z": "39c947163c4b72c5",
        "name": "Night Light (GPIO)",
        "links": [
            "69f5739f6c172707"
        ],
        "x": 155,
        "y": 100,
        "wires": [
            [
                "7b84691ef016a6ab",
                "a4fc78ecb023e5f0"
            ]
        ]
    },
    {
        "id": "3ae8dc738dda02fa",
        "type": "link in",
        "z": "39c947163c4b72c5",
        "name": "Wake Light (GPIO)",
        "links": [
            "ba1dff0b015dd369"
        ],
        "x": 155,
        "y": 240,
        "wires": [
            [
                "d479c906edc53339",
                "2ddd7a055c24b97c"
            ]
        ]
    },
    {
        "id": "69f5739f6c172707",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Control)",
        "links": [
            "108c9cd67defe8d0"
        ],
        "x": 875,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0c073804e2d3024f",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "To Night Light",
        "info": "",
        "x": 910,
        "y": 1320,
        "wires": []
    },
    {
        "id": "20d962370170bda9",
        "type": "trigger",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 100,
        "wires": [
            [
                "d4a9d574e8776756"
            ]
        ]
    },
    {
        "id": "d4a9d574e8776756",
        "type": "file",
        "z": "024a5d7a17bad4d1",
        "name": "Update Light Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 160,
        "wires": [
            [
                "f48818170f588c63"
            ]
        ]
    },
    {
        "id": "015cb074f7b97d87",
        "type": "trigger",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 140,
        "wires": [
            [
                "d4a9d574e8776756"
            ]
        ]
    },
    {
        "id": "f48818170f588c63",
        "type": "debug",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 240,
        "wires": []
    },
    {
        "id": "e22c19358ff80035",
        "type": "switch",
        "z": "024a5d7a17bad4d1",
        "name": "Select Config File",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "audio",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "event",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "system",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "5e7adbb9acd218dd"
            ],
            [
                "ca7b3f2c024562b1"
            ],
            [
                "f430cccf82ec05a3"
            ],
            [
                "6a7c4e44cfb9a01d"
            ]
        ]
    },
    {
        "id": "39d1d42028adc83d",
        "type": "comment",
        "z": "39c947163c4b72c5",
        "name": "Lights (Hardware)",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "55de0a99484f7e4c",
        "type": "comment",
        "z": "39c947163c4b72c5",
        "name": "Input Buttons (Hardware)",
        "info": "",
        "x": 150,
        "y": 440,
        "wires": []
    },
    {
        "id": "2895fb3018f77f98",
        "type": "pi-gpiod in",
        "z": "39c947163c4b72c5",
        "name": "System Reset",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "24",
        "intype": "PUD_DOWN",
        "debounce": "25",
        "read": false,
        "x": 110,
        "y": 500,
        "wires": [
            [
                "5397f0d28c60d06a"
            ]
        ]
    },
    {
        "id": "5397f0d28c60d06a",
        "type": "link out",
        "z": "39c947163c4b72c5",
        "name": "System Reset (Hardware)",
        "links": [
            "5ec14e1ee0ad2eee"
        ],
        "x": 375,
        "y": 500,
        "wires": []
    },
    {
        "id": "5ec14e1ee0ad2eee",
        "type": "link in",
        "z": "4fcd3dd2df70f0c8",
        "name": "System Reset",
        "links": [
            "5397f0d28c60d06a"
        ],
        "x": 195,
        "y": 460,
        "wires": [
            [
                "766cf8448e1566aa",
                "1620cc6ba52e96c1"
            ]
        ]
    },
    {
        "id": "ec7beb856b75bc82",
        "type": "link in",
        "z": "024a5d7a17bad4d1",
        "name": "Update Lights / Audio Config",
        "links": [
            "064db609db367336",
            "9120b3d4f63f106b"
        ],
        "x": 195,
        "y": 100,
        "wires": [
            [
                "e22c19358ff80035"
            ]
        ]
    },
    {
        "id": "a74e7bbe2c2e8154",
        "type": "comment",
        "z": "024a5d7a17bad4d1",
        "name": "Update Config File",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "5e7adbb9acd218dd",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Audio Config",
        "func": "const { audio: audio_config } = global.get('defaults_config')\nconst { audio } = msg.payload\n\nmsg.payload = audio\nmsg.filename = audio_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "20d962370170bda9"
            ]
        ]
    },
    {
        "id": "ca7b3f2c024562b1",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Light Config",
        "func": "const { light: light_config } = global.get('defaults_config')\nconst { light } = msg.payload\n\nmsg.payload = light\nmsg.filename = light_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "015cb074f7b97d87"
            ]
        ]
    },
    {
        "id": "180795f0312fe096",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Storage",
        "info": "",
        "x": 70,
        "y": 2120,
        "wires": []
    },
    {
        "id": "b959eed8d98a5acb",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Get Current Light Config",
        "func": "const { NIGHT_LIGHT: night_light, WAKE_LIGHT: wake_light } = flow.get('lights')\nconst NIGHT_LIGHT = flow.get(night_light)\nconst WAKE_LIGHT = flow.get(wake_light)\n\nmsg.payload = {\n    NIGHT_LIGHT, WAKE_LIGHT\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2180,
        "wires": [
            [
                "1539bc275456eee8"
            ]
        ]
    },
    {
        "id": "1539bc275456eee8",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Compile Light Config",
        "func": "const { NIGHT_LIGHT, WAKE_LIGHT } = msg.payload\n\nmsg.payload = {\n    light: {\n        NIGHT_LIGHT, WAKE_LIGHT\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2180,
        "wires": [
            [
                "a2bd95418d6120d8"
            ]
        ]
    },
    {
        "id": "99a65e88efcd3084",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "076a5ab5e051a561"
        ],
        "x": 35,
        "y": 2180,
        "wires": [
            [
                "b959eed8d98a5acb"
            ]
        ]
    },
    {
        "id": "a2bd95418d6120d8",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [],
        "x": 795,
        "y": 2180,
        "wires": []
    },
    {
        "id": "076a5ab5e051a561",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "99a65e88efcd3084",
            "c36c3b8450aaf67a"
        ],
        "x": 635,
        "y": 520,
        "wires": []
    },
    {
        "id": "3663a760b9cc022e",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2860,
        "wires": [
            [
                "cd660cc58e12663c"
            ]
        ]
    },
    {
        "id": "cd660cc58e12663c",
        "type": "exec",
        "z": "427808241d304283",
        "command": "date",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 310,
        "y": 2860,
        "wires": [
            [
                "ea43c528df705993"
            ],
            [
                "dd6fb2a1a86b2977"
            ],
            [
                "b3cc693c8e39187b"
            ]
        ]
    },
    {
        "id": "ea43c528df705993",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2820,
        "wires": []
    },
    {
        "id": "dd6fb2a1a86b2977",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2860,
        "wires": []
    },
    {
        "id": "b3cc693c8e39187b",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2900,
        "wires": []
    },
    {
        "id": "ed362dbd9b36c014",
        "type": "function",
        "z": "427808241d304283",
        "name": "Initialize Constants",
        "func": "const events = msg.payload\nconst date = new Date()\nconst timezone_offset = date.getTimezoneOffset()\n\nconst lights = {\n    NIGHT_LIGHT: 'NIGHT_LIGHT',\n    WAKE_LIGHT: 'WAKE_LIGHT'\n}\n\nconst light_states = {\n    OFF: 'OFF',\n    FADE_ON: 'FADE_ON',\n    FADE_OFF: 'FADE_OFF',\n    ON: 'ON'\n}\n\nconst audio = {\n    NIGHT_SOUND: 'NIGHT_SOUND',\n    WAKE_SOUND: 'WAKE_SOUND'\n}\n\nconst audio_player_states = {\n    PAUSED: 'PAUSED',\n    PLAYING: 'PLAYING',\n    STOPPED: 'STOPPED',\n    RESUMED: 'RESUMED'\n}\n\nflow.set('events', events)\nflow.set('timezone_offset', timezone_offset)\n\nflow.set('lights', lights)\nflow.set('light_states', light_states)\n\nflow.set('audio', audio)\nflow.set('audio_player_states', audio_player_states)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": []
    },
    {
        "id": "db18fd732dfa43d7",
        "type": "function",
        "z": "427808241d304283",
        "name": "FileName",
        "func": "const { event } = global.get('defaults_config')\n\nmsg.filename = event\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            [
                "6f801ba2e4fac0ba"
            ]
        ]
    },
    {
        "id": "6f801ba2e4fac0ba",
        "type": "file in",
        "z": "427808241d304283",
        "name": "Retrieve Event Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "aa81ecef31a7e3c5"
            ]
        ]
    },
    {
        "id": "aa81ecef31a7e3c5",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "ed362dbd9b36c014",
                "ec602bb422ae3058"
            ]
        ]
    },
    {
        "id": "a38d84f617594c64",
        "type": "catch",
        "z": "427808241d304283",
        "name": "If Event Config Does Not Exist",
        "scope": [
            "6f801ba2e4fac0ba"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "7d8a557427f39da0"
            ]
        ]
    },
    {
        "id": "7d8a557427f39da0",
        "type": "function",
        "z": "427808241d304283",
        "name": "Default Event Config",
        "func": "const { default_event_config } = global.get('defaults_config')\n\nmsg.payload = default_event_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "d31ff6390836f524"
            ]
        ]
    },
    {
        "id": "d31ff6390836f524",
        "type": "file",
        "z": "427808241d304283",
        "name": "Create Event Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 140,
        "wires": [
            [
                "aa81ecef31a7e3c5"
            ]
        ]
    },
    {
        "id": "4f1d443dfd155458",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Initialize Event Scheduler",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "cf8d672130ac567c",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "Initialize Constants",
        "func": "const system_config = msg.payload\n\nflow.set('system_config', system_config)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": []
    },
    {
        "id": "9a692eb9368947d8",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "FileName",
        "func": "const { system } = global.get('defaults_config')\n\nmsg.filename = system\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            [
                "76c31bda66027c24"
            ]
        ]
    },
    {
        "id": "76c31bda66027c24",
        "type": "file in",
        "z": "4fcd3dd2df70f0c8",
        "name": "Retrieve System Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 450,
        "y": 80,
        "wires": [
            [
                "0d9ef61f4a7f9dd9"
            ]
        ]
    },
    {
        "id": "0d9ef61f4a7f9dd9",
        "type": "json",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "cf8d672130ac567c"
            ]
        ]
    },
    {
        "id": "839d39a22b2664c3",
        "type": "catch",
        "z": "4fcd3dd2df70f0c8",
        "name": "If System Config Does Not Exist",
        "scope": [
            "76c31bda66027c24"
        ],
        "uncaught": false,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "6627babede3ed239"
            ]
        ]
    },
    {
        "id": "6627babede3ed239",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "Default System Config",
        "func": "const { default_system_config } = global.get('defaults_config')\n\nmsg.payload = default_system_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "f6a6960f282e0aab"
            ]
        ]
    },
    {
        "id": "f6a6960f282e0aab",
        "type": "file",
        "z": "4fcd3dd2df70f0c8",
        "name": "Create System Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 140,
        "wires": [
            [
                "cf8d672130ac567c"
            ]
        ]
    },
    {
        "id": "39c4db23c13ac5d4",
        "type": "comment",
        "z": "4fcd3dd2df70f0c8",
        "name": "Initialize System Controls",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "b5468e96fe8f2a22",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Initialize Constants",
        "func": "const { api_response_types } = global.get('defaults_config')\nconst { NIGHT_SOUND, WAKE_SOUND, RELAXATION_SOUND } = msg.payload\n\nconst audio = {\n    NIGHT_SOUND: 'NIGHT_SOUND',\n    WAKE_SOUND: 'WAKE_SOUND',\n    RELAXATION_SOUND: 'RELAXATION_SOUND'\n}\n\nconst AUDIO_ASSETS_AVAILABLE = \"AUDIO_ASSETS_AVAILABLE\"\nconst AUDIO_FILE_DOWNLOADED = \"AUDIO_FILE_DOWNLOADED\"\nconst AUDIO_FILE_DOWNLOAD_ERROR = \"AUDIO_DOWNLOADED\"\nconst AUDIO_FILE_DOWNLOAD_IN_PROGRESS = \"AUDIO_FILE_DOWNLOAD_IN_PROGRESS\"\n\nconst audio_download_response_topics = {\n    AUDIO_ASSETS_AVAILABLE,\n    AUDIO_FILE_DOWNLOADED,\n    AUDIO_FILE_DOWNLOAD_ERROR,\n    AUDIO_FILE_DOWNLOAD_IN_PROGRESS\n}\n\nconst PAUSED = 'PAUSED'\nconst PLAYING = 'PLAYING'\nconst STOPPED = 'STOPPED'\nconst RESUMED = 'RESUMED'\n\nconst audio_player_states = {\n    PAUSED, PLAYING, STOPPED, RESUMED\n}\n\nflow.set('audio', audio)\nflow.set('audio_player_states', audio_player_states)\nflow.set('audio_download_response_topics', audio_download_response_topics)\nflow.set('api_response_types', api_response_types)\n\nflow.set(audio.NIGHT_SOUND, NIGHT_SOUND)\nflow.set(audio.WAKE_SOUND, WAKE_SOUND)\nflow.set(audio.RELAXATION_SOUND, RELAXATION_SOUND)\n\nflow.set('current_audio_playing', null)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 540,
        "wires": []
    },
    {
        "id": "cbe31ffaf8de222e",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "FileName",
        "func": "const { audio } = global.get('defaults_config')\n\nmsg.filename = audio\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 540,
        "wires": [
            [
                "a6c9850fdc2f3179"
            ]
        ]
    },
    {
        "id": "a6c9850fdc2f3179",
        "type": "file in",
        "z": "56ae43efe9a5b4d3",
        "name": "Retrieve Audio Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 540,
        "wires": [
            [
                "95c3b798b0bdc8e2"
            ]
        ]
    },
    {
        "id": "95c3b798b0bdc8e2",
        "type": "json",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 540,
        "wires": [
            [
                "b5468e96fe8f2a22"
            ]
        ]
    },
    {
        "id": "5f766748e9cc933f",
        "type": "catch",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Config Does Not Exist",
        "scope": [
            "a6c9850fdc2f3179"
        ],
        "uncaught": false,
        "x": 140,
        "y": 600,
        "wires": [
            [
                "313656ae5e072080"
            ]
        ]
    },
    {
        "id": "313656ae5e072080",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Default Audio Config",
        "func": "const { default_audio_config } = global.get('defaults_config')\n\nmsg.payload = default_audio_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 600,
        "wires": [
            [
                "684485ae3297fb89"
            ]
        ]
    },
    {
        "id": "684485ae3297fb89",
        "type": "file",
        "z": "56ae43efe9a5b4d3",
        "name": "Create Audio Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 600,
        "wires": [
            [
                "b5468e96fe8f2a22"
            ]
        ]
    },
    {
        "id": "52eb4e7a40d8147b",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "From API (Audio)",
        "links": [
            "af7443700a2c537c",
            "aec5625bda89fe50"
        ],
        "x": 155,
        "y": 920,
        "wires": [
            [
                "9af2857d9a1be37c"
            ]
        ]
    },
    {
        "id": "86d20a5355d39ce3",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio State Handler",
        "func": "const { audio } = msg.payload\nconst audio_state = flow.get(audio) || {}\nconst new_audio_state = {\n    ...audio_state, ...msg.payload\n}\n\nflow.set(audio, new_audio_state)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 900,
        "wires": [
            [
                "8aa8457966c1294f"
            ]
        ]
    },
    {
        "id": "a64a0f9be8ac2820",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "From API",
        "info": "",
        "x": 80,
        "y": 860,
        "wires": []
    },
    {
        "id": "5bcd5493bad182cc",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Initialize Audio Controls",
        "info": "",
        "x": 120,
        "y": 420,
        "wires": []
    },
    {
        "id": "d10e582aeb62e9f0",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Store Available Audio Files",
        "info": "",
        "x": 130,
        "y": 680,
        "wires": []
    },
    {
        "id": "8d54343c273a8128",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Audio Volume Command",
        "func": "const audio_device = msg.audio_device \n    || flow.get('audio_device')\n\nmsg.payload = `amixer -M set ${audio_device} ${ msg.payload }%`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1740,
        "wires": [
            [
                "397d62e439616946"
            ]
        ],
        "icon": "font-awesome/fa-volume-up"
    },
    {
        "id": "397d62e439616946",
        "type": "exec",
        "z": "56ae43efe9a5b4d3",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Execute Volume Command",
        "x": 640,
        "y": 1740,
        "wires": [
            [
                "efdf05c1fd0eb8b2"
            ],
            [
                "2b844dbfbc780a53"
            ],
            [
                "dcb72c7e2448a69b"
            ]
        ]
    },
    {
        "id": "9a498067d2130e99",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Volume Adjustments",
        "info": "",
        "x": 110,
        "y": 1660,
        "wires": []
    },
    {
        "id": "dcd89f3eddf44c04",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Testing Section",
        "info": "",
        "x": 100,
        "y": 20,
        "wires": []
    },
    {
        "id": "ee743279d14d6d2f",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Low Volume",
        "props": [
            {
                "p": "payload.volume",
                "v": "33",
                "vt": "num"
            },
            {
                "p": "payload.audio",
                "v": "audio.WAKE_SOUND",
                "vt": "flow"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "4095d36df0bf7800"
            ]
        ]
    },
    {
        "id": "b944c218dd1d80cf",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Medium Volume",
        "props": [
            {
                "p": "payload.volume",
                "v": "66",
                "vt": "num"
            },
            {
                "p": "payload.audio",
                "v": "audio.WAKE_SOUND",
                "vt": "flow"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "4095d36df0bf7800"
            ]
        ]
    },
    {
        "id": "cd8b0f2964068165",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "High Volume",
        "props": [
            {
                "p": "payload.volume",
                "v": "100",
                "vt": "num"
            },
            {
                "p": "payload.audio",
                "v": "audio.WAKE_SOUND",
                "vt": "flow"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "4095d36df0bf7800"
            ]
        ]
    },
    {
        "id": "4095d36df0bf7800",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "acf064936cbe206e"
        ],
        "x": 295,
        "y": 300,
        "wires": []
    },
    {
        "id": "dcc3e4b965949c44",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "49568c675f1055e9",
            "62f7fa9610e77462"
        ],
        "x": 35,
        "y": 1740,
        "wires": [
            [
                "7d8f844d95a0a057"
            ]
        ]
    },
    {
        "id": "8aa8457966c1294f",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 900,
        "wires": []
    },
    {
        "id": "f9727f7f7488862d",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio Player",
        "info": "",
        "x": 90,
        "y": 1840,
        "wires": []
    },
    {
        "id": "1b563d9b71af7068",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "66cbd01c27b85f84",
            "51b7c7c047fd2605",
            "0ff74578e0a81cab",
            "97d940100fd6c4e4",
            "f8ba3ca312b725df",
            "3c33859bf78ed215",
            "8e6a6d9d5f9d1403",
            "819ffe8c2a50daa4",
            "b9c3ad8c4119f204",
            "62f7fa9610e77462"
        ],
        "x": 35,
        "y": 1940,
        "wires": [
            [
                "ab91ca2c5c750e95"
            ]
        ]
    },
    {
        "id": "7fbe952ddacdef3c",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Play Audio",
        "func": "const { audio_file } = msg.payload\nmsg.audio_obj = msg.payload\n\nif(audio_file) {\n    msg.payload = 'start'\n    msg.audioURI = audio_file\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1880,
        "wires": [
            [
                "5a44044c38f6a2b7"
            ]
        ]
    },
    {
        "id": "24365bd64551e5cd",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2200,
        "wires": []
    },
    {
        "id": "d3c721f30dc405fe",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio End",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 2160,
        "wires": [
            [
                "24365bd64551e5cd",
                "835f3cbfbff328bf"
            ]
        ]
    },
    {
        "id": "835f3cbfbff328bf",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Reset Audio",
        "func": "flow.set('current_audio_playing', null)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 2160,
        "wires": []
    },
    {
        "id": "b47fadcb378c2227",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "Toggle Audio State",
        "property": "payload.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "audio_player_states.PLAYING",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "audio_player_states.PAUSED",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "audio_player_states.STOPPED",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "audio_player_states.RESUMED",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 350,
        "y": 1940,
        "wires": [
            [
                "7fbe952ddacdef3c"
            ],
            [
                "64d5954e3b593755"
            ],
            [
                "b3be279cfd75a974"
            ],
            [
                "86c26390856a8017"
            ]
        ]
    },
    {
        "id": "64d5954e3b593755",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Pause Audio",
        "func": "msg.payload = 'pause'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2000,
        "wires": [
            [
                "c3907ce3b315e7d0"
            ]
        ]
    },
    {
        "id": "c3907ce3b315e7d0",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "87a8be781c772fe9"
        ],
        "x": 895,
        "y": 2000,
        "wires": []
    },
    {
        "id": "87a8be781c772fe9",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "c3907ce3b315e7d0",
            "3c25c445887cca7c"
        ],
        "x": 35,
        "y": 2160,
        "wires": [
            [
                "837e2a02b8b3cb89"
            ]
        ]
    },
    {
        "id": "b3be279cfd75a974",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Stop Audio",
        "func": "msg.payload = 'stop'\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2040,
        "wires": [
            [
                "c3907ce3b315e7d0"
            ]
        ]
    },
    {
        "id": "86c26390856a8017",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Resume Audio",
        "func": "msg.payload = 'resume'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2080,
        "wires": [
            [
                "c3907ce3b315e7d0"
            ]
        ]
    },
    {
        "id": "140b30a66cedb943",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Play Sound",
        "func": "const { PLAYING } = flow.get('audio_player_states')\nconst { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio')\nconst audio_state = flow.get(WAKE_SOUND)\n\nflow.set(WAKE_SOUND, {\n    ...audio_state, state: PLAYING\n})\n\nmsg.payload = {\n    audio: WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "819ffe8c2a50daa4"
            ]
        ]
    },
    {
        "id": "4c81fcc60674a9e1",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Play",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "140b30a66cedb943"
            ]
        ]
    },
    {
        "id": "dd19c29ede9b837b",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Pause Sound",
        "func": "const { PAUSED } = flow.get('audio_player_states')\nconst { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio')\nconst audio_state = flow.get(WAKE_SOUND)\n\nflow.set(WAKE_SOUND, {\n    ...audio_state, state: PAUSED\n})\n\nmsg.payload = {\n    audio: WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "819ffe8c2a50daa4"
            ]
        ]
    },
    {
        "id": "0b573ff8da384adc",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Pause",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 470,
        "y": 300,
        "wires": [
            [
                "dd19c29ede9b837b"
            ]
        ]
    },
    {
        "id": "d553a5c758663ee2",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Resume Sound",
        "func": "const { RESUMED } = flow.get('audio_player_states')\nconst { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio')\nconst audio_state = flow.get(WAKE_SOUND)\n\nflow.set(WAKE_SOUND, {\n    ...audio_state, state: RESUMED\n})\n\nmsg.payload = {\n    audio: WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 340,
        "wires": [
            [
                "819ffe8c2a50daa4"
            ]
        ]
    },
    {
        "id": "fcd53103b2ee45d3",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Resume",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 480,
        "y": 340,
        "wires": [
            [
                "d553a5c758663ee2"
            ]
        ]
    },
    {
        "id": "e70fab1ad935c865",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Stopped Sound",
        "func": "const { STOPPED } = flow.get('audio_player_states')\nconst { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio')\nconst audio_state = flow.get(WAKE_SOUND)\n\nflow.set(WAKE_SOUND, {\n    ...audio_state, state: STOPPED\n})\n\nmsg.payload = {\n    audio: WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 380,
        "wires": [
            [
                "819ffe8c2a50daa4"
            ]
        ]
    },
    {
        "id": "2067773c52cf5c67",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 470,
        "y": 380,
        "wires": [
            [
                "e70fab1ad935c865"
            ]
        ]
    },
    {
        "id": "819ffe8c2a50daa4",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "d067cf25769cc9a2",
            "1b563d9b71af7068"
        ],
        "x": 855,
        "y": 320,
        "wires": []
    },
    {
        "id": "5fa2284a12b19fc9",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "To Storage",
        "info": "",
        "x": 80,
        "y": 2280,
        "wires": []
    },
    {
        "id": "91e830cf715025c9",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "d": true,
        "name": "",
        "links": [
            "2b4a0860d67ccf97",
            "49568c675f1055e9"
        ],
        "x": 35,
        "y": 2320,
        "wires": [
            [
                "6b5fe6e5651bbcdc"
            ]
        ]
    },
    {
        "id": "6b5fe6e5651bbcdc",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Current Audio Config",
        "func": "const { NIGHT_SOUND: night_sound, WAKE_SOUND: wake_sound } = flow.get('audio')\nconst NIGHT_SOUND = flow.get(night_sound)\nconst WAKE_SOUND = flow.get(wake_sound)\n\nmsg.payload = {\n    NIGHT_SOUND, WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2320,
        "wires": [
            [
                "377cc3968f89cf3d"
            ]
        ]
    },
    {
        "id": "9af2857d9a1be37c",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "Check If Audio is Present",
        "property": "payload.audio",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 920,
        "wires": [
            [
                "86d20a5355d39ce3",
                "2b4a0860d67ccf97"
            ],
            [
                "20f8ab873c0bb663"
            ]
        ]
    },
    {
        "id": "20f8ab873c0bb663",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Parameter is Missing",
        "func": "\nthrow new Error('Audio parameter is required')",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 940,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "2b4a0860d67ccf97",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "91e830cf715025c9"
        ],
        "x": 535,
        "y": 860,
        "wires": []
    },
    {
        "id": "064db609db367336",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "ec7beb856b75bc82",
            "decd7dd7fcda1a73"
        ],
        "x": 795,
        "y": 2320,
        "wires": []
    },
    {
        "id": "21799f2975f9cd0d",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2380,
        "wires": []
    },
    {
        "id": "377cc3968f89cf3d",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Compile Audio Config",
        "func": "const { NIGHT_SOUND, WAKE_SOUND } = msg.payload\n\nmsg.payload = {\n    audio: {\n        NIGHT_SOUND, WAKE_SOUND\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2320,
        "wires": [
            [
                "064db609db367336",
                "21799f2975f9cd0d"
            ]
        ]
    },
    {
        "id": "ab91ca2c5c750e95",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Audio Input",
        "func": "const { audio } = msg.payload\nconst audio_config = flow.get(audio)\n\nmsg.payload = audio_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1940,
        "wires": [
            [
                "b47fadcb378c2227"
            ]
        ]
    },
    {
        "id": "f3226fefd804061d",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "Check If Audio is Present",
        "property": "payload.audio",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "ec82c39f81a74236"
            ],
            [
                "85f4acfda2a661c8"
            ]
        ]
    },
    {
        "id": "acf064936cbe206e",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "From API (Audio)",
        "links": [
            "4095d36df0bf7800"
        ],
        "x": 35,
        "y": 1040,
        "wires": [
            [
                "192c539d401cbfe5"
            ]
        ]
    },
    {
        "id": "ec82c39f81a74236",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Volume Handler",
        "func": "const { audio } = msg.payload\nconst audio_state = flow.get(audio) || {}\nconst new_audio_state = {\n    ...audio_state, ...msg.payload\n}\n\nflow.set(audio, new_audio_state)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1000,
        "wires": [
            [
                "49568c675f1055e9"
            ]
        ]
    },
    {
        "id": "85f4acfda2a661c8",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Parameter is Missing",
        "func": "\nthrow new Error('Audio parameter is required')",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1040,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "49568c675f1055e9",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "dcc3e4b965949c44",
            "91e830cf715025c9"
        ],
        "x": 915,
        "y": 1000,
        "wires": []
    },
    {
        "id": "192c539d401cbfe5",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Playing",
        "property": "current_audio_playing",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "f3226fefd804061d"
            ],
            [
                "8074f3d58d255362"
            ]
        ]
    },
    {
        "id": "8074f3d58d255362",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "If No Audio Playing",
        "func": "\nthrow new Error('No audio is currently playing')",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1060,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "f9696091e419c12c",
        "type": "PlaySound",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio Player",
        "playerOptions": "{ \"player\": \"mpg123\" }",
        "audioURI": "",
        "options": "{}",
        "x": 410,
        "y": 2160,
        "wires": [
            [
                "d3c721f30dc405fe"
            ]
        ]
    },
    {
        "id": "5a44044c38f6a2b7",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "property": "current_audio_playing",
        "propertyType": "flow",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 1880,
        "wires": [
            [
                "3c25c445887cca7c"
            ],
            [
                "9a9a620506e794dc"
            ]
        ]
    },
    {
        "id": "9a9a620506e794dc",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio is Playing",
        "func": "msg.payload = 'stop'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1940,
        "wires": [
            [
                "c3907ce3b315e7d0",
                "290fdd10d19a84aa"
            ]
        ]
    },
    {
        "id": "290fdd10d19a84aa",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Reset Audio",
        "func": "msg.payload = {\n    audio_file: msg.audioURI\n}\n\nflow.set('current_audio_playing', null)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1940,
        "wires": [
            [
                "7fbe952ddacdef3c"
            ]
        ]
    },
    {
        "id": "3c25c445887cca7c",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "87a8be781c772fe9"
        ],
        "x": 895,
        "y": 1860,
        "wires": []
    },
    {
        "id": "837e2a02b8b3cb89",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Current Audio Playing",
        "func": "const player_state = msg.payload\n\nif(player_state === 'start')\n    flow.set('current_audio_playing', msg.audio_obj)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2160,
        "wires": [
            [
                "f9696091e419c12c"
            ]
        ]
    },
    {
        "id": "f76419f21e496097",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 1700,
        "wires": []
    },
    {
        "id": "efdf05c1fd0eb8b2",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1700,
        "wires": []
    },
    {
        "id": "2b844dbfbc780a53",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1740,
        "wires": []
    },
    {
        "id": "dcb72c7e2448a69b",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1780,
        "wires": []
    },
    {
        "id": "c8535874aa1ff738",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio Assets List",
        "links": [
            "b1c4643e4ab543a5",
            "5192ecce926e940d"
        ],
        "x": 135,
        "y": 1120,
        "wires": [
            [
                "4fbca4893f9888f9"
            ]
        ]
    },
    {
        "id": "4fbca4893f9888f9",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Send Available Audio Files",
        "func": "const audio_assets = JSON.parse( \n    JSON.stringify( flow.get('audio_assets') )\n)\n\nfor(let key in audio_assets) {\n    audio_assets[key] = Object.keys( audio_assets[key] )\n}\n\nmsg.payload = audio_assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "900b291d7708de39"
            ]
        ]
    },
    {
        "id": "5b84f8efca57f859",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 775,
        "y": 1140,
        "wires": []
    },
    {
        "id": "7a8082dc4e53ede4",
        "type": "comment",
        "z": "4fcd3dd2df70f0c8",
        "name": "Reset",
        "info": "",
        "x": 70,
        "y": 400,
        "wires": []
    },
    {
        "id": "f430cccf82ec05a3",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Event Config",
        "func": "const { event: event_config } = global.get('defaults_config')\nconst { event } = msg.payload\n\nmsg.payload = event\nmsg.filename = event_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "e3b233261f0697e2"
            ]
        ]
    },
    {
        "id": "e3b233261f0697e2",
        "type": "trigger",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 180,
        "wires": [
            [
                "d4a9d574e8776756"
            ]
        ]
    },
    {
        "id": "6a7c4e44cfb9a01d",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract System Config",
        "func": "const { system: system_config } = global.get('defaults_config')\nconst { system } = msg.payload\n\nmsg.payload = system\nmsg.filename = system_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "41f01c7bb18553ca"
            ]
        ]
    },
    {
        "id": "41f01c7bb18553ca",
        "type": "trigger",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "d4a9d574e8776756"
            ]
        ]
    },
    {
        "id": "5be91df37a5ca220",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Testing Section",
        "info": "",
        "x": 100,
        "y": 2760,
        "wires": []
    },
    {
        "id": "a240ce146f5a7cec",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2960,
        "wires": [
            [
                "1df171d5d7671863"
            ]
        ]
    },
    {
        "id": "1df171d5d7671863",
        "type": "function",
        "z": "427808241d304283",
        "name": "Schedex Input Template",
        "func": "const { NIGHT_LIGHT } = flow.get('lights')\nconst { FADE_ON, FADE_OFF } = flow.get('light_states')\n\nconst { sunset } = flow.get('events')\nconst { time } = sunset\n\nconst ontime = 'sunsetStart'\nconst offtime = time\n\nconst onpayload = {\n    light: NIGHT_LIGHT,\n    state: FADE_ON\n}\n\nconst offpayload = {\n    light: NIGHT_LIGHT,\n    state: FADE_OFF\n}\n\nconst onoffset = 0\nconst offoffset = 0\n\nconst day_selected = {\n    mon: true,\n    tue: true,\n    wed: true,\n    thu: true,\n    fri: true,\n    sat: true,\n    sun: true\n}\n\nconst latitude = 12.8797207\nconst longitude = 121.7740173\n\nconst schedex_input = {\n    ontime, \n    offtime, \n    onpayload, \n    offpayload,\n    onoffset,\n    offoffset,\n    day_selected,\n    latitude,\n    longitude\n}\n\nmsg.payload = schedex_input\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2960,
        "wires": [
            [
                "117250d66187fc3d"
            ]
        ]
    },
    {
        "id": "117250d66187fc3d",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 570,
        "y": 2960,
        "wires": [
            [
                "53afddc4b9ae2286"
            ]
        ]
    },
    {
        "id": "53afddc4b9ae2286",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2960,
        "wires": []
    },
    {
        "id": "259fcaaf2b86aa30",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "2247154c64c64885",
            "032d3dc953dde9d4"
        ],
        "x": 35,
        "y": 1180,
        "wires": [
            [
                "bccde6824b1b731e"
            ]
        ]
    },
    {
        "id": "c471b87c92ffd98e",
        "type": "function",
        "z": "427808241d304283",
        "name": "Process Bedtime Event",
        "func": "const events = JSON.parse(JSON.stringify(flow.get('events')))\nconst { type } = msg.payload\nconst { time, light, sound, relax }  = events[type]\n\nif(light) {\n    light.ontime = time\n    light.offtime = time\n    light.onpayload = JSON.stringify(light.onpayload)\n    light.offpayload = JSON.stringify(light.offpayload)\n}\n\nif(sound) {\n    sound.ontime = time\n    sound.offtime = time\n    sound.onpayload = JSON.stringify(sound.onpayload)\n    sound.offpayload = JSON.stringify(sound.offpayload)\n}\n\nif(relax) {\n    relax.ontime = time\n    relax.offtime = time\n    relax.onpayload = JSON.stringify(relax.onpayload)\n    relax.offpayload = JSON.stringify(relax.offpayload)\n}\n\nconst light_output = {\n    payload: light || null\n}\n\nconst sound_output = {\n    payload: sound || null\n}\n\nconst relaxation_output = {\n    payload: relax || null\n}\n\nreturn [light_output, sound_output, relaxation_output];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1100,
        "wires": [
            [
                "5ac43b6bb0c97b1f"
            ],
            [
                "7b93ad097c44a871"
            ],
            [
                "28c3772888cfc7fa"
            ]
        ]
    },
    {
        "id": "d07a1b83f9c64ac9",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Event Selector",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "bedtime",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "waketime",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sunrise",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sunset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 380,
        "y": 1180,
        "wires": [
            [
                "c471b87c92ffd98e"
            ],
            [
                "4299733cfc962944"
            ],
            [
                "f47f1bd8da8b2a17"
            ],
            [
                "2fcb5ce120904711"
            ]
        ]
    },
    {
        "id": "ce1ae75d01b821fa",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Night Light Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1500,
        "wires": [
            [
                "dfdda317a7a634f3"
            ]
        ]
    },
    {
        "id": "f520c999092bcc9d",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Night Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1580,
        "wires": [
            [
                "41260011c40c4717"
            ]
        ]
    },
    {
        "id": "6d92577b0a9c447d",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Night Light)",
        "links": [
            "99890cfd06ef832a"
        ],
        "x": 675,
        "y": 1500,
        "wires": []
    },
    {
        "id": "c34ed1fab46fbda8",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Night Sound)",
        "links": [],
        "x": 675,
        "y": 1580,
        "wires": []
    },
    {
        "id": "4299733cfc962944",
        "type": "function",
        "z": "427808241d304283",
        "name": "Process Waketime Event",
        "func": "const events = JSON.parse(JSON.stringify(flow.get('events')))\nconst { type } = msg.payload\n\nconst { light, sound, time }  = events[type]\n\nif(light) {\n    light.ontime = time\n    light.offtime = time\n    light.onpayload = JSON.stringify(light.onpayload)\n    light.offpayload = JSON.stringify(light.offpayload)\n}\n\nif(sound) {\n    sound.ontime = time\n    sound.offtime = time\n    sound.onpayload = JSON.stringify(sound.onpayload)\n    sound.offpayload = JSON.stringify(sound.offpayload)\n}\n\nconst light_output = {\n    payload: light || null\n}\n\nconst sound_output = {\n    payload: sound || null\n}\n\nreturn [light_output, sound_output];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1200,
        "wires": [
            [
                "349e569a87321cae"
            ],
            [
                "e6051fd47e03a3ac"
            ]
        ]
    },
    {
        "id": "f47f1bd8da8b2a17",
        "type": "function",
        "z": "427808241d304283",
        "name": "Process Sunrise Event",
        "func": "const events = JSON.parse(JSON.stringify(flow.get('events')))\nconst timezone_offset = flow.get('timezone_offset')\nconst { type } = msg.payload\n\nconst { light, sound, time }  = events[type]\n\nif(light) {\n    light.ontime = time\n    light.offtime = time\n    light.onoffset += timezone_offset\n    light.offoffset += timezone_offset\n}\n\nif(sound) {\n    sound.ontime = time\n    sound.offtime = time\n    light.onoffset += timezone_offset\n    light.offoffset += timezone_offset\n}\n\nconst light_output = {\n    payload: light || null\n}\n\nconst sound_output = {\n    payload: sound || null\n}\n\nreturn [light_output, sound_output];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1240,
        "wires": [
            [
                "68cb7f19d709eeda"
            ],
            [
                "b914b988c5f86161"
            ]
        ]
    },
    {
        "id": "2fcb5ce120904711",
        "type": "function",
        "z": "427808241d304283",
        "name": "Process Sunset Event",
        "func": "const events = JSON.parse(JSON.stringify(flow.get('events')))\nconst timezone_offset = flow.get('timezone_offset')\nconst { type } = msg.payload\n\nconst { light, sound, time }  = events[type]\n\nif(light) {\n    light.ontime = time\n    light.offtime = time\n    light.onoffset += timezone_offset\n    light.offoffset += timezone_offset\n    light.onpayload = JSON.stringify(light.onpayload)\n    light.offpayload = JSON.stringify(light.offpayload)\n}\n\nif(sound) {\n    sound.ontime = time\n    sound.offtime = time\n    sound.onoffset += timezone_offset\n    sound.offoffset += timezone_offset\n    sound.onpayload = JSON.stringify(sound.onpayload)\n    sound.offpayload = JSON.stringify(sound.offpayload)\n}\n\nconst light_output = {\n    payload: light || null\n}\n\nconst sound_output = {\n    payload: sound || null\n}\n\nreturn [light_output, sound_output];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1300,
        "wires": [
            [
                "13f3d625ca8b5451"
            ],
            [
                "f5e24ac39eacf5b5"
            ]
        ]
    },
    {
        "id": "5ac43b6bb0c97b1f",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "fc9a17a39836810e"
        ],
        "x": 915,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7b93ad097c44a871",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "13a9c539dbf6804d",
            "ded93f1e4f9964fb"
        ],
        "x": 915,
        "y": 1080,
        "wires": []
    },
    {
        "id": "349e569a87321cae",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "f469bf6260d912ed"
        ],
        "x": 915,
        "y": 1160,
        "wires": []
    },
    {
        "id": "e6051fd47e03a3ac",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "f100181ab0425189"
        ],
        "x": 915,
        "y": 1200,
        "wires": []
    },
    {
        "id": "68cb7f19d709eeda",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "495043e9e266776a"
        ],
        "x": 915,
        "y": 1240,
        "wires": []
    },
    {
        "id": "b914b988c5f86161",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "783accad78d48adb"
        ],
        "x": 915,
        "y": 1280,
        "wires": []
    },
    {
        "id": "13f3d625ca8b5451",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "88cc8f4bee1804d7"
        ],
        "x": 915,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f5e24ac39eacf5b5",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "9d06b45d4b526d19"
        ],
        "x": 915,
        "y": 1360,
        "wires": []
    },
    {
        "id": "fc9a17a39836810e",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "5ac43b6bb0c97b1f"
        ],
        "x": 35,
        "y": 1500,
        "wires": [
            [
                "4e5b6a6d74a43c95"
            ]
        ]
    },
    {
        "id": "13a9c539dbf6804d",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "7b93ad097c44a871"
        ],
        "x": 35,
        "y": 1580,
        "wires": [
            [
                "b2bd9aa7291da2c0"
            ]
        ]
    },
    {
        "id": "2663df0f99463eb3",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Wake Light Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1840,
        "wires": [
            [
                "908ded6f7a51aa55"
            ]
        ]
    },
    {
        "id": "a0305c97741e49da",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Wake Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1920,
        "wires": [
            [
                "cf92539e199f740a"
            ]
        ]
    },
    {
        "id": "fe19b0d6879b5403",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Wake Light)",
        "links": [
            "99890cfd06ef832a"
        ],
        "x": 675,
        "y": 1840,
        "wires": []
    },
    {
        "id": "fe30fcaa2bea0d31",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Wake Sound)",
        "links": [],
        "x": 675,
        "y": 1920,
        "wires": []
    },
    {
        "id": "f469bf6260d912ed",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "349e569a87321cae"
        ],
        "x": 35,
        "y": 1840,
        "wires": [
            [
                "07bb8b4e4f5bcd11"
            ]
        ]
    },
    {
        "id": "f100181ab0425189",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "e6051fd47e03a3ac"
        ],
        "x": 35,
        "y": 1920,
        "wires": [
            [
                "73870de815788819"
            ]
        ]
    },
    {
        "id": "a57d1afa4409fe65",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Sunrise Light Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 2060,
        "wires": [
            [
                "675006c59b31ac8a"
            ]
        ]
    },
    {
        "id": "91e434e46084f453",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Sunrise Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 380,
        "y": 2140,
        "wires": [
            [
                "5c3303e1b8e4eee5"
            ]
        ]
    },
    {
        "id": "144b0ce6de73da81",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Sunrise Light)",
        "links": [
            "99890cfd06ef832a"
        ],
        "x": 675,
        "y": 2060,
        "wires": []
    },
    {
        "id": "fd3d2a96f7af15a2",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Sunrise Sound)",
        "links": [],
        "x": 675,
        "y": 2140,
        "wires": []
    },
    {
        "id": "495043e9e266776a",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "68cb7f19d709eeda"
        ],
        "x": 35,
        "y": 2060,
        "wires": [
            [
                "e05e972893b302e7"
            ]
        ]
    },
    {
        "id": "783accad78d48adb",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "b914b988c5f86161"
        ],
        "x": 35,
        "y": 2140,
        "wires": [
            [
                "81edaddf3e9d531b"
            ]
        ]
    },
    {
        "id": "97423e057c4b1573",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Sunset Light Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 2280,
        "wires": [
            [
                "8d6a6515a8088da1"
            ]
        ]
    },
    {
        "id": "ec600430246adfbc",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Sunset Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 380,
        "y": 2360,
        "wires": [
            [
                "14d9240831b80573"
            ]
        ]
    },
    {
        "id": "07e37e563f84c4ef",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Sunset Light)",
        "links": [
            "99890cfd06ef832a"
        ],
        "x": 675,
        "y": 2280,
        "wires": []
    },
    {
        "id": "2bfd2be2228a7d7f",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Sunset Sound)",
        "links": [],
        "x": 675,
        "y": 2360,
        "wires": []
    },
    {
        "id": "88cc8f4bee1804d7",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "13f3d625ca8b5451"
        ],
        "x": 35,
        "y": 2280,
        "wires": [
            [
                "c3a64d8207260a6e"
            ]
        ]
    },
    {
        "id": "9d06b45d4b526d19",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "f5e24ac39eacf5b5"
        ],
        "x": 35,
        "y": 2360,
        "wires": [
            [
                "5e3cc9fc7ada368a"
            ]
        ]
    },
    {
        "id": "106e93b658270025",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 3060,
        "wires": [
            [
                "70fc9bec53d3ad66"
            ]
        ]
    },
    {
        "id": "70fc9bec53d3ad66",
        "type": "function",
        "z": "427808241d304283",
        "name": "Timezone Offset",
        "func": "const date = new Date()\n\nmsg.payload = date.getTimezoneOffset()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 3060,
        "wires": [
            [
                "3a0e0a204596172f"
            ]
        ]
    },
    {
        "id": "3a0e0a204596172f",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 3060,
        "wires": []
    },
    {
        "id": "3ced736f1171ab7a",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Bedtime Events",
        "info": "",
        "x": 100,
        "y": 1440,
        "wires": []
    },
    {
        "id": "9b7ef405323b93d4",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Waketime Events",
        "info": "",
        "x": 100,
        "y": 1780,
        "wires": []
    },
    {
        "id": "5c04f3608e849a3b",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Sunrise Events",
        "info": "",
        "x": 100,
        "y": 2000,
        "wires": []
    },
    {
        "id": "6d1b3f02e40ddb4d",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Sunset Events",
        "info": "",
        "x": 90,
        "y": 2220,
        "wires": []
    },
    {
        "id": "8523b9a0de75b41c",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Event Processor",
        "info": "",
        "x": 100,
        "y": 1040,
        "wires": []
    },
    {
        "id": "0c4d8870999efbbf",
        "type": "switch",
        "z": "e1a40699ea85764e",
        "name": "Light Handler",
        "property": "payload.light",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NIGHT_LIGHT.light",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "WAKE_LIGHT.light",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 840,
        "wires": [
            [
                "8647433edc9277b7"
            ],
            [
                "91512abe54268463"
            ]
        ]
    },
    {
        "id": "c36c3b8450aaf67a",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Light Handler",
        "links": [
            "076a5ab5e051a561",
            "4f7655a54e04938c",
            "fe0fda044e9bd38a",
            "f304279097451e82"
        ],
        "x": 155,
        "y": 840,
        "wires": [
            [
                "0c4d8870999efbbf"
            ]
        ]
    },
    {
        "id": "8647433edc9277b7",
        "type": "switch",
        "z": "e1a40699ea85764e",
        "name": "Night Light",
        "property": "payload.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "light_states.FADE_ON",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.ON",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.OFF",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.FADE_OFF",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.ADJUST_BRIGHTNESS",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "8f4f3375b91bce77"
            ],
            [
                "6e61cac404cd1fd5"
            ],
            [
                "88f4bd92c145a669"
            ],
            [
                "ea31ccf57e478c46"
            ],
            [
                "3f73f5ad1eb070fe"
            ]
        ]
    },
    {
        "id": "91512abe54268463",
        "type": "switch",
        "z": "e1a40699ea85764e",
        "name": "Wake Light",
        "property": "payload.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "light_states.FADE_ON",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.ON",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.OFF",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.FADE_OFF",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.ADJUST_BRIGHTNESS",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 590,
        "y": 880,
        "wires": [
            [
                "a537ecd6a1fbca50"
            ],
            [
                "7f332a4dc2da9171"
            ],
            [
                "9d1dbf5d28d51703"
            ],
            [
                "17a595eed9d0742d"
            ],
            [
                "7e281b6bea2e9e38"
            ]
        ]
    },
    {
        "id": "6e61cac404cd1fd5",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "35e4ae63f18d6679"
        ],
        "x": 815,
        "y": 700,
        "wires": []
    },
    {
        "id": "8f4f3375b91bce77",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "e70d1942fa62036c"
        ],
        "x": 815,
        "y": 660,
        "wires": []
    },
    {
        "id": "ea31ccf57e478c46",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "99d636e4c54833d3"
        ],
        "x": 815,
        "y": 780,
        "wires": []
    },
    {
        "id": "88f4bd92c145a669",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "f6a3886c0d4dd377"
        ],
        "x": 815,
        "y": 740,
        "wires": []
    },
    {
        "id": "7f332a4dc2da9171",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "67801cebe5dcc6c3",
            "bbc14b24f4ab375e"
        ],
        "x": 815,
        "y": 900,
        "wires": []
    },
    {
        "id": "a537ecd6a1fbca50",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "1c6e4cb06ec4242a",
            "5b50227a9e312302"
        ],
        "x": 815,
        "y": 860,
        "wires": []
    },
    {
        "id": "17a595eed9d0742d",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "706856ecf2888e23",
            "0014672d01606e55"
        ],
        "x": 815,
        "y": 980,
        "wires": []
    },
    {
        "id": "9d1dbf5d28d51703",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "d3cca85a24e36670",
            "f830b6987eeb3c91"
        ],
        "x": 815,
        "y": 940,
        "wires": []
    },
    {
        "id": "d6f259f76a970ae1",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Adjust Max Brightness",
        "func": "const { state, max_brightness, light } = msg.payload\nconst { ADJUST_BRIGHTNESS } = flow.get('light_states')\nconst lightState = flow.get(light)\n\nconst new_light_state = {\n    ...lightState, \n    max_brightness,\n    state,\n    previous_state: lightState.state\n}\n\nmsg.counter = max_brightness\n\nif(lightState.state !== ADJUST_BRIGHTNESS) \n    flow.set(light, new_light_state)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "f0c75390fa0772e0",
                "6f970beb3b20be63",
                "5236552d84fbafea"
            ]
        ]
    },
    {
        "id": "013f132b89390dae",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (On)",
        "links": [
            "81c8ed3d1f966e48",
            "5bde7861c88f93ce",
            "9161018b3a1cc506",
            "fad2e5d76f69c42c",
            "59c74f61830160c5",
            "3f73f5ad1eb070fe"
        ],
        "x": 35,
        "y": 1380,
        "wires": [
            [
                "d6f259f76a970ae1"
            ]
        ]
    },
    {
        "id": "400b7b11d39d6e90",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Revert to Previous",
        "func": "const { NIGHT_LIGHT } = flow.get('lights')\nconst night_light = flow.get(NIGHT_LIGHT)\n\nnight_light.state = night_light.previous_state\ndelete night_light['previous_state']\n\nflow.set(NIGHT_LIGHT, night_light)\n\nmsg.payload = {\n    ...night_light\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1340,
        "wires": [
            [
                "fe0fda044e9bd38a"
            ]
        ]
    },
    {
        "id": "6f970beb3b20be63",
        "type": "trigger",
        "z": "e1a40699ea85764e",
        "name": "",
        "op1": "",
        "op2": "previous_state",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "3",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 360,
        "y": 1340,
        "wires": [
            [
                "400b7b11d39d6e90"
            ]
        ]
    },
    {
        "id": "ea0ae540ddba98b8",
        "type": "ui_slider",
        "z": "e1a40699ea85764e",
        "name": "",
        "label": "Night Light Brightness",
        "tooltip": "",
        "group": "9933a45d.b3b0e",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": "10",
        "max": "100",
        "step": 1,
        "className": "",
        "x": 640,
        "y": 260,
        "wires": [
            [
                "38f9fed8f00fc587"
            ]
        ]
    },
    {
        "id": "fad2e5d76f69c42c",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "013f132b89390dae"
        ],
        "x": 915,
        "y": 260,
        "wires": []
    },
    {
        "id": "38f9fed8f00fc587",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "const brightness_level = msg.payload\nconst { NIGHT_LIGHT } = flow.get('lights')\nconst night_light = flow.get(NIGHT_LIGHT)\n\nnight_light.max_brightness = brightness_level\n\nflow.set(NIGHT_LIGHT, night_light)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 260,
        "wires": [
            [
                "fad2e5d76f69c42c"
            ]
        ]
    },
    {
        "id": "fe0fda044e9bd38a",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "c36c3b8450aaf67a"
        ],
        "x": 675,
        "y": 1340,
        "wires": []
    },
    {
        "id": "627d595124cde24e",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "35e4ae63f18d6679"
        ],
        "x": 875,
        "y": 60,
        "wires": []
    },
    {
        "id": "792af44094a0b0c2",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "9933a45d.b3b0e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Night Light On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 620,
        "y": 60,
        "wires": [
            [
                "627d595124cde24e"
            ]
        ]
    },
    {
        "id": "e67bb6fff1bf84c8",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "9933a45d.b3b0e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Night Light Fade On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 640,
        "y": 100,
        "wires": [
            [
                "0eb1bec83ebe053c"
            ]
        ]
    },
    {
        "id": "82a3398cb2e8036a",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "9933a45d.b3b0e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Night Light Fade Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 640,
        "y": 140,
        "wires": [
            [
                "60a1514379cf765d"
            ]
        ]
    },
    {
        "id": "aa80c32f22b4ccd7",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "9933a45d.b3b0e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Night Light Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 620,
        "y": 180,
        "wires": [
            [
                "404746cedc16dfcd"
            ]
        ]
    },
    {
        "id": "4c149006d1618a77",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "API Config",
        "func": "const events = {\n    bedtime: 'bedtime',\n    waketime: 'waketime',\n    sunrise: 'sunrise',\n    sunset: 'sunset'\n}\n\nconst lights = {\n    NIGHT_LIGHT: 'NIGHT_LIGHT',\n    WAKE_LIGHT: 'WAKE_LIGHT'\n}\n\nconst audio = {\n    NIGHT_SOUND: 'NIGHT_SOUND',\n    WAKE_SOUND: 'WAKE_SOUND',\n    RELAXATION_SOUND: 'RELAXATION_SOUND'\n}\n\nflow.set('events', events)\nflow.set('lights', lights)\nflow.set('audio', audio)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": []
    },
    {
        "id": "583ea8bb450c7347",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1680,
        "wires": [
            [
                "b0613226d302c452",
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "b0613226d302c452",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Fade Counter",
        "func": "const { FADE_ON, ON } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { state, light, max_brightness } = wake_light\n\nif(msg.counter >= max_brightness) {\n    flow.set(light, {\n        ...wake_light, state: ON\n    })\n    \n    return null\n}\n\nif(state !== FADE_ON)\n    return null\n\nmsg.counter++\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1680,
        "wires": [
            [
                "583ea8bb450c7347"
            ]
        ]
    },
    {
        "id": "0678df904206e8dd",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Fade On",
        "func": "const { FADE_ON } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { light, max_brightness, tick } = wake_light\nconst counter = flow.get('night_light_current_brightness')\n\nconst light_config = {\n    ...wake_light, state: FADE_ON\n}\n\nflow.set(light, light_config)\n\nmsg.counter = counter\nmsg.delay = tick\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1680,
        "wires": [
            [
                "b0613226d302c452"
            ]
        ]
    },
    {
        "id": "ede233c7a745c8a5",
        "type": "change",
        "z": "e1a40699ea85764e",
        "name": "Payload to Counter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "counter",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "wake_light_current_brightness",
                "pt": "flow",
                "to": "counter",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1840,
        "wires": [
            [
                "ba1dff0b015dd369"
            ]
        ]
    },
    {
        "id": "5b50227a9e312302",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Fade On)",
        "links": [
            "b2e7a0407aea6a2a",
            "48503f83daebe740",
            "bd5fce3febdf15d7",
            "a537ecd6a1fbca50",
            "47ff69e28e3253c7"
        ],
        "x": 35,
        "y": 1680,
        "wires": [
            [
                "0678df904206e8dd"
            ]
        ]
    },
    {
        "id": "bc01ae598792fec7",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Fade Off",
        "func": "const { FADE_OFF } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { light, max_brightness, tick } = wake_light\nconst light_config = {\n    ...wake_light, state: FADE_OFF\n}\n\nflow.set(light, light_config)\n\nmsg.counter = flow.get('wake_light_current_brightness')\nmsg.delay = tick\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 2000,
        "wires": [
            [
                "b7a3a968c21c1c87"
            ]
        ]
    },
    {
        "id": "b7a3a968c21c1c87",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Fade Counter",
        "func": "const { FADE_OFF, OFF } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { state, light, max_brightness } = wake_light\n\nif(msg.counter <= 0) {\n    flow.set(light, {\n        ...wake_light, state: OFF\n    })\n    \n    return null\n}\n\nif(state !== FADE_OFF)\n    return null\n\nmsg.counter--\nflow.set('wake_light_current_brightness', msg.counter)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2000,
        "wires": [
            [
                "bceff95bf4c455d9"
            ]
        ]
    },
    {
        "id": "0014672d01606e55",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Fade Off)",
        "links": [
            "960cc71d221701e5",
            "6e09738fba4f3349",
            "d9103be68bd22c99",
            "17a595eed9d0742d",
            "8be0100032eb33f1"
        ],
        "x": 35,
        "y": 2000,
        "wires": [
            [
                "bc01ae598792fec7"
            ]
        ]
    },
    {
        "id": "ff56fb4543730841",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle On",
        "func": "const { ON } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { light, max_brightness, tick } = wake_light\nconst light_config = {\n    ...wake_light, state: ON\n}\n\nflow.set(light, light_config)\n\nmsg.counter = max_brightness\nmsg.delay = tick\nmsg.payload = light_config\n\nflow.set('wake_light_current_brightness', max_brightness)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1740,
        "wires": [
            [
                "d0cde0e138d4caed"
            ]
        ]
    },
    {
        "id": "b252f7eb5d0776c4",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1940,
        "wires": [
            [
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "bceff95bf4c455d9",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 2000,
        "wires": [
            [
                "b7a3a968c21c1c87",
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "d0cde0e138d4caed",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1740,
        "wires": [
            [
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "bbc14b24f4ab375e",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (On)",
        "links": [
            "81c8ed3d1f966e48",
            "5bde7861c88f93ce",
            "9161018b3a1cc506",
            "7f332a4dc2da9171",
            "5cf54b7658242ff1"
        ],
        "x": 35,
        "y": 1740,
        "wires": [
            [
                "ff56fb4543730841"
            ]
        ]
    },
    {
        "id": "f830b6987eeb3c91",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Off)",
        "links": [
            "25cd6159ea46fd09",
            "7f04188022e29c07",
            "6277dbf5345db5cb",
            "9d1dbf5d28d51703",
            "0753ed9b53d7e4f5"
        ],
        "x": 35,
        "y": 1940,
        "wires": [
            [
                "1903cfd8d5af3d7c"
            ]
        ]
    },
    {
        "id": "ba1dff0b015dd369",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Control)",
        "links": [
            "3ae8dc738dda02fa"
        ],
        "x": 875,
        "y": 1880,
        "wires": []
    },
    {
        "id": "8c1cd366aa62ef23",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "To Wake Light",
        "info": "",
        "x": 910,
        "y": 1780,
        "wires": []
    },
    {
        "id": "83aaf991dc94095c",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (On)",
        "links": [
            "81c8ed3d1f966e48",
            "5bde7861c88f93ce",
            "9161018b3a1cc506",
            "fd4b212aed8bb7d3",
            "79dc9f8d1d812eba",
            "7e281b6bea2e9e38"
        ],
        "x": 35,
        "y": 1840,
        "wires": [
            [
                "9e72b563ccd130e9"
            ]
        ]
    },
    {
        "id": "2ec5aa6e81203463",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Revert to Previous",
        "func": "const { WAKE_LIGHT } = flow.get('lights')\nconst wake_light = flow.get(WAKE_LIGHT)\n\nwake_light.state = wake_light.previous_state\ndelete wake_light['previous_state']\n\nflow.set(WAKE_LIGHT, wake_light)\n\nmsg.payload = {\n    ...wake_light\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1800,
        "wires": [
            [
                "4f7655a54e04938c"
            ]
        ]
    },
    {
        "id": "ecc883a0274381d8",
        "type": "trigger",
        "z": "e1a40699ea85764e",
        "name": "",
        "op1": "",
        "op2": "previous_state",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "3",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 360,
        "y": 1800,
        "wires": [
            [
                "2ec5aa6e81203463"
            ]
        ]
    },
    {
        "id": "4f7655a54e04938c",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "c36c3b8450aaf67a"
        ],
        "x": 675,
        "y": 1800,
        "wires": []
    },
    {
        "id": "1903cfd8d5af3d7c",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Off",
        "func": "const { OFF } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { light, max_brightness, tick } = wake_light\nconst light_config = {\n    ...wake_light, state: OFF\n}\n\nflow.set(light, light_config)\n\nmsg.counter = 0\nmsg.delay = tick\n\nflow.set('wake_light_current_brightness', 0)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1940,
        "wires": [
            [
                "b252f7eb5d0776c4"
            ]
        ]
    },
    {
        "id": "d39db940d012a468",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Initialize Constants",
        "func": "const { NIGHT_LIGHT, WAKE_LIGHT } = msg.payload\n\nconst lights = {\n    NIGHT_LIGHT: 'NIGHT_LIGHT',\n    WAKE_LIGHT: 'WAKE_LIGHT'\n}\n\nconst light_states = {\n    OFF: 'OFF',\n    FADE_ON: 'FADE_ON',\n    FADE_OFF: 'FADE_OFF',\n    ON: 'ON',\n    ADJUST_BRIGHTNESS: 'ADJUST_BRIGHTNESS'\n}\n\nflow.set('lights', lights)\nflow.set('light_states', light_states)\n\nflow.set(lights.NIGHT_LIGHT, NIGHT_LIGHT)\nflow.set(lights.WAKE_LIGHT, WAKE_LIGHT)\n\nflow.set('night_light_current_brightness', 0)\nflow.set('wake_light_current_brightness', 0)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 360,
        "wires": []
    },
    {
        "id": "47ff69e28e3253c7",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "5b50227a9e312302"
        ],
        "x": 355,
        "y": 100,
        "wires": []
    },
    {
        "id": "8be0100032eb33f1",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "0014672d01606e55"
        ],
        "x": 355,
        "y": 140,
        "wires": []
    },
    {
        "id": "0753ed9b53d7e4f5",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "f830b6987eeb3c91"
        ],
        "x": 355,
        "y": 180,
        "wires": []
    },
    {
        "id": "0e5c1f3d27343ed1",
        "type": "ui_slider",
        "z": "e1a40699ea85764e",
        "name": "",
        "label": "Wake Light Brightness",
        "tooltip": "",
        "group": "91c4859.9f3e5f8",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": "10",
        "max": "100",
        "step": 1,
        "className": "",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "bf9bd97b5457ba76"
            ]
        ]
    },
    {
        "id": "fd4b212aed8bb7d3",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "83aaf991dc94095c"
        ],
        "x": 395,
        "y": 260,
        "wires": []
    },
    {
        "id": "bf9bd97b5457ba76",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "const brightness_level = msg.payload\nconst { WAKE_LIGHT } = flow.get('lights')\nconst wake_light = flow.get(WAKE_LIGHT)\n\nwake_light.max_brightness = brightness_level\n\nflow.set(WAKE_LIGHT, wake_light)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "fd4b212aed8bb7d3"
            ]
        ]
    },
    {
        "id": "5cf54b7658242ff1",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "bbc14b24f4ab375e"
        ],
        "x": 355,
        "y": 60,
        "wires": []
    },
    {
        "id": "6ee61aeae2fc75d0",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "91c4859.9f3e5f8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Wake Light On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "5cf54b7658242ff1"
            ]
        ]
    },
    {
        "id": "6c624c80fad1e718",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "91c4859.9f3e5f8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Wake Light Fade On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "47ff69e28e3253c7"
            ]
        ]
    },
    {
        "id": "753721aff0f529b0",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "91c4859.9f3e5f8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Wake Light Fade Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "8be0100032eb33f1"
            ]
        ]
    },
    {
        "id": "a2caf23355772d66",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "91c4859.9f3e5f8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Wake Light Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "0753ed9b53d7e4f5"
            ]
        ]
    },
    {
        "id": "14b017febce3fd48",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 840,
        "wires": []
    },
    {
        "id": "1bd0312798db6fb0",
        "type": "link in",
        "z": "f6f2187d.f17ca8",
        "name": "HTTP Response",
        "links": [
            "69dda5ef5e2c5df0",
            "a37c62cfcb685775",
            "0b58e656f91710d1",
            "5b84f8efca57f859",
            "a3e05fe8f858f97a",
            "5d24fd8093ed5590",
            "189ae71dc788c445",
            "6a68828c35240fc7",
            "4e6927d1d4c11009",
            "289d6a9a7fd46d3a",
            "fd065ae767b74615",
            "2202f3a074aa0c70",
            "bc02de84fc2b537e",
            "8241ce699c09ea33",
            "a193b63a6d0a67ad",
            "d9c21651d3bf73f3",
            "84cc3221f3ae7945",
            "7a6af03a46076c29",
            "39c3271784c41469"
        ],
        "x": 635,
        "y": 840,
        "wires": [
            [
                "14b017febce3fd48"
            ]
        ]
    },
    {
        "id": "d629cceacc4dc2f0",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "name": "HTTP Request Error Catcher",
        "scope": [
            "cf57cdebde601ad2",
            "383278fcb6f9293d",
            "cb5e0ab8ee838002",
            "e675dae377251908",
            "ca7603bf1dfcb6b5",
            "7d3382ac291b5d68",
            "8415c00b83f546c9",
            "0cb73c0373380d27"
        ],
        "uncaught": false,
        "x": 160,
        "y": 840,
        "wires": [
            [
                "a80e8adf40042251",
                "0dd6df953acaddba"
            ]
        ]
    },
    {
        "id": "a37c62cfcb685775",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 535,
        "y": 840,
        "wires": []
    },
    {
        "id": "a80e8adf40042251",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 880,
        "wires": []
    },
    {
        "id": "0dd6df953acaddba",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Error Handler",
        "func": "msg.payload = msg.error\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 840,
        "wires": [
            [
                "a37c62cfcb685775"
            ]
        ]
    },
    {
        "id": "aa793674e9df93dc",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "HTTP Requests",
        "info": "",
        "x": 500,
        "y": 780,
        "wires": []
    },
    {
        "id": "fccde3b1c6d74d57",
        "type": "comment",
        "z": "427808241d304283",
        "name": "From API",
        "info": "",
        "x": 80,
        "y": 320,
        "wires": []
    },
    {
        "id": "923891f5d3e27f13",
        "type": "link in",
        "z": "427808241d304283",
        "name": "Event Scheduler API Handler",
        "links": [
            "67b663c836889056",
            "b443ac417c7a70f1",
            "b54e559135e567a0",
            "cee32bbd8ec92569",
            "6a818fee00616bc3",
            "633a87515a706fae",
            "b2db8aadc49ccf98",
            "235bb75890be86ee"
        ],
        "x": 175,
        "y": 360,
        "wires": [
            [
                "266fa5850523710a"
            ]
        ]
    },
    {
        "id": "f283a18f727f7d39",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Websocket Connection",
        "info": "",
        "x": 140,
        "y": 280,
        "wires": []
    },
    {
        "id": "69dda5ef5e2c5df0",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event Scheduler API Response",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 835,
        "y": 620,
        "wires": []
    },
    {
        "id": "8f182a8917caaff6",
        "type": "function",
        "z": "427808241d304283",
        "name": "Update Event Data",
        "func": "const input_event = msg.payload\nconst events = flow.get('events')\nconst prev_event_values = JSON.parse(\n    JSON.stringify(events[input_event.type])\n)\n\nconst { light, sound, relax } = input_event\n\nif (light)\n    delete input_event.light\n\nif (sound)\n    delete input_event.sound\n\n\nif (relax)\n    delete input_event.relax\n\nevents[input_event.type] = {\n    ...events[input_event.type], ...input_event\n}\n\nif (light) {\n    const {\n        onpayload: light_on,\n        offpayload: light_off\n    } = prev_event_values.light\n\n    const onpayload = {\n        ...light_on, ...light.onpayload\n    }\n\n    const offpayload = {\n        ...light_off, ...light.offpayload\n    }\n\n    events[input_event.type].light = {\n        ...events[input_event.type].light, ...light,\n        onpayload, offpayload\n    }\n}\n\nif (sound) {\n    const {\n        onpayload: sound_on,\n        offpayload: sound_off\n    } = prev_event_values.sound\n\n    const onpayload = {\n        ...sound_on, ...sound.onpayload\n    }\n\n    const offpayload = {\n        ...sound_off, ...sound.offpayload\n    }\n\n    events[input_event.type].sound = {\n        ...events[input_event.type].sound, ...sound,\n        onpayload, offpayload\n    }\n}\n\nif (relax && prev_event_values.relax) {\n    const {\n        onpayload: relax_on,\n        offpayload: relax_off\n    } = prev_event_values.relax\n\n    const onpayload = {\n        ...relax_on, ...relax.onpayload\n    }\n\n    const offpayload = {\n        ...relax_off, ...relax.offpayload\n    }\n\n    events[input_event.type].relax = {\n        ...events[input_event.type].relax, ...relax,\n        onpayload, offpayload\n    }\n}\n\nmsg.payload = events[input_event.type]\n\nflow.set('events', events)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 600,
        "wires": [
            [
                "2247154c64c64885",
                "69dda5ef5e2c5df0",
                "225a7be097c947fb"
            ]
        ]
    },
    {
        "id": "266fa5850523710a",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Device Check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "sound",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 120,
        "y": 480,
        "wires": [
            [
                "40cc1ee4203c67b1"
            ],
            [
                "24fc08548f841a57"
            ],
            [
                "8f182a8917caaff6"
            ]
        ]
    },
    {
        "id": "24fc08548f841a57",
        "type": "function",
        "z": "427808241d304283",
        "name": "Object Filter (Light)",
        "func": "const { type } = msg.payload\nconst events = flow.get('events')\nconst prev_light_state = events[type].light\n\nconst input_event = msg.payload.light\nconst falsy = !input_event\nconst is_not_an_object = typeof input_event !== 'object'\nconst is_array = Array.isArray(input_event)\nconst is_a_function = typeof input_event === 'function'\n\nconst error_message = 'light property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n    \nconst light_state = {\n    ...prev_light_state, ...input_event\n}\n\nmsg.payload = {\n    ...events[type],\n    ...msg.payload,\n    light: light_state\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "9408d853948da010"
            ]
        ]
    },
    {
        "id": "35d0e3b966410d3e",
        "type": "catch",
        "z": "427808241d304283",
        "name": "Catch Bad Request",
        "scope": [
            "24fc08548f841a57",
            "7c464e60a7b77c6d",
            "bd047f2cf479b3c2",
            "4fb25b3066115638",
            "8b5b691f8fe11007",
            "40cc1ee4203c67b1"
        ],
        "uncaught": false,
        "x": 250,
        "y": 660,
        "wires": [
            [
                "5fc1de1f0371f99f"
            ]
        ]
    },
    {
        "id": "5fc1de1f0371f99f",
        "type": "function",
        "z": "427808241d304283",
        "name": "Bad Request Handler",
        "func": "msg.payload = msg.error\nmsg.statusCode = 400\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 660,
        "wires": [
            [
                "69dda5ef5e2c5df0"
            ]
        ]
    },
    {
        "id": "4b3a54eafc04740c",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "4eff4186dc07b337"
        ],
        "x": 835,
        "y": 400,
        "wires": []
    },
    {
        "id": "4eff4186dc07b337",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "4b3a54eafc04740c",
            "4d27fc0b004cba69",
            "4b40149d09f49823",
            "f6a636151c32c1e8",
            "85cf2265447a95b4",
            "ad950fbd2fb39211"
        ],
        "x": 175,
        "y": 600,
        "wires": [
            [
                "8f182a8917caaff6"
            ]
        ]
    },
    {
        "id": "40cc1ee4203c67b1",
        "type": "function",
        "z": "427808241d304283",
        "name": "Object Filter (Sound)",
        "func": "const { type } = msg.payload\nconst events = flow.get('events')\nconst prev_sound_state = events[type].sound\n\nconst input_event = msg.payload.sound\nconst falsy = !input_event\nconst is_not_an_object = typeof input_event !== 'object'\nconst is_array = Array.isArray(input_event)\nconst is_a_function = typeof input_event === 'function'\n\nconst error_message = 'sound property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n    \nconst sound_state = {\n    ...prev_sound_state, ...input_event\n}\n\nmsg.payload = {\n    ...events[type],\n    ...msg.payload,\n    sound: sound_state\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "565f95d10e299df3"
            ]
        ]
    },
    {
        "id": "565f95d10e299df3",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Sound Payload Check",
        "property": "payload.sound",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "onpayload",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "offpayload",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 600,
        "y": 360,
        "wires": [
            [
                "35b902818884c988"
            ],
            [
                "be115d4263a2a415"
            ],
            [
                "4b3a54eafc04740c"
            ]
        ]
    },
    {
        "id": "9408d853948da010",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Light Payload Check",
        "property": "payload.sound",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "onpayload",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "offpayload",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 600,
        "y": 480,
        "wires": [
            [
                "0b4f7021b35a3798"
            ],
            [
                "0e99f2228c6314a1"
            ],
            [
                "4d27fc0b004cba69"
            ]
        ]
    },
    {
        "id": "4d27fc0b004cba69",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "4eff4186dc07b337"
        ],
        "x": 835,
        "y": 520,
        "wires": []
    },
    {
        "id": "0e99f2228c6314a1",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "258da716120f9d91"
        ],
        "x": 835,
        "y": 480,
        "wires": []
    },
    {
        "id": "0b4f7021b35a3798",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "bf64bbf5d4bb8e58"
        ],
        "x": 835,
        "y": 440,
        "wires": []
    },
    {
        "id": "be115d4263a2a415",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "017d53701a7db32c",
            "258da716120f9d91"
        ],
        "x": 835,
        "y": 360,
        "wires": []
    },
    {
        "id": "35b902818884c988",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "35062676617241b8"
        ],
        "x": 835,
        "y": 320,
        "wires": []
    },
    {
        "id": "8b5b691f8fe11007",
        "type": "function",
        "z": "427808241d304283",
        "name": "Sound Object Filter (On Payload)",
        "func": "const { onpayload } = msg.payload.sound\nconst falsy = !onpayload\nconst is_not_an_object = typeof onpayload !== 'object'\nconst is_array = Array.isArray(onpayload)\nconst is_a_function = typeof onpayload === 'function'\n\nconst error_message = 'onpayload property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 800,
        "wires": [
            [
                "4b40149d09f49823"
            ]
        ]
    },
    {
        "id": "4fb25b3066115638",
        "type": "function",
        "z": "427808241d304283",
        "name": "Sound Object Filter (Off Payload)",
        "func": "const { offpayload } = msg.payload.sound\nconst falsy = !offpayload\nconst is_not_an_object = typeof offpayload !== 'object'\nconst is_array = Array.isArray(offpayload)\nconst is_a_function = typeof offpayload === 'function'\n\nconst error_message = 'offpayload property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 860,
        "wires": [
            [
                "4b40149d09f49823"
            ]
        ]
    },
    {
        "id": "35062676617241b8",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "35b902818884c988"
        ],
        "x": 295,
        "y": 800,
        "wires": [
            [
                "8b5b691f8fe11007"
            ]
        ]
    },
    {
        "id": "017d53701a7db32c",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "be115d4263a2a415"
        ],
        "x": 295,
        "y": 860,
        "wires": [
            [
                "4fb25b3066115638"
            ]
        ]
    },
    {
        "id": "4b40149d09f49823",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "4eff4186dc07b337"
        ],
        "x": 775,
        "y": 840,
        "wires": []
    },
    {
        "id": "7c464e60a7b77c6d",
        "type": "function",
        "z": "427808241d304283",
        "name": "Light Object Filter (On Payload)",
        "func": "const { onpayload } = msg.payload.light\nconst falsy = !onpayload\nconst is_not_an_object = typeof onpayload !== 'object'\nconst is_array = Array.isArray(onpayload)\nconst is_a_function = typeof onpayload === 'function'\n\nconst error_message = 'sound property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 740,
        "wires": [
            [
                "4b40149d09f49823"
            ]
        ]
    },
    {
        "id": "bd047f2cf479b3c2",
        "type": "function",
        "z": "427808241d304283",
        "name": "Light Object Filter (Off Payload)",
        "func": "const { offpayload } = msg.payload.light\nconst falsy = !offpayload\nconst is_not_an_object = typeof offpayload !== 'object'\nconst is_array = Array.isArray(offpayload)\nconst is_a_function = typeof offpayload === 'function'\n\nconst error_message = 'offpayload property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 920,
        "wires": [
            [
                "4b40149d09f49823"
            ]
        ]
    },
    {
        "id": "bf64bbf5d4bb8e58",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "0b4f7021b35a3798"
        ],
        "x": 295,
        "y": 740,
        "wires": [
            [
                "7c464e60a7b77c6d"
            ]
        ]
    },
    {
        "id": "258da716120f9d91",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "be115d4263a2a415",
            "0e99f2228c6314a1"
        ],
        "x": 295,
        "y": 920,
        "wires": [
            [
                "bd047f2cf479b3c2"
            ]
        ]
    },
    {
        "id": "2247154c64c64885",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "259fcaaf2b86aa30",
            "7e6510320bb380e9"
        ],
        "x": 835,
        "y": 580,
        "wires": []
    },
    {
        "id": "a4fc78ecb023e5f0",
        "type": "range",
        "z": "39c947163c4b72c5",
        "minin": "0",
        "maxin": "100",
        "minout": "-128",
        "maxout": "127",
        "action": "scale",
        "round": true,
        "property": "payload",
        "name": "Decimal Counter Range",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "a109824a8e28f80d"
            ]
        ]
    },
    {
        "id": "f23cdff951c7f4be",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2600,
        "wires": [
            [
                "938ce01b32a69ba3"
            ]
        ]
    },
    {
        "id": "9b5102480a019f85",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 2600,
        "wires": []
    },
    {
        "id": "938ce01b32a69ba3",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "msg.payload = \"Payload\"\n\nmsg.delay = 10000\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2600,
        "wires": [
            [
                "463433da6f3bb88d"
            ]
        ]
    },
    {
        "id": "463433da6f3bb88d",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 520,
        "y": 2600,
        "wires": [
            [
                "9b5102480a019f85"
            ]
        ]
    },
    {
        "id": "3f5a7c9574b1777d",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/event",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1020,
        "wires": [
            [
                "a4e0cf51c9a7d1eb"
            ]
        ]
    },
    {
        "id": "a4e0cf51c9a7d1eb",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Event Types Available",
        "func": "const events = flow.get('events')\n\nmsg.payload = events\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1020,
        "wires": [
            [
                "0b58e656f91710d1"
            ]
        ]
    },
    {
        "id": "0b58e656f91710d1",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 915,
        "y": 1020,
        "wires": []
    },
    {
        "id": "cf7c569ef36c9c38",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/audio/assets",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "b1c4643e4ab543a5"
            ]
        ]
    },
    {
        "id": "b1c4643e4ab543a5",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "c8535874aa1ff738"
        ],
        "x": 915,
        "y": 1180,
        "wires": []
    },
    {
        "id": "6b496501c7bdc4a5",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Get Light Info",
        "links": [
            "ae7bfc1a4f9a8204"
        ],
        "x": 155,
        "y": 1080,
        "wires": [
            [
                "b7ab22fbdb08d5f3"
            ]
        ]
    },
    {
        "id": "b7ab22fbdb08d5f3",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Get Lights Info",
        "func": "const lights = flow.get(msg.payload)\n\nmsg.payload = lights\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1080,
        "wires": [
            [
                "a3e05fe8f858f97a"
            ]
        ]
    },
    {
        "id": "a3e05fe8f858f97a",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 815,
        "y": 1080,
        "wires": []
    },
    {
        "id": "7db43ea1b7440e11",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/light/:type",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1300,
        "wires": [
            [
                "a9bcf9fb6e3210a5"
            ]
        ]
    },
    {
        "id": "ae7bfc1a4f9a8204",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "6b496501c7bdc4a5",
            "6f3c21450db0a2d2"
        ],
        "x": 915,
        "y": 1300,
        "wires": []
    },
    {
        "id": "a9bcf9fb6e3210a5",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Light Type Filter",
        "property": "req.params",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 1300,
        "wires": [
            [
                "6bcd5510f8049afa"
            ],
            [
                "383278fcb6f9293d"
            ]
        ]
    },
    {
        "id": "383278fcb6f9293d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Light Type Missing",
        "func": "const error = new Error('Type of Light is Required')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1360,
        "wires": []
    },
    {
        "id": "f10b7c0b25fa5429",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Light Type Available",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "lights.NIGHT_LIGHT",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "lights.WAKE_LIGHT",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 680,
        "y": 1300,
        "wires": [
            [
                "ae7bfc1a4f9a8204"
            ],
            [
                "ae7bfc1a4f9a8204"
            ],
            [
                "cb5e0ab8ee838002"
            ]
        ]
    },
    {
        "id": "6bcd5510f8049afa",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Extract Request",
        "func": "const { type } = msg.req.params\n\nmsg.payload = type.toUpperCase()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1240,
        "wires": [
            [
                "f10b7c0b25fa5429"
            ]
        ]
    },
    {
        "id": "cb5e0ab8ee838002",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Light Type Not Available",
        "func": "const error = new Error('Light Type Not Available')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9b4f7ae3da1a27c9",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/audio/:type",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1540,
        "wires": [
            [
                "a3f2fa267c10ee3b"
            ]
        ]
    },
    {
        "id": "a3f2fa267c10ee3b",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Audio Type Filter",
        "property": "req.params",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1540,
        "wires": [
            [
                "f11d1107faeded90"
            ],
            [
                "63ad3533d516eafd"
            ]
        ]
    },
    {
        "id": "f11d1107faeded90",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Extract Request",
        "func": "const { type } = msg.req.params\n\nmsg.payload = type.toUpperCase()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1480,
        "wires": [
            [
                "32458938ca244455"
            ]
        ]
    },
    {
        "id": "63ad3533d516eafd",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Audio Type Missing",
        "func": "const error = new Error('Type of Audio is Required')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1600,
        "wires": []
    },
    {
        "id": "32458938ca244455",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Audio Type Available",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "audio.NIGHT_SOUND",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "audio.WAKE_SOUND",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "audio.RELAXATION_SOUND",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 680,
        "y": 1540,
        "wires": [
            [
                "56dd34c5643d6bad"
            ],
            [
                "56dd34c5643d6bad"
            ],
            [
                "56dd34c5643d6bad"
            ],
            [
                "d008aa7be4643e85"
            ]
        ]
    },
    {
        "id": "d008aa7be4643e85",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Audio Type Not Available",
        "func": "const error = new Error('Light Type Not Available')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1600,
        "wires": []
    },
    {
        "id": "56dd34c5643d6bad",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "f8da963aa27f72a0"
        ],
        "x": 915,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f8da963aa27f72a0",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Audio Info",
        "links": [
            "56dd34c5643d6bad"
        ],
        "x": 135,
        "y": 1240,
        "wires": [
            [
                "8c6153c445bd98cc"
            ]
        ]
    },
    {
        "id": "8c6153c445bd98cc",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Audio Info",
        "func": "const audio = flow.get(msg.payload)\n\nmsg.payload = audio\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1240,
        "wires": [
            [
                "5d24fd8093ed5590"
            ]
        ]
    },
    {
        "id": "5d24fd8093ed5590",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 775,
        "y": 1240,
        "wires": []
    },
    {
        "id": "ab394d28430c4373",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "ec602bb422ae3058"
        ],
        "x": 35,
        "y": 240,
        "wires": [
            [
                "4a30702bd0fb1ff5"
            ]
        ]
    },
    {
        "id": "ec602bb422ae3058",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "ab394d28430c4373"
        ],
        "x": 775,
        "y": 40,
        "wires": []
    },
    {
        "id": "41a61f62fbed6478",
        "type": "file",
        "z": "024a5d7a17bad4d1",
        "name": "Delete Files",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 590,
        "y": 420,
        "wires": [
            [
                "62cc16813eb97c60"
            ]
        ]
    },
    {
        "id": "a109824a8e28f80d",
        "type": "i2c out",
        "z": "39c947163c4b72c5",
        "d": true,
        "name": "Set Brightness",
        "busno": "1",
        "address": "8",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "bf8972a4c8e61fac"
            ]
        ]
    },
    {
        "id": "bf8972a4c8e61fac",
        "type": "debug",
        "z": "39c947163c4b72c5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 160,
        "wires": []
    },
    {
        "id": "2ddd7a055c24b97c",
        "type": "range",
        "z": "39c947163c4b72c5",
        "minin": "0",
        "maxin": "100",
        "minout": "-128",
        "maxout": "127",
        "action": "scale",
        "round": true,
        "property": "payload",
        "name": "Decimal Counter Range",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "6f66933699df7ed1"
            ]
        ]
    },
    {
        "id": "6f66933699df7ed1",
        "type": "i2c out",
        "z": "39c947163c4b72c5",
        "d": true,
        "name": "Set Brightness",
        "busno": "1",
        "address": "8",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 540,
        "y": 300,
        "wires": [
            [
                "a0cee04ca414f9df"
            ]
        ]
    },
    {
        "id": "a0cee04ca414f9df",
        "type": "debug",
        "z": "39c947163c4b72c5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 300,
        "wires": []
    },
    {
        "id": "62cc16813eb97c60",
        "type": "debug",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 420,
        "wires": []
    },
    {
        "id": "b884a0bcf8b3c460",
        "type": "switch",
        "z": "024a5d7a17bad4d1",
        "name": "Select Config File",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "audio",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "event",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "system",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 130,
        "y": 420,
        "wires": [
            [
                "1e5f01e9ff9c8763"
            ],
            [
                "2c153397eab6f7d5"
            ],
            [
                "c20e72f93ac43086"
            ],
            [
                "735c3e08ceba186e"
            ]
        ]
    },
    {
        "id": "b390266dc39ac695",
        "type": "link in",
        "z": "024a5d7a17bad4d1",
        "name": "Delete Config",
        "links": [
            "8ef80688d076fcc6",
            "05207369abff9272",
            "2530b44353ebf7fe"
        ],
        "x": 195,
        "y": 360,
        "wires": [
            [
                "b884a0bcf8b3c460"
            ]
        ]
    },
    {
        "id": "1e5f01e9ff9c8763",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Audio Config",
        "func": "const { audio: audio_config } = global.get('defaults_config')\nconst { audio } = msg.payload\n\nmsg.payload = audio\nmsg.filename = audio_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "41a61f62fbed6478"
            ]
        ]
    },
    {
        "id": "2c153397eab6f7d5",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Light Config",
        "func": "const { light: light_config } = global.get('defaults_config')\nconst { light } = msg.payload\n\nmsg.payload = light\nmsg.filename = light_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "41a61f62fbed6478"
            ]
        ]
    },
    {
        "id": "c20e72f93ac43086",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Event Config",
        "func": "const { event: event_config } = global.get('defaults_config')\nconst { event } = msg.payload\n\nmsg.payload = event\nmsg.filename = event_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 440,
        "wires": [
            [
                "41a61f62fbed6478"
            ]
        ]
    },
    {
        "id": "735c3e08ceba186e",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract System Config",
        "func": "const { system: system_config } = global.get('defaults_config')\nconst { system } = msg.payload\n\nmsg.payload = system\nmsg.filename = system_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 480,
        "wires": [
            [
                "41a61f62fbed6478"
            ]
        ]
    },
    {
        "id": "f0117a826e39c42d",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [],
        "x": 35,
        "y": 2440,
        "wires": [
            [
                "90dc7313c9b7fda9"
            ]
        ]
    },
    {
        "id": "90dc7313c9b7fda9",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Delete Audio Config",
        "func": "msg.payload = {\n    audio: true\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 2440,
        "wires": [
            [
                "8ef80688d076fcc6"
            ]
        ]
    },
    {
        "id": "8ef80688d076fcc6",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "b390266dc39ac695"
        ],
        "x": 795,
        "y": 2440,
        "wires": []
    },
    {
        "id": "e45166c2aedc5276",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2520,
        "wires": [
            [
                "90dc7313c9b7fda9"
            ]
        ]
    },
    {
        "id": "4a30702bd0fb1ff5",
        "type": "function",
        "z": "427808241d304283",
        "name": "Initialize Loop Through Events",
        "func": "const events = msg.payload\n\nmsg.eventKeys = Object.keys(events)\nmsg.events = events\nmsg.counter = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 240,
        "wires": [
            [
                "cda544d27b234a78"
            ]
        ]
    },
    {
        "id": "cda544d27b234a78",
        "type": "function",
        "z": "427808241d304283",
        "name": "Loop Through Events",
        "func": "const { events, counter, eventKeys } = msg\nconst name = eventKeys[counter]\n\nmsg.payload = events[name]\n\nmsg.counter++\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "d2d5c90041067196"
            ]
        ]
    },
    {
        "id": "d2d5c90041067196",
        "type": "switch",
        "z": "427808241d304283",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "eventKeys.length",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 240,
        "wires": [
            [
                "cda544d27b234a78",
                "032d3dc953dde9d4"
            ]
        ]
    },
    {
        "id": "7e6510320bb380e9",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "2247154c64c64885"
        ],
        "x": 35,
        "y": 2480,
        "wires": [
            [
                "09c7fcb78b736f51"
            ]
        ]
    },
    {
        "id": "09c7fcb78b736f51",
        "type": "function",
        "z": "427808241d304283",
        "name": "Get Current Events Config",
        "func": "const events = flow.get('events')\n\nmsg.payload = events\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2480,
        "wires": [
            [
                "9120b3d4f63f106b"
            ]
        ]
    },
    {
        "id": "9120b3d4f63f106b",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "ec7beb856b75bc82"
        ],
        "x": 795,
        "y": 2480,
        "wires": []
    },
    {
        "id": "424fa69841bbfa13",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2540,
        "wires": [
            [
                "09c7fcb78b736f51"
            ]
        ]
    },
    {
        "id": "c19561f163653f84",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Storage",
        "info": "",
        "x": 70,
        "y": 2420,
        "wires": []
    },
    {
        "id": "032d3dc953dde9d4",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "259fcaaf2b86aa30"
        ],
        "x": 775,
        "y": 240,
        "wires": []
    },
    {
        "id": "058b35f4cef3e308",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [],
        "x": 35,
        "y": 2260,
        "wires": [
            [
                "1b77d92703d0e802"
            ]
        ]
    },
    {
        "id": "1b77d92703d0e802",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Delete Light Config",
        "func": "msg.payload = {\n    light: true\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2260,
        "wires": [
            [
                "05207369abff9272"
            ]
        ]
    },
    {
        "id": "05207369abff9272",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "b390266dc39ac695"
        ],
        "x": 795,
        "y": 2260,
        "wires": []
    },
    {
        "id": "8f6b1aa2cc928056",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2320,
        "wires": [
            [
                "1b77d92703d0e802"
            ]
        ]
    },
    {
        "id": "8f816e49884c7da3",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/light",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "4d7872e1529962ce"
            ]
        ]
    },
    {
        "id": "4d7872e1529962ce",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Light Types Available",
        "func": "const lights = flow.get('lights')\n\nmsg.payload = lights\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1060,
        "wires": [
            [
                "189ae71dc788c445"
            ]
        ]
    },
    {
        "id": "189ae71dc788c445",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 915,
        "y": 1060,
        "wires": []
    },
    {
        "id": "fa92ae51e4a2cf18",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/audio",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "5898b29b72a6cccd"
            ]
        ]
    },
    {
        "id": "5898b29b72a6cccd",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Audio Types Available",
        "func": "const audio = flow.get('audio')\n\nmsg.payload = audio\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1100,
        "wires": [
            [
                "6a68828c35240fc7"
            ]
        ]
    },
    {
        "id": "6a68828c35240fc7",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 915,
        "y": 1100,
        "wires": []
    },
    {
        "id": "38a86a3cf468f1e5",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "GET Requests",
        "info": "",
        "x": 120,
        "y": 960,
        "wires": []
    },
    {
        "id": "e6faefde1a85b6a3",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/event/:type",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1760,
        "wires": [
            [
                "beeae97391c08041"
            ]
        ]
    },
    {
        "id": "beeae97391c08041",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Event Type Filter",
        "property": "req.params",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1760,
        "wires": [
            [
                "bb81fcec96723838"
            ],
            [
                "59039d994bfbfb88"
            ]
        ]
    },
    {
        "id": "bb81fcec96723838",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Extract Request",
        "func": "const { type } = msg.req.params\n\nmsg.payload = type\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1700,
        "wires": [
            [
                "93650fa449eec81d"
            ]
        ]
    },
    {
        "id": "59039d994bfbfb88",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Event Type Missing",
        "func": "const error = new Error('Type of Event is Required')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1820,
        "wires": []
    },
    {
        "id": "93650fa449eec81d",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Event Type Available",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "events.bedtime",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.waketime",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.sunrise",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.sunset",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 680,
        "y": 1760,
        "wires": [
            [
                "63e068dd27d72c8f"
            ],
            [
                "63e068dd27d72c8f"
            ],
            [
                "63e068dd27d72c8f"
            ],
            [
                "63e068dd27d72c8f"
            ],
            [
                "0b982fb63adcdd9b"
            ]
        ]
    },
    {
        "id": "0b982fb63adcdd9b",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Event Type Not Available",
        "func": "const error = new Error('Event Type Not Available')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1840,
        "wires": []
    },
    {
        "id": "63e068dd27d72c8f",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "d562529942175c6a"
        ],
        "x": 915,
        "y": 1760,
        "wires": []
    },
    {
        "id": "32e440d05a769ebf",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [],
        "x": 35,
        "y": 2600,
        "wires": [
            [
                "2e91f4f9ee29b0e9"
            ]
        ]
    },
    {
        "id": "2e91f4f9ee29b0e9",
        "type": "function",
        "z": "427808241d304283",
        "name": "Delete Event Config",
        "func": "msg.payload = {\n    event: true\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 2600,
        "wires": [
            [
                "2530b44353ebf7fe"
            ]
        ]
    },
    {
        "id": "2530b44353ebf7fe",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "b390266dc39ac695"
        ],
        "x": 795,
        "y": 2600,
        "wires": []
    },
    {
        "id": "e524c1db97193426",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2660,
        "wires": [
            [
                "2e91f4f9ee29b0e9"
            ]
        ]
    },
    {
        "id": "d562529942175c6a",
        "type": "link in",
        "z": "427808241d304283",
        "name": "Get Event Info",
        "links": [
            "63e068dd27d72c8f"
        ],
        "x": 175,
        "y": 980,
        "wires": [
            [
                "d48724b18a384359"
            ]
        ]
    },
    {
        "id": "d48724b18a384359",
        "type": "function",
        "z": "427808241d304283",
        "name": "Get Event Info",
        "func": "const event = flow.get('events')\nconst type = msg.payload\n\nmsg.payload = event[type]\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 980,
        "wires": [
            [
                "289d6a9a7fd46d3a"
            ]
        ]
    },
    {
        "id": "289d6a9a7fd46d3a",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 915,
        "y": 980,
        "wires": []
    },
    {
        "id": "752d68319363df07",
        "type": "function",
        "z": "4b91f5d2f9b78292",
        "name": "Initialize Constants",
        "func": "const wifi_config_file = \"/etc/wpa_supplicant/wpa_supplicant.conf\"\n\nconst network_connection = {\n    wifi_config_file\n}\n\nflow.set(\"network\", network_connection)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "68a6869e3a525315",
        "type": "function",
        "z": "4b91f5d2f9b78292",
        "name": "FileName",
        "func": "const { network } = global.get('defaults_config')\n\nmsg.filename = network\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 100,
        "wires": [
            [
                "cb9a3e5304a1d7ba"
            ]
        ]
    },
    {
        "id": "cb9a3e5304a1d7ba",
        "type": "file in",
        "z": "4b91f5d2f9b78292",
        "name": "Retrieve Network Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 470,
        "y": 100,
        "wires": [
            [
                "42e8ae4f866afbdd"
            ]
        ]
    },
    {
        "id": "42e8ae4f866afbdd",
        "type": "json",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 650,
        "y": 100,
        "wires": [
            [
                "752d68319363df07"
            ]
        ]
    },
    {
        "id": "76f1d07c14dfd702",
        "type": "catch",
        "z": "4b91f5d2f9b78292",
        "name": "If Network Config Does Not Exist",
        "scope": [
            "cb9a3e5304a1d7ba"
        ],
        "uncaught": false,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "fb76024089593a91"
            ]
        ]
    },
    {
        "id": "fb76024089593a91",
        "type": "function",
        "z": "4b91f5d2f9b78292",
        "name": "Default Network Config",
        "func": "const { default_network_config } = global.get('defaults_config')\n\nmsg.payload = default_network_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "e4dc1dec57f06402"
            ]
        ]
    },
    {
        "id": "e4dc1dec57f06402",
        "type": "file",
        "z": "4b91f5d2f9b78292",
        "name": "Create Network Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 720,
        "y": 160,
        "wires": [
            [
                "752d68319363df07"
            ]
        ]
    },
    {
        "id": "b80ac291876f2806",
        "type": "comment",
        "z": "4b91f5d2f9b78292",
        "name": "Initialize Network",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "06969b016a3d71a1",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "fa879eca5a8c270f",
            "77bbaf1677e51e46"
        ],
        "x": 875,
        "y": 380,
        "wires": []
    },
    {
        "id": "ec9a880fb55d1e9a",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "26737f42c303c8ca",
            "77bbaf1677e51e46",
            "6f22fed9cdd7d387"
        ],
        "x": 875,
        "y": 340,
        "wires": []
    },
    {
        "id": "f304279097451e82",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "77bbaf1677e51e46",
            "c36c3b8450aaf67a"
        ],
        "x": 875,
        "y": 300,
        "wires": []
    },
    {
        "id": "62a71b748c924363",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Unhandled Message Type (WebSocket)",
        "func": "const error = new Error(\"Message type cannot be resolved\")\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 540,
        "wires": []
    },
    {
        "id": "090c9e6944510eb7",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "scope": [
            "62a71b748c924363"
        ],
        "uncaught": false,
        "x": 230,
        "y": 660,
        "wires": [
            [
                "1f4b4e7a860167d1"
            ]
        ]
    },
    {
        "id": "77bbaf1677e51e46",
        "type": "link in",
        "z": "f6f2187d.f17ca8",
        "name": "Websocket Response",
        "links": [
            "06969b016a3d71a1",
            "ec9a880fb55d1e9a",
            "f304279097451e82",
            "fad7b7c9b1470e56",
            "f8873863294f0ab5",
            "3caa6874f26c328b",
            "81d542eb869585b4"
        ],
        "x": 195,
        "y": 620,
        "wires": [
            [
                "62e6a71c4cb08a51"
            ]
        ]
    },
    {
        "id": "1f4b4e7a860167d1",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Error Handler",
        "func": "msg.payload = msg.error\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "62e6a71c4cb08a51"
            ]
        ]
    },
    {
        "id": "05f15fa5a2336281",
        "type": "comment",
        "z": "4fcd3dd2df70f0c8",
        "name": "Audio Device",
        "info": "",
        "x": 90,
        "y": 600,
        "wires": []
    },
    {
        "id": "ba977366cee206cd",
        "type": "link in",
        "z": "4fcd3dd2df70f0c8",
        "name": "Get Audio Device",
        "links": [
            "9bd942c9ca7183b9"
        ],
        "x": 195,
        "y": 660,
        "wires": [
            [
                "a23245de2a284da7"
            ]
        ]
    },
    {
        "id": "a23245de2a284da7",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "Get Audio Device",
        "func": "const { audio_device } = flow.get(\"system_config\")\n\nmsg.payload = audio_device\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 660,
        "wires": [
            [
                "144fd0dfecaeedea"
            ]
        ]
    },
    {
        "id": "144fd0dfecaeedea",
        "type": "link out",
        "z": "4fcd3dd2df70f0c8",
        "name": "Get Audio Device",
        "links": [
            "a6c0468332682feb"
        ],
        "x": 675,
        "y": 660,
        "wires": []
    },
    {
        "id": "dfa329d105070a15",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Relaxation Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 390,
        "y": 1680,
        "wires": [
            [
                "e29d3427ec408f9b"
            ]
        ]
    },
    {
        "id": "d5c0dc70e15eb19a",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Night Sound)",
        "links": [],
        "x": 675,
        "y": 1680,
        "wires": []
    },
    {
        "id": "97cd3c5c68c5d1e4",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "28c3772888cfc7fa"
        ],
        "x": 35,
        "y": 1680,
        "wires": [
            [
                "2905c3e3efbafc0f"
            ]
        ]
    },
    {
        "id": "28c3772888cfc7fa",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "ded93f1e4f9964fb",
            "97cd3c5c68c5d1e4"
        ],
        "x": 915,
        "y": 1120,
        "wires": []
    },
    {
        "id": "91b303d2fbc264d0",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "Initialize Audio Controls",
        "links": [
            "fc9d2e059609396f",
            "1a5068f4b0cae0d9"
        ],
        "x": 155,
        "y": 540,
        "wires": [
            [
                "cbe31ffaf8de222e",
                "d3264f41d369e4f8"
            ]
        ]
    },
    {
        "id": "3acd7c62fac91c04",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Initialize Light Controls",
        "links": [
            "3db23191674cf3b4",
            "1a5068f4b0cae0d9"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "6c3ef41b9b35c8fd"
            ]
        ]
    },
    {
        "id": "c0a5fa6f73429b5c",
        "type": "link in",
        "z": "427808241d304283",
        "name": "Initialize Event Scheduler",
        "links": [
            "1a5068f4b0cae0d9"
        ],
        "x": 135,
        "y": 80,
        "wires": [
            [
                "db18fd732dfa43d7"
            ]
        ]
    },
    {
        "id": "d62a3bc48c8f248f",
        "type": "link in",
        "z": "4fcd3dd2df70f0c8",
        "name": "Initialize System Controls",
        "links": [
            "176706c3efb8ce21",
            "1a5068f4b0cae0d9"
        ],
        "x": 135,
        "y": 80,
        "wires": [
            [
                "9a692eb9368947d8"
            ]
        ]
    },
    {
        "id": "5799ebdeefceb248",
        "type": "link in",
        "z": "4b91f5d2f9b78292",
        "name": "Initialize Network",
        "links": [
            "2321c07923154b43",
            "1a5068f4b0cae0d9"
        ],
        "x": 155,
        "y": 100,
        "wires": [
            [
                "68a6869e3a525315"
            ]
        ]
    },
    {
        "id": "1a5068f4b0cae0d9",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "3acd7c62fac91c04",
            "5799ebdeefceb248",
            "91b303d2fbc264d0",
            "adec83fd96f5a557",
            "c0a5fa6f73429b5c",
            "d62a3bc48c8f248f",
            "13deef710be29b8a"
        ],
        "x": 255,
        "y": 200,
        "wires": []
    },
    {
        "id": "a290ad0f6db3c861",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 490,
        "y": 3200,
        "wires": [
            [
                "1ed804c5243415bc"
            ]
        ]
    },
    {
        "id": "49e61a0ca9af26e8",
        "type": "function",
        "z": "427808241d304283",
        "name": "",
        "func": "const ontime = \"18:00\"\nconst offtime = \"18:00\"\n\nconst payload = {\n    \"onoffset\": 0,\n    \"offoffset\": 60,\n    \"onpayload\": JSON.stringify({\n        \"light\": \"NIGHT_LIGHT\",\n        \"max_brightness\": 100,\n        \"state\": \"FADE_ON\",\n        \"tick\": 100\n    }),\n    \n    \"offpayload\":JSON.stringify({\n        \"light\": \"NIGHT_LIGHT\",\n        \"max_brightness\": 100,\n        \"state\": \"FADE_OFF\",\n        \"tick\": 100\n        \n    }),\n    \n    \"days_selected\":{\n        \"mon\":true,\n        \"tue\":true,\n        \"wed\":true,\n        \"thu\":true,\n        \"fri\":true,\n        \"sat\":true,\n        \"sun\":true\n        \n    },\n    \n    ontime,\n    offtime\n}\n\nmsg.payload = payload\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3200,
        "wires": [
            [
                "a290ad0f6db3c861"
            ]
        ]
    },
    {
        "id": "1e40356c6e46ce4f",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 3200,
        "wires": []
    },
    {
        "id": "4f88077efc70fb2c",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 3200,
        "wires": [
            [
                "49e61a0ca9af26e8"
            ]
        ]
    },
    {
        "id": "1ed804c5243415bc",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 650,
        "y": 3200,
        "wires": [
            [
                "1e40356c6e46ce4f"
            ]
        ]
    },
    {
        "id": "bccde6824b1b731e",
        "type": "function",
        "z": "427808241d304283",
        "name": "Preprocess Payloads",
        "func": "const { light, sound, relax } = msg.payload\n\nif(light) {\n    light.onpayload = light.onpayload\n    light.offpayload = light.offpayload\n}\n    \nif(sound) {\n    sound.onpayload = sound.onpayload\n    sound.offpayload = sound.offpayload\n}\n\nif(relax) {\n    relax.onpayload = relax.onpayload\n    relax.offpayload = relax.offpayload\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1180,
        "wires": [
            [
                "d07a1b83f9c64ac9"
            ]
        ]
    },
    {
        "id": "dfdda317a7a634f3",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 550,
        "y": 1500,
        "wires": [
            [
                "6d92577b0a9c447d"
            ]
        ]
    },
    {
        "id": "41260011c40c4717",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 550,
        "y": 1580,
        "wires": [
            [
                "c34ed1fab46fbda8"
            ]
        ]
    },
    {
        "id": "e29d3427ec408f9b",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 1680,
        "wires": [
            [
                "d5c0dc70e15eb19a"
            ]
        ]
    },
    {
        "id": "908ded6f7a51aa55",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 1840,
        "wires": [
            [
                "fe19b0d6879b5403"
            ]
        ]
    },
    {
        "id": "cf92539e199f740a",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 1920,
        "wires": [
            [
                "fe30fcaa2bea0d31"
            ]
        ]
    },
    {
        "id": "675006c59b31ac8a",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 2060,
        "wires": [
            [
                "144b0ce6de73da81"
            ]
        ]
    },
    {
        "id": "5c3303e1b8e4eee5",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 2140,
        "wires": [
            [
                "fd3d2a96f7af15a2"
            ]
        ]
    },
    {
        "id": "8d6a6515a8088da1",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 2280,
        "wires": [
            [
                "07e37e563f84c4ef"
            ]
        ]
    },
    {
        "id": "14d9240831b80573",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 2360,
        "wires": [
            [
                "2bfd2be2228a7d7f"
            ]
        ]
    },
    {
        "id": "7d8f844d95a0a057",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Extract Volume",
        "func": "const { volume, audio } = msg.payload\nconst audio_state = flow.get(audio)\n\nmsg.payload = volume\n\nflow.set(audio, {\n    ...audio_state, volume\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1740,
        "wires": [
            [
                "8d54343c273a8128",
                "f76419f21e496097"
            ]
        ]
    },
    {
        "id": "f34df232378c9c0c",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "From Event Scheduler",
        "info": "",
        "x": 120,
        "y": 1480,
        "wires": []
    },
    {
        "id": "1c851b130bcdd7b8",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [],
        "x": 135,
        "y": 1540,
        "wires": [
            [
                "1bcae0d3b28c7498"
            ]
        ]
    },
    {
        "id": "1bcae0d3b28c7498",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Trigger Audio Player",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1540,
        "wires": [
            [
                "62f7fa9610e77462"
            ]
        ]
    },
    {
        "id": "62f7fa9610e77462",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "dcc3e4b965949c44",
            "1b563d9b71af7068"
        ],
        "x": 775,
        "y": 1540,
        "wires": []
    },
    {
        "id": "3bf4ebc6242428fd",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 480,
        "wires": []
    },
    {
        "id": "5e3cc9fc7ada368a",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 2360,
        "wires": [
            [
                "ec600430246adfbc"
            ]
        ]
    },
    {
        "id": "c3a64d8207260a6e",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 2280,
        "wires": [
            [
                "97423e057c4b1573"
            ]
        ]
    },
    {
        "id": "81edaddf3e9d531b",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 2140,
        "wires": [
            [
                "91e434e46084f453"
            ]
        ]
    },
    {
        "id": "e05e972893b302e7",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 2060,
        "wires": [
            [
                "a57d1afa4409fe65"
            ]
        ]
    },
    {
        "id": "73870de815788819",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1920,
        "wires": [
            [
                "a0305c97741e49da"
            ]
        ]
    },
    {
        "id": "07bb8b4e4f5bcd11",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1840,
        "wires": [
            [
                "2663df0f99463eb3"
            ]
        ]
    },
    {
        "id": "2905c3e3efbafc0f",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1680,
        "wires": [
            [
                "dfa329d105070a15"
            ]
        ]
    },
    {
        "id": "b2bd9aa7291da2c0",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1580,
        "wires": [
            [
                "f520c999092bcc9d"
            ]
        ]
    },
    {
        "id": "4e5b6a6d74a43c95",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1500,
        "wires": [
            [
                "ce1ae75d01b821fa"
            ]
        ]
    },
    {
        "id": "98d197ac04d7bf24",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 3280,
        "wires": []
    },
    {
        "id": "ea23b455ceaf1171",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "8098e8d9ba9a2b0b",
        "type": "function",
        "z": "427808241d304283",
        "name": "",
        "func": "const events = JSON.parse(JSON.stringify(flow.get('events')))\nconst { type } = msg.payload\nconst { time, light, sound, relax }  = events[type]\n\nmsg.payload \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3280,
        "wires": [
            []
        ]
    },
    {
        "id": "5786d2705a098257",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 90,
        "y": 3140,
        "wires": [
            [
                "700a77bd533c7032"
            ]
        ]
    },
    {
        "id": "8cafd4602aeb9b91",
        "type": "PlaySound",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio Player",
        "playerOptions": "{ \"player\": \"mpg123\" }",
        "audioURI": "",
        "options": "{}",
        "x": 450,
        "y": 3140,
        "wires": [
            [
                "2d418fbe39d25536"
            ]
        ]
    },
    {
        "id": "2d418fbe39d25536",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 3140,
        "wires": []
    },
    {
        "id": "f983d66e0cab709e",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "stop",
        "payloadType": "str",
        "x": 90,
        "y": 3200,
        "wires": [
            [
                "700a77bd533c7032"
            ]
        ]
    },
    {
        "id": "a4ffe60460f2a9f5",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "resume",
        "payloadType": "str",
        "x": 90,
        "y": 3260,
        "wires": [
            [
                "700a77bd533c7032"
            ]
        ]
    },
    {
        "id": "13edf7508ff9dc67",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "pause",
        "payloadType": "str",
        "x": 90,
        "y": 3320,
        "wires": [
            [
                "700a77bd533c7032"
            ]
        ]
    },
    {
        "id": "700a77bd533c7032",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "func": "\n// msg.audioURI = \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Wake%20Sounds%2FBirds%20Chirping%2015%20Min.mp3?alt=media&token=eb142ad5-be14-46ac-944d-9f26e6017d8c\"\nmsg.audioURI = \"/data/projects/REST_NODE/assets/Wake Sounds/Birds Chirping 15 Min.mp3\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 3140,
        "wires": [
            [
                "8cafd4602aeb9b91"
            ]
        ]
    },
    {
        "id": "cc9d5bf3bf470290",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Testing Section",
        "info": "",
        "x": 100,
        "y": 3080,
        "wires": []
    },
    {
        "id": "c9c5a8c5491e0541",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "Store Audio Files Metadata",
        "links": [
            "3a10e179ce9fa218",
            "6d07b905709d8469"
        ],
        "x": 135,
        "y": 740,
        "wires": [
            [
                "5359a8f29ecf4f30"
            ]
        ]
    },
    {
        "id": "5359a8f29ecf4f30",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Store Audio Metadata",
        "func": "const audio_files = msg.payload\n\nflow.set('audio_files', audio_files)\n\nmsg.payload = {\n    message: \"Audio files metadata were stored\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 740,
        "wires": [
            [
                "fd065ae767b74615"
            ]
        ]
    },
    {
        "id": "fd065ae767b74615",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 935,
        "y": 740,
        "wires": []
    },
    {
        "id": "f2fac2e5b78c46b3",
        "type": "exec",
        "z": "56ae43efe9a5b4d3",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get Available Assets Dir",
        "x": 530,
        "y": 3420,
        "wires": [
            [
                "c73026e2a7474f78"
            ],
            [],
            []
        ]
    },
    {
        "id": "7c5ca2aa4103ee8c",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Assets Folder",
        "func": "const { assets_dir } = global.get('defaults_config')\nconst list_all_dirs = ['cd', assets_dir, '&&', 'ls']\n\nmsg.payload = list_all_dirs.join(' ')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3420,
        "wires": [
            [
                "f2fac2e5b78c46b3"
            ]
        ]
    },
    {
        "id": "c73026e2a7474f78",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "List All Available Dirs ",
        "func": "const { assets_dir } = global.get('defaults_config')\nconst dirs_list = msg.payload.split('\\n').filter( dir => dir )\nconst dirs = {}\n\ndirs_list.forEach((dir) => {\n    dirs[dir] = `${ assets_dir }/${dir}`\n})\n\nmsg.payload = dirs\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 3420,
        "wires": [
            [
                "2fc0d9c905e68783"
            ]
        ]
    },
    {
        "id": "2fc0d9c905e68783",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "96a98c49ec5f592e"
        ],
        "x": 915,
        "y": 3420,
        "wires": []
    },
    {
        "id": "96a98c49ec5f592e",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "2fc0d9c905e68783"
        ],
        "x": 55,
        "y": 3540,
        "wires": [
            [
                "62c5c61de81dc05f"
            ]
        ]
    },
    {
        "id": "4c9e7337cd75daee",
        "type": "exec",
        "z": "56ae43efe9a5b4d3",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get Audio Files",
        "x": 600,
        "y": 3540,
        "wires": [
            [
                "403f07b7d0544159"
            ],
            [],
            []
        ]
    },
    {
        "id": "62c5c61de81dc05f",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Initialize Get",
        "func": "const dirs_list = msg.payload\n\nmsg.dirs = dirs_list \nmsg.counter = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 3540,
        "wires": [
            [
                "97c6f4e7cec98e3d"
            ]
        ]
    },
    {
        "id": "97c6f4e7cec98e3d",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Audio Files Command",
        "func": "const dirs_list = msg.dirs\nconst keys = Object.keys(dirs_list)\n\nif(!keys[msg.counter])\n    return null\n\nconst path = dirs_list[ keys[msg.counter] ]\nconst command = `cd '${path}' && ls`\n\nmsg.payload = command\n\nmsg.counter++\nmsg.keys_length = keys.length\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 3540,
        "wires": [
            [
                "4c9e7337cd75daee"
            ]
        ]
    },
    {
        "id": "403f07b7d0544159",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "Continue or End Loop",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "keys_length",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 800,
        "y": 3540,
        "wires": [
            [
                "97c6f4e7cec98e3d",
                "bb84be7b185de541"
            ]
        ]
    },
    {
        "id": "1e7f948bea0d4318",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Store Audio Assets",
        "func": "const { dirs, counter } = msg\nconst previous_assets = flow.get('audio_assets') || {}\nconst keys = Object.keys(dirs)\nconst audio_assets = msg.payload\n\nconst current_audio_assets = {\n    ...previous_assets, [ keys[counter - 1] ]: audio_assets\n}\n\nflow.set('audio_assets', current_audio_assets)\n\nmsg.payload = current_audio_assets\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3600,
        "wires": [
            [
                "5192ecce926e940d"
            ]
        ]
    },
    {
        "id": "31d7717a39009682",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "List All Available Audio",
        "func": "const { assets_dir } = global.get('defaults_config')\nconst { counter, dirs } = msg\nconst keys = Object.keys(dirs)\nconst audio_list = msg.payload.split('\\n').filter( audio => audio )\nconst audio_files = {}\n\naudio_list.forEach((audio) => {\n    audio_files[audio] = `${ assets_dir }/${ keys[counter - 1] }/${ audio }`\n})\n\nmsg.payload = audio_files\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 3600,
        "wires": [
            [
                "1e7f948bea0d4318"
            ]
        ]
    },
    {
        "id": "bb84be7b185de541",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "392fbd89372faedd"
        ],
        "x": 955,
        "y": 3540,
        "wires": []
    },
    {
        "id": "392fbd89372faedd",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "bb84be7b185de541"
        ],
        "x": 55,
        "y": 3600,
        "wires": [
            [
                "31d7717a39009682"
            ]
        ]
    },
    {
        "id": "6d1ad8d437a846ce",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [],
        "x": 875,
        "y": 420,
        "wires": []
    },
    {
        "id": "adec83fd96f5a557",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Available Audio Assets",
        "links": [
            "1a5068f4b0cae0d9",
            "8748145c4cb2446d",
            "1c0dec3596439438"
        ],
        "x": 155,
        "y": 3420,
        "wires": [
            [
                "7c5ca2aa4103ee8c"
            ]
        ]
    },
    {
        "id": "7e259f198b640b75",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/audio/files/download",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1980,
        "wires": [
            [
                "ba2fae25347c8e12",
                "58c40b1ab331dc78"
            ]
        ]
    },
    {
        "id": "6978521709f87b2f",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Check Full Path Property",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "fullPath",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 2020,
        "wires": [
            [
                "b7f321e5e4dbee08"
            ],
            [
                "8415c00b83f546c9"
            ]
        ]
    },
    {
        "id": "8415c00b83f546c9",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Missing Full Path Property",
        "func": "const error = new Error('Audio File \"fullPath\" Not Specified')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2040,
        "wires": []
    },
    {
        "id": "b7f321e5e4dbee08",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "db8ac9d402cea0bf",
            "f606d9d82e886790"
        ],
        "x": 695,
        "y": 2000,
        "wires": []
    },
    {
        "id": "255ee5eb667519ce",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 3460,
        "wires": [
            [
                "7c5ca2aa4103ee8c"
            ]
        ]
    },
    {
        "id": "ba2fae25347c8e12",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 130,
        "y": 2020,
        "wires": [
            [
                "6978521709f87b2f",
                "2b9a7af9b5f12bc7"
            ]
        ]
    },
    {
        "id": "225a7be097c947fb",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 540,
        "wires": []
    },
    {
        "id": "5192ecce926e940d",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "c8535874aa1ff738"
        ],
        "x": 955,
        "y": 3600,
        "wires": []
    },
    {
        "id": "900b291d7708de39",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "If HTTP Response",
        "property": "req",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1160,
        "wires": [
            [
                "5b84f8efca57f859"
            ],
            [
                "cdbf4cbbf8ed6cb9"
            ]
        ]
    },
    {
        "id": "3caa6874f26c328b",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "77bbaf1677e51e46"
        ],
        "x": 775,
        "y": 1180,
        "wires": []
    },
    {
        "id": "cdbf4cbbf8ed6cb9",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Transform Payload",
        "func": "const { AUDIO_ASSETS_AVAILABLE } = flow.get('audio_download_response_topics')\nconst { AUDIO_DOWNLOAD_RESPONSE } = flow.get('api_response_types')\n\nmsg.payload = {\n    data: msg.payload,\n    topic: AUDIO_ASSETS_AVAILABLE,\n    type: AUDIO_DOWNLOAD_RESPONSE\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1180,
        "wires": [
            [
                "3caa6874f26c328b"
            ]
        ]
    },
    {
        "id": "2f0b4220adbffe5e",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Playback Audio Test",
        "func": "const audio_assets = flow.get('audio_assets')\nconst { fullPath, volume, state, sound } = msg.payload\n\nconst [dir, file] = fullPath.split('/')\n\nconst audio_file = audio_assets[dir][file]\n\nconst audio_metadata = {\n    audio_file,\n    volume,\n    state,\n    sound\n}\n\nmsg.payload = audio_metadata\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1300,
        "wires": [
            [
                "d7ef97d404ef0517"
            ]
        ]
    },
    {
        "id": "6f22fed9cdd7d387",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio Player Playback",
        "links": [
            "ec9a880fb55d1e9a"
        ],
        "x": 135,
        "y": 1300,
        "wires": [
            [
                "2f0b4220adbffe5e"
            ]
        ]
    },
    {
        "id": "d7ef97d404ef0517",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "eb03aab7783e6ec6"
        ],
        "x": 775,
        "y": 1300,
        "wires": []
    },
    {
        "id": "eb03aab7783e6ec6",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "d7ef97d404ef0517"
        ],
        "x": 35,
        "y": 1900,
        "wires": [
            [
                "b47fadcb378c2227",
                "16e1e28a541ea48b"
            ]
        ]
    },
    {
        "id": "429c3e584d741927",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Wake Sound (Test)",
        "func": "const { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio') \nconst audio_assets = flow.get('audio_assets')\n\nconst dir = 'Wake Sounds'\nconst file = 'Birds Chirping 15 Min.mp3'\n\nmsg.payload = {\n    audio_file: audio_assets[dir][file],\n    audio: WAKE_SOUND,\n    volume: 100\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "aec5625bda89fe50"
            ]
        ]
    },
    {
        "id": "a6d2faa14488e31b",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Test API Call for Audio Controls",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "429c3e584d741927"
            ]
        ]
    },
    {
        "id": "aec5625bda89fe50",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "52eb4e7a40d8147b"
        ],
        "x": 855,
        "y": 180,
        "wires": []
    },
    {
        "id": "95116cd611353c51",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Audio Device for Volume Adjustment",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "67da42b1f34cfa3f"
            ]
        ]
    },
    {
        "id": "67da42b1f34cfa3f",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Store Audio Device to Context",
        "func": "const audio_device = 'Headphone'\n\nflow.set('audio_device', audio_device)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 80,
        "wires": []
    },
    {
        "id": "fa90b04b34d6ff36",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Download Media File",
        "props": [
            {
                "p": "payload.fullPath",
                "v": "Wake Sounds/Birds Chirping 15 Min.mp3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "5b626b4ae0e51128"
            ]
        ]
    },
    {
        "id": "5b626b4ae0e51128",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "db8ac9d402cea0bf",
            "f606d9d82e886790"
        ],
        "x": 415,
        "y": 140,
        "wires": []
    },
    {
        "id": "b6bf4cbaa6b668c5",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Startup(Test)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 210,
        "y": 1420,
        "wires": [
            [
                "719fed9094ca1153"
            ]
        ]
    },
    {
        "id": "719fed9094ca1153",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Audio Files",
        "func": "const audio_files = {\n  \"Wake Sounds\": {\n    \"Birds Chirping 15 Min.mp3\": {\n      \"name\": \"Birds Chirping 15 Min.mp3\",\n      \"fullPath\": \"Wake Sounds/Birds Chirping 15 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Wake%20Sounds%2FBirds%20Chirping%2015%20Min.mp3?alt=media&token=eb142ad5-be14-46ac-944d-9f26e6017d8c\"\n    },\n    \"Deep Waking Meditation 24 Min.mp3\": {\n      \"name\": \"Deep Waking Meditation 24 Min.mp3\",\n      \"fullPath\": \"Wake Sounds/Deep Waking Meditation 24 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Wake%20Sounds%2FDeep%20Waking%20Meditation%2024%20Min.mp3?alt=media&token=ce873c11-aa1b-4d70-b4ea-e34853deb425\"\n    },\n    \"Monk Om 16 Min.mp3\": {\n      \"name\": \"Monk Om 16 Min.mp3\",\n      \"fullPath\": \"Wake Sounds/Monk Om 16 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Wake%20Sounds%2FMonk%20Om%2016%20Min.mp3?alt=media&token=9acff77d-3005-4b65-b999-4ced74fdacef\"\n    },\n    \"Morning Flute 17 Min.mp3\": {\n      \"name\": \"Morning Flute 17 Min.mp3\",\n      \"fullPath\": \"Wake Sounds/Morning Flute 17 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Wake%20Sounds%2FMorning%20Flute%2017%20Min.mp3?alt=media&token=2de3dbff-d01c-4a68-91e0-3b24daecfc7c\"\n    },\n    \"Spiritual Awakening 13 Min.mp3\": {\n      \"name\": \"Spiritual Awakening 13 Min.mp3\",\n      \"fullPath\": \"Wake Sounds/Spiritual Awakening 13 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Wake%20Sounds%2FSpiritual%20Awakening%2013%20Min.mp3?alt=media&token=50531348-f290-4c22-b2a1-d4807c730c9d\"\n    },\n    \"Stream Birds 15 Minutes.mp3\": {\n      \"name\": \"Stream Birds 15 Minutes.mp3\",\n      \"fullPath\": \"Wake Sounds/Stream Birds 15 Minutes.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Wake%20Sounds%2FStream%20Birds%2015%20Minutes.mp3?alt=media&token=64b5773b-7e90-404b-850c-e3cb0500bba8\"\n    }\n  },\n  \"Night Sounds\": {\n    \"Convergence by S.Duncan 12 Hours.mp3\": {\n      \"name\": \"Convergence by S.Duncan 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Convergence by S.Duncan 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FConvergence%20by%20S.Duncan%2012%20Hours.mp3?alt=media&token=64c75d84-c9ab-4547-b591-b7ff5789f027\"\n    },\n    \"Deep Serenity by S.Duncan 12 Hours.mp3\": {\n      \"name\": \"Deep Serenity by S.Duncan 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Deep Serenity by S.Duncan 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FDeep%20Serenity%20by%20S.Duncan%2012%20Hours.mp3?alt=media&token=5172f589-e493-4cec-bf65-574f51f47c4a\"\n    },\n    \"Nocturnal Crossings by S.Duncan 12 Hour.mp3\": {\n      \"name\": \"Nocturnal Crossings by S.Duncan 12 Hour.mp3\",\n      \"fullPath\": \"Night Sounds/Nocturnal Crossings by S.Duncan 12 Hour.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FNocturnal%20Crossings%20by%20S.Duncan%2012%20Hour.mp3?alt=media&token=3ce8dbf1-49d8-4aa6-a941-7fb6070121f5\"\n    },\n    \"Ocean Waves (Big) 12 Hours.mp3\": {\n      \"name\": \"Ocean Waves (Big) 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Ocean Waves (Big) 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FOcean%20Waves%20(Big)%2012%20Hours.mp3?alt=media&token=9a0abc39-f49b-424c-ab2d-8a6cad963bfa\"\n    },\n    \"Ponderings by S.Duncan 12 Hours.mp3\": {\n      \"name\": \"Ponderings by S.Duncan 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Ponderings by S.Duncan 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FPonderings%20by%20S.Duncan%2012%20Hours.mp3?alt=media&token=581b084c-a0c6-48e5-a2dc-d3468eb1ca07\"\n    },\n    \"Rain (Heavy) 12 Hours.mp3\": {\n      \"name\": \"Rain (Heavy) 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Rain (Heavy) 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FRain%20(Heavy)%2012%20Hours.mp3?alt=media&token=b929d753-b718-473b-bce0-23afbe77faaf\"\n    },\n    \"Rain (Light) 12 Hours.mp3\": {\n      \"name\": \"Rain (Light) 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Rain (Light) 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FRain%20(Light)%2012%20Hours.mp3?alt=media&token=5db61336-e77d-40af-9704-c2a0e540c4d2\"\n    },\n    \"Refresh by S.Duncan 12 Hours.mp3\": {\n      \"name\": \"Refresh by S.Duncan 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Refresh by S.Duncan 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FRefresh%20by%20S.Duncan%2012%20Hours.mp3?alt=media&token=0866c16e-825c-4c9d-b98f-7743e6a0bbd3\"\n    },\n    \"Train Tracks 12 Hours.mp3\": {\n      \"name\": \"Train Tracks 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Train Tracks 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FTrain%20Tracks%2012%20Hours.mp3?alt=media&token=d27e748e-f61a-452a-95a0-02f243f47dbd\"\n    },\n    \"Tranquil Calm 12 Hours.mp3\": {\n      \"name\": \"Tranquil Calm 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/Tranquil Calm 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FTranquil%20Calm%2012%20Hours.mp3?alt=media&token=8ed03101-7d61-4b15-9d39-8bd51bd82c98\"\n    },\n    \"White Noise 12 Hours.mp3\": {\n      \"name\": \"White Noise 12 Hours.mp3\",\n      \"fullPath\": \"Night Sounds/White Noise 12 Hours.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Night%20Sounds%2FWhite%20Noise%2012%20Hours.mp3?alt=media&token=477f8a32-a504-4a44-862c-c184d422f6e8\"\n    }\n  },\n  \"Relaxation Sounds\": {\n    \"Alternate Nose Breathing 4 Min.mp3\": {\n      \"name\": \"Alternate Nose Breathing 4 Min.mp3\",\n      \"fullPath\": \"Relaxation Sounds/Alternate Nose Breathing 4 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Relaxation%20Sounds%2FAlternate%20Nose%20Breathing%204%20Min.mp3?alt=media&token=b3ca3080-fabb-4e66-82b0-0638ba84a639\"\n    },\n    \"Box Breathing 3 Min.mp3\": {\n      \"name\": \"Box Breathing 3 Min.mp3\",\n      \"fullPath\": \"Relaxation Sounds/Box Breathing 3 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Relaxation%20Sounds%2FBox%20Breathing%203%20Min.mp3?alt=media&token=7fe86e09-825e-4bae-bd2f-8a721c053883\"\n    },\n    \"Breath with Sound 4 Min.mp3\": {\n      \"name\": \"Breath with Sound 4 Min.mp3\",\n      \"fullPath\": \"Relaxation Sounds/Breath with Sound 4 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Relaxation%20Sounds%2FBreath%20with%20Sound%204%20Min.mp3?alt=media&token=0ded5722-7ae1-410c-8fed-a0953d83e6e5\"\n    },\n    \"Ferris Wheel Breathing 5 Min.mp3\": {\n      \"name\": \"Ferris Wheel Breathing 5 Min.mp3\",\n      \"fullPath\": \"Relaxation Sounds/Ferris Wheel Breathing 5 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Relaxation%20Sounds%2FFerris%20Wheel%20Breathing%205%20Min.mp3?alt=media&token=8deafb08-e18a-4ceb-adb1-421b791b05b1\"\n    },\n    \"iRest 26 Min.mp3\": {\n      \"name\": \"iRest 26 Min.mp3\",\n      \"fullPath\": \"Relaxation Sounds/iRest 26 Min.mp3\",\n      \"source\": \"https://firebasestorage.googleapis.com/v0/b/exist-tribe.appspot.com/o/Relaxation%20Sounds%2FiRest%2026%20Min.mp3?alt=media&token=137ada14-28f9-4bda-b139-ccbf7c9dea7a\"\n    }\n}\n}\n\nflow.set('audio_files', audio_files)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1420,
        "wires": []
    },
    {
        "id": "16e1e28a541ea48b",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 1880,
        "wires": []
    },
    {
        "id": "2b9a7af9b5f12bc7",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 2060,
        "wires": []
    },
    {
        "id": "58c40b1ab331dc78",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1920,
        "wires": []
    },
    {
        "id": "d99aa620f24f05a2",
        "type": "exec",
        "z": "56ae43efe9a5b4d3",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 490,
        "y": 480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d3264f41d369e4f8",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Initialize Directories",
        "func": "const commands = [\n    \"cd /data/projects/REST_NODE\",\n    \"(!(test -f assets) && mkdir assets) && cd assets\",\n    \"(test -f 'Wake Sounds' || mkdir 'Wake Sounds')\",\n    \"(test -f 'Night Sounds' || mkdir 'Night Sounds')\",\n    \"(test -f 'Relaxation Sounds' || mkdir 'Relaxation Sounds')\",\n]\n\nmsg.payload = commands.join('&&')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 480,
        "wires": [
            [
                "d99aa620f24f05a2"
            ]
        ]
    },
    {
        "id": "5236552d84fbafea",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1420,
        "wires": []
    },
    {
        "id": "3f73f5ad1eb070fe",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "013f132b89390dae"
        ],
        "x": 815,
        "y": 820,
        "wires": []
    },
    {
        "id": "7e281b6bea2e9e38",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "83aaf991dc94095c"
        ],
        "x": 815,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9e72b563ccd130e9",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Adjust Max Brightness",
        "func": "const { state, max_brightness, light } = msg.payload\nconst { ADJUST_BRIGHTNESS } = flow.get('light_states')\nconst lightState = flow.get(light)\n\nconst new_light_state = {\n    ...lightState, \n    max_brightness,\n    state,\n    previous_state: lightState.state\n}\n\nmsg.counter = max_brightness\n\nif(lightState.state !== ADJUST_BRIGHTNESS) \n    flow.set(light, new_light_state)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1840,
        "wires": [
            [
                "ecc883a0274381d8",
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "8ed46fa8a0ac2bfe",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [],
        "x": 875,
        "y": 460,
        "wires": []
    },
    {
        "id": "6bbaf5f11895eebf",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 500,
        "wires": []
    },
    {
        "id": "87766fb3ee062bef",
        "type": "link out",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "links": [],
        "x": 695,
        "y": 460,
        "wires": []
    },
    {
        "id": "e41140dfb5004cad",
        "type": "comment",
        "z": "4fcd3dd2df70f0c8",
        "name": "Update Flows",
        "info": "",
        "x": 90,
        "y": 740,
        "wires": []
    },
    {
        "id": "df339d904f3b84b3",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "Pass Commands To the Host Terminal",
        "func": "const docker = \"sudo docker\"\nconst container_name = \"rest-node\"\nconst image_name = \"restnode/rest_node:dev\"\nconst port = \"-p 80:1880\"\nconst volumes = [\n    \"-v /etc/wpa_supplicant:/etc/wpa_supplicant\",\n    \"-v /etc/localtime:/etc/localtime:ro\",\n    \"-v /home/pi/pipes/host_pipe:/pipe/host_pipe\"\n]\nconst devices = [\n    \"--device=/dev/gpiomem\",\n    \"--device=/dev/i2c-1:/dev/i2c-1\",\n    \"--device=/dev/snd:/dev/snd\"\n]\nconst restart = \"--restart=always\"\n\nconst stop_container = `${docker} stop ${container_name}`\nconst remove_container = `${docker} container rm ${container_name}`\nconst pull_image = `${docker} pull ${image_name}`\nconst run_container = `${docker} run ${port} ${volumes.join(\" \")} ${devices.join(\" \")} --name ${container_name} ${restart} ${image_name}`\n\nconst host_script = [stop_container, remove_container, pull_image, run_container].join(\" && \")\n\nmsg.payload = `echo \"${host_script}\" > /pipes/host_pipe`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 820,
        "wires": [
            [
                "fdd84480a14b1161"
            ]
        ]
    },
    {
        "id": "9ad941f8ce1579b1",
        "type": "inject",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 820,
        "wires": [
            [
                "df339d904f3b84b3"
            ]
        ]
    },
    {
        "id": "fdd84480a14b1161",
        "type": "exec",
        "z": "4fcd3dd2df70f0c8",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 250,
        "y": 940,
        "wires": [
            [
                "62fe2b5c090c47b4"
            ],
            [
                "4784eee3c2f68f04"
            ],
            [
                "3915bd6b576331fa"
            ]
        ]
    },
    {
        "id": "62fe2b5c090c47b4",
        "type": "debug",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 900,
        "wires": []
    },
    {
        "id": "4784eee3c2f68f04",
        "type": "debug",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 940,
        "wires": []
    },
    {
        "id": "3915bd6b576331fa",
        "type": "debug",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 980,
        "wires": []
    },
    {
        "id": "f86717ee6a93cbf6",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "POST Requests",
        "info": "",
        "x": 120,
        "y": 2180,
        "wires": []
    },
    {
        "id": "7f57c88cc968c009",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/network",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2260,
        "wires": [
            [
                "ec9ca2b9b465dfcc"
            ]
        ]
    },
    {
        "id": "39c3271784c41469",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "d": true,
        "name": "",
        "links": [
            "1bd0312798db6fb0",
            "7ef0a0ab5b6ef0b5"
        ],
        "x": 935,
        "y": 2260,
        "wires": []
    },
    {
        "id": "0cb73c0373380d27",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Parse Wifi Credentials",
        "func": "const wifi_credentials = msg.payload\n\nconst types = {\n    ssid: \"string\",\n    password: \"string\",\n    country: \"string\"\n}\n\nfor(let key in types) {\n    const credential = wifi_credentials[key]\n    \n    if(typeof credential !== types[key]) {\n        const error = `Please include ${key} in your request body`\n        msg.statusCode = 400\n        \n        throw new Error(error)\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2260,
        "wires": [
            [
                "39c3271784c41469",
                "51b4f370d505a39d",
                "14b017febce3fd48"
            ]
        ]
    },
    {
        "id": "51b4f370d505a39d",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 2200,
        "wires": []
    },
    {
        "id": "ec9ca2b9b465dfcc",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 2260,
        "wires": [
            [
                "0cb73c0373380d27"
            ]
        ]
    },
    {
        "id": "5e0e1a9cddb3f2d2",
        "type": "comment",
        "z": "4b91f5d2f9b78292",
        "name": "Network Setup",
        "info": "",
        "x": 120,
        "y": 400,
        "wires": []
    },
    {
        "id": "3415519b160b7899",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/event",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2440,
        "wires": [
            [
                "2963dbc2f92ec862"
            ]
        ]
    },
    {
        "id": "6a818fee00616bc3",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "Event API (Bedtime)",
        "links": [
            "923891f5d3e27f13"
        ],
        "x": 635,
        "y": 2360,
        "wires": []
    },
    {
        "id": "2963dbc2f92ec862",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Event Type Selector",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "events.bedtime",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.waketime",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.sunrise",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.sunset",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 420,
        "y": 2440,
        "wires": [
            [
                "6a818fee00616bc3"
            ],
            [
                "633a87515a706fae"
            ],
            [
                "b2db8aadc49ccf98"
            ],
            [
                "235bb75890be86ee"
            ],
            [
                "30e06990570b85f7"
            ]
        ]
    },
    {
        "id": "30e06990570b85f7",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Event Type Missing",
        "func": "const error = new Error('No such event. Please update the type property of the event')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2520,
        "wires": []
    },
    {
        "id": "633a87515a706fae",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "Event API (Waketime)",
        "links": [
            "923891f5d3e27f13"
        ],
        "x": 635,
        "y": 2400,
        "wires": []
    },
    {
        "id": "b2db8aadc49ccf98",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "Event API (Sunrise)",
        "links": [
            "923891f5d3e27f13"
        ],
        "x": 635,
        "y": 2440,
        "wires": []
    },
    {
        "id": "235bb75890be86ee",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "Event API (Sunset)",
        "links": [
            "923891f5d3e27f13"
        ],
        "x": 635,
        "y": 2480,
        "wires": []
    },
    {
        "id": "e4fb05e6357ff740",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/audio/files",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 2600,
        "wires": [
            [
                "ae1893cad56d8dd8"
            ]
        ]
    },
    {
        "id": "6d07b905709d8469",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "c9c5a8c5491e0541"
        ],
        "x": 755,
        "y": 2580,
        "wires": []
    },
    {
        "id": "ae1893cad56d8dd8",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 90,
        "y": 2640,
        "wires": [
            [
                "7d71fbef364dd545"
            ]
        ]
    },
    {
        "id": "7d71fbef364dd545",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Night Sounds Check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Night Sounds",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 140,
        "y": 2680,
        "wires": [
            [
                "d694913d9ea287a2"
            ],
            [
                "dab88df04ff02789"
            ]
        ]
    },
    {
        "id": "d694913d9ea287a2",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Wake Sounds Check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Wake Sounds",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 2660,
        "wires": [
            [
                "b34b8737f7c38954"
            ],
            [
                "b7084c8e7549d50f"
            ]
        ]
    },
    {
        "id": "b34b8737f7c38954",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Relaxation Sounds Check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "Relaxation Sounds",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 2620,
        "wires": [
            [
                "6d07b905709d8469"
            ],
            [
                "afae55b41763e1e1"
            ]
        ]
    },
    {
        "id": "dab88df04ff02789",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Night Sounds not Stated",
        "func": "const error = new Error('Night Sounds not Stated')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2700,
        "wires": []
    },
    {
        "id": "b7084c8e7549d50f",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Wake Sounds not Stated",
        "func": "const error = new Error('Wake Sounds not Stated')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2660,
        "wires": []
    },
    {
        "id": "afae55b41763e1e1",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Relaxation Sounds not Stated",
        "func": "const error = new Error('Relaxation Sounds not Stated')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2620,
        "wires": []
    },
    {
        "id": "d84dc78d69b19d64",
        "type": "comment",
        "z": "4b91f5d2f9b78292",
        "name": "From API",
        "info": "",
        "x": 100,
        "y": 240,
        "wires": []
    },
    {
        "id": "7ef0a0ab5b6ef0b5",
        "type": "link in",
        "z": "4b91f5d2f9b78292",
        "name": "Pass Network Credentials",
        "links": [
            "39c3271784c41469"
        ],
        "x": 155,
        "y": 300,
        "wires": [
            [
                "5c4225dc47cd24d0"
            ]
        ]
    },
    {
        "id": "5c4225dc47cd24d0",
        "type": "function",
        "z": "4b91f5d2f9b78292",
        "name": "Network File Config",
        "func": "const { wifi_credentials } = flow.get('network_files')\n    \nmsg.filename = wifi_credentials\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 300,
        "wires": [
            [
                "34de34c6b7bf4f4a"
            ]
        ]
    },
    {
        "id": "34de34c6b7bf4f4a",
        "type": "link out",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "links": [
            "b34edc7a6389f241"
        ],
        "x": 455,
        "y": 300,
        "wires": []
    },
    {
        "id": "d9c21651d3bf73f3",
        "type": "link out",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 875,
        "y": 300,
        "wires": []
    },
    {
        "id": "cd9b0bf550031456",
        "type": "link in",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "links": [
            "a45bb7d9cbfd8e40"
        ],
        "x": 675,
        "y": 300,
        "wires": [
            [
                "d9c21651d3bf73f3"
            ]
        ]
    },
    {
        "id": "079f711e43d1316c",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Download Media File",
        "info": "",
        "x": 110,
        "y": 2620,
        "wires": []
    },
    {
        "id": "84cc3221f3ae7945",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 895,
        "y": 2680,
        "wires": []
    },
    {
        "id": "f606d9d82e886790",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "Download Media File",
        "links": [
            "b7f321e5e4dbee08",
            "93b47e5b799d36cb",
            "5b626b4ae0e51128"
        ],
        "x": 135,
        "y": 2680,
        "wires": [
            [
                "a1288fd3ce8a3245"
            ]
        ]
    },
    {
        "id": "a1288fd3ce8a3245",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Media To Download",
        "func": "const { fullPath: full_path } = msg.payload\nconst audio_files = flow.get('audio_files')\nconst levels = full_path.split(\"/\")\n\nif(!audio_files)\n    throw new Error(\"Audio Files hasn't been set yet\")\n\nlet pointer = audio_files\n\nfor(let index = 0; index < levels.length; index++) {\n    const level = levels[index]\n    \n    pointer = pointer[ level ]\n    \n    if(!pointer) {\n        const error = new Error('File does not exist')\n        msg.statusCode = 400\n        \n        throw error\n    }\n}\n\nmsg.payload = pointer\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2680,
        "wires": [
            [
                "112aa68c80a77ff1",
                "da060a3dee169dfa"
            ]
        ]
    },
    {
        "id": "3ba4983afd34ce90",
        "type": "catch",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "scope": [
            "a1288fd3ce8a3245"
        ],
        "uncaught": false,
        "x": 250,
        "y": 2940,
        "wires": [
            [
                "81c54bb0ddeabf4a",
                "5ff7d41524b48b17"
            ]
        ]
    },
    {
        "id": "81c54bb0ddeabf4a",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 2960,
        "wires": []
    },
    {
        "id": "7a6af03a46076c29",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 795,
        "y": 2920,
        "wires": []
    },
    {
        "id": "5ff7d41524b48b17",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Error Handler",
        "func": "msg.payload = msg.error\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 2920,
        "wires": [
            [
                "7a6af03a46076c29"
            ]
        ]
    },
    {
        "id": "112aa68c80a77ff1",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Download Media File",
        "func": "const { assets_dir } = global.get('defaults_config')\nconst {\n    AUDIO_ASSETS_AVAILABLE,\n    AUDIO_FILE_DOWNLOADED,\n    AUDIO_FILE_DOWNLOAD_ERROR,\n    AUDIO_FILE_DOWNLOAD_IN_PROGRESS\n} = flow.get('audio_download_response_topics')\nconst { createWriteStream } = fs\nconst { fullPath: full_path, source: url, name } = msg.payload\n\nconst file_destination = `${assets_dir}/${full_path}`\nconst request_url = request(url)\nconst progress_config = {\n    throttle: 2000\n}\n\nconst in_progress_handler = (state) => {\n    const payload = {\n        ...state, name,\n        topic: AUDIO_FILE_DOWNLOAD_IN_PROGRESS\n    }\n    \n    const message = {\n        payload\n    }\n    \n    node.send(message)\n}\n\nconst on_error_handler = (error) => {\n    const payload = {\n        message: \"Error Downloading the file\",\n        topic: AUDIO_FILE_DOWNLOAD_ERROR,\n        name,\n        error\n    }\n    \n    const message = {\n        payload\n    }\n    \n    node.send(message)\n}\n\nconst on_end_handler = () => {\n    const payload = {\n        ...msg.payload,\n        message: \"Download Finished\",\n        topic: AUDIO_FILE_DOWNLOADED,\n        name\n    }\n    \n    const message = {\n        payload\n    }\n    \n    node.send(message)\n    \n    const topic = AUDIO_ASSETS_AVAILABLE\n    \n    node.send({\n        payload: {\n            topic\n        },\n        topic\n    })\n}\n\nconst write_stream = createWriteStream(file_destination)\n\nprogress(request_url, progress_config)\n    .on('progress', in_progress_handler)\n    .on('error', on_error_handler)\n    .on('end', on_end_handler)\n    .pipe(write_stream)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "request",
                "module": "request"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "progress",
                "module": "request-progress"
            }
        ],
        "x": 300,
        "y": 2740,
        "wires": [
            [
                "cd65d8f2448d59a0"
            ]
        ]
    },
    {
        "id": "81d542eb869585b4",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "77bbaf1677e51e46"
        ],
        "x": 615,
        "y": 2800,
        "wires": []
    },
    {
        "id": "12ea314a244acef6",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 2740,
        "wires": []
    },
    {
        "id": "0a0c0886b1fbabae",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Download Ended Redirect",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "audio_download_response_topics.AUDIO_ASSETS_AVAILABLE",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 2820,
        "wires": [
            [
                "81d542eb869585b4"
            ],
            [
                "1c0dec3596439438",
                "0157241e8c0952b0"
            ]
        ]
    },
    {
        "id": "1c0dec3596439438",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "adec83fd96f5a557"
        ],
        "x": 615,
        "y": 2840,
        "wires": []
    },
    {
        "id": "cd65d8f2448d59a0",
        "type": "change",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Type as an Audio Download Response",
        "rules": [
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "api_response_types.AUDIO_DOWNLOAD_RESPONSE",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 2740,
        "wires": [
            [
                "0a0c0886b1fbabae",
                "12ea314a244acef6"
            ]
        ]
    },
    {
        "id": "0157241e8c0952b0",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 2880,
        "wires": []
    },
    {
        "id": "da060a3dee169dfa",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "If an HTTP request",
        "property": "req",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 2680,
        "wires": [
            [
                "84cc3221f3ae7945"
            ]
        ]
    },
    {
        "id": "780953a6524d62a9",
        "type": "comment",
        "z": "4fcd3dd2df70f0c8",
        "name": "Get Device Serial Number",
        "info": "",
        "x": 130,
        "y": 220,
        "wires": []
    },
    {
        "id": "cc0cdfe53865e93f",
        "type": "exec",
        "z": "4fcd3dd2df70f0c8",
        "command": "cat /proc/cpuinfo | grep Serial | cut -d ' ' -f 2",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get Device Serial Number",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "d69abb235b89143f"
            ],
            [],
            []
        ]
    },
    {
        "id": "13deef710be29b8a",
        "type": "link in",
        "z": "4fcd3dd2df70f0c8",
        "name": "Initialize System Controls",
        "links": [
            "176706c3efb8ce21",
            "1a5068f4b0cae0d9"
        ],
        "x": 135,
        "y": 300,
        "wires": [
            [
                "cc0cdfe53865e93f"
            ]
        ]
    },
    {
        "id": "bb235b35ac21e548",
        "type": "debug",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 300,
        "wires": []
    },
    {
        "id": "d69abb235b89143f",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "Store Serial Number",
        "func": "const serial_num = msg.payload.replace(\"\\n\", \"\")\n\nglobal.set(\"device_serial_number\", serial_num)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "bb235b35ac21e548"
            ]
        ]
    },
    {
        "id": "693f9777471f4fdf",
        "type": "file in",
        "z": "4b91f5d2f9b78292",
        "name": "Read WiFi Config",
        "filename": "/etc/wpa_supplicant/wpa_supplicant.conf",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 330,
        "y": 460,
        "wires": [
            [
                "f82f61048836f6eb"
            ]
        ]
    },
    {
        "id": "04075345e9213dfb",
        "type": "inject",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "693f9777471f4fdf"
            ]
        ]
    },
    {
        "id": "f82f61048836f6eb",
        "type": "debug",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 460,
        "wires": []
    },
    {
        "id": "22754002fd36cdd7",
        "type": "function",
        "z": "4b91f5d2f9b78292",
        "name": "WPA Passphrase Encoding",
        "func": "const { ssid, password } = msg.payload\nconst encode_password = `wpa_passphrase \"${ssid}\" \"${password}\"`\nconst { wifi_config_file } = flow.get(\"network\")\n\nmsg.credentials = msg.payload\nmsg.payload = encode_password\nmsg.filename = wifi_config_file\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 600,
        "wires": [
            [
                "7466546d342ee828"
            ]
        ]
    },
    {
        "id": "d0b1e2509079b8b0",
        "type": "inject",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "130c1becc90e69a7"
            ]
        ]
    },
    {
        "id": "7466546d342ee828",
        "type": "exec",
        "z": "4b91f5d2f9b78292",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 600,
        "wires": [
            [
                "d0ad9e3edf22c98f"
            ],
            [
                "987082b9c893dec7"
            ],
            [
                "336739603c11ca57"
            ]
        ]
    },
    {
        "id": "23b38c1d0f834a24",
        "type": "debug",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 600,
        "wires": []
    },
    {
        "id": "987082b9c893dec7",
        "type": "debug",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 600,
        "wires": []
    },
    {
        "id": "336739603c11ca57",
        "type": "debug",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 640,
        "wires": []
    },
    {
        "id": "27d5c8e744c8f0e9",
        "type": "comment",
        "z": "4b91f5d2f9b78292",
        "name": "Testing Section",
        "info": "",
        "x": 120,
        "y": 860,
        "wires": []
    },
    {
        "id": "2e156e0e92a40006",
        "type": "template",
        "z": "4b91f5d2f9b78292",
        "name": "WPA Supplicant Template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry={{payload.country}}\n\nnetwork={\n\tssid=\"{{payload.ssid}}\"\n\tpsk={{payload.password}}\n}",
        "output": "str",
        "x": 270,
        "y": 720,
        "wires": [
            [
                "f96fde70c2e8c443"
            ]
        ]
    },
    {
        "id": "f96fde70c2e8c443",
        "type": "file",
        "z": "4b91f5d2f9b78292",
        "name": "Overwrite File",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "fbdc801d2fda5749"
            ]
        ]
    },
    {
        "id": "130c1becc90e69a7",
        "type": "function",
        "z": "4b91f5d2f9b78292",
        "name": "Sample Wifi Credentials",
        "func": "const wifi_credentials = {\n    ssid: \"Purio Family - 5G\",\n    password: \"systempass\",\n    country: \"PH\"\n}\n\nmsg.payload = wifi_credentials\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 540,
        "wires": [
            [
                "22754002fd36cdd7"
            ]
        ]
    },
    {
        "id": "d0ad9e3edf22c98f",
        "type": "function",
        "z": "4b91f5d2f9b78292",
        "name": "Extracted Encoded PSK",
        "func": "const encoded_credentials = msg.payload\nconst encoded_psk = /(?<=\\tpsk ?= ?)\"?\\w+\"?/\nconst [ encoded_password ] = encoded_psk.exec(encoded_credentials) || []\n\nmsg.credentials.password = encoded_password\nmsg.payload = msg.credentials\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 560,
        "wires": [
            [
                "23b38c1d0f834a24",
                "8a828defa9875c28"
            ]
        ]
    },
    {
        "id": "fbdc801d2fda5749",
        "type": "debug",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 720,
        "wires": []
    },
    {
        "id": "8a828defa9875c28",
        "type": "link out",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "links": [
            "a58ef47042996746"
        ],
        "x": 935,
        "y": 680,
        "wires": []
    },
    {
        "id": "a58ef47042996746",
        "type": "link in",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "links": [
            "8a828defa9875c28"
        ],
        "x": 55,
        "y": 720,
        "wires": [
            [
                "2e156e0e92a40006"
            ]
        ]
    },
    {
        "id": "7219e3417bdfd645",
        "type": "inject",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "d52a554ab83fd62e"
            ]
        ]
    },
    {
        "id": "d52a554ab83fd62e",
        "type": "function",
        "z": "4b91f5d2f9b78292",
        "name": "Get Wifi Status",
        "func": "const get_wifi_status = \"wpa_cli -iwlan0 status\"\nconst host_pipe = \"/pipes/host_pipe\"\n\nmsg.payload = `echo \"${get_wifi_status}\" > ${host_pipe}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 920,
        "wires": [
            [
                "c336dce33e343b6c"
            ]
        ]
    },
    {
        "id": "c336dce33e343b6c",
        "type": "exec",
        "z": "4b91f5d2f9b78292",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 920,
        "wires": [
            [
                "34552ee035ac4b68"
            ],
            [
                "57f0f3d19ed7c3e3"
            ],
            [
                "db555f634efce04d"
            ]
        ]
    },
    {
        "id": "34552ee035ac4b68",
        "type": "debug",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 880,
        "wires": []
    },
    {
        "id": "57f0f3d19ed7c3e3",
        "type": "debug",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 920,
        "wires": []
    },
    {
        "id": "db555f634efce04d",
        "type": "debug",
        "z": "4b91f5d2f9b78292",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 960,
        "wires": []
    }
]