[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": ""
    },
    {
        "id": "427808241d304283",
        "type": "tab",
        "label": "Event Scheduler",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e1a40699ea85764e",
        "type": "tab",
        "label": "Light Controls",
        "disabled": false,
        "info": ""
    },
    {
        "id": "56ae43efe9a5b4d3",
        "type": "tab",
        "label": "Audio Controls",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4fcd3dd2df70f0c8",
        "type": "tab",
        "label": "System Controls",
        "disabled": false,
        "info": ""
    },
    {
        "id": "024a5d7a17bad4d1",
        "type": "tab",
        "label": "Local Storage",
        "disabled": false,
        "info": ""
    },
    {
        "id": "39c947163c4b72c5",
        "type": "tab",
        "label": "Hardware Interface",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1ef6a397c037ff41",
        "type": "tab",
        "label": "restnode",
        "disabled": true,
        "info": ""
    },
    {
        "id": "2beab0d8.f64dc",
        "type": "subflow",
        "name": "Light Quick Fade-On",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 60,
                "wires": [
                    {
                        "id": "c9f5b0f2.57521"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 840,
            "y": 60,
            "wires": []
        }
    },
    {
        "id": "650a8f6f7f65f9de",
        "type": "subflow",
        "name": "Light Quick Fade-On (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 60,
                "wires": [
                    {
                        "id": "8e2b8cf8fe6698eb"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 840,
            "y": 60,
            "wires": [
                {
                    "id": "91c21372e5dc0457",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b7f24f4584cfd7ab",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "437ad050babab08f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 180,
                "wires": [
                    {
                        "id": "3f54b697c73637aa",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "3f2c5e5d.9118c2",
        "type": "ui_tab",
        "name": "REST Sleep Node",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9129e728.6627d8",
        "type": "ui_group",
        "name": "System Control",
        "tab": "3f2c5e5d.9118c2",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "9933a45d.b3b0e",
        "type": "ui_group",
        "name": "Nightlight",
        "tab": "3f2c5e5d.9118c2",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "91c4859.9f3e5f8",
        "type": "ui_group",
        "name": "WakeUp Light",
        "tab": "3f2c5e5d.9118c2",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "426403b1.4aa8dc",
        "type": "ui_group",
        "name": "Manual Control",
        "tab": "3f2c5e5d.9118c2",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "a81e9f61.3e719",
        "type": "ui_group",
        "name": "Audio Selection",
        "tab": "3f2c5e5d.9118c2",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "e3bb1fc6.01612",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#89a45b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#89a45b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#89a45b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#acbf8c",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#89a45b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "18c6c46d15594407",
        "type": "websocket-listener",
        "path": "/restnode",
        "wholemsg": "false"
    },
    {
        "id": "3bcabf98.3b81",
        "type": "link in",
        "z": "2beab0d8.f64dc",
        "name": "quickFadeOn",
        "links": [],
        "x": 90,
        "y": 140,
        "wires": [
            [
                "c9f5b0f2.57521"
            ]
        ],
        "l": true
    },
    {
        "id": "4fd7a6cd.192be8",
        "type": "delay",
        "z": "2beab0d8.f64dc",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "883559c4.769128"
            ]
        ]
    },
    {
        "id": "bf9ec4d.2f82938",
        "type": "change",
        "z": "2beab0d8.f64dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "-127",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 100,
        "wires": [
            [
                "3096a8ec.3f6f78"
            ]
        ]
    },
    {
        "id": "883559c4.769128",
        "type": "function",
        "z": "2beab0d8.f64dc",
        "name": "Increment Brightness",
        "func": "const scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\n// If at the max brightness, then terminate the sub-flow\nif (msg.payload >= 128) {\n    return;\n}\n    \n// Otherwise, increment the brightness\nmsg.payload += 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cd1bd09d.e12dd",
        "type": "inject",
        "z": "2beab0d8.f64dc",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-128",
        "payloadType": "num",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "bf9ec4d.2f82938"
            ]
        ]
    },
    {
        "id": "3096a8ec.3f6f78",
        "type": "function",
        "z": "2beab0d8.f64dc",
        "name": "Enable/disable",
        "func": "// If the light is not off, then enable the control GPIO\nif (msg.payload != 0)\n    msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c9f5b0f2.57521",
        "type": "delay",
        "z": "2beab0d8.f64dc",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "bf9ec4d.2f82938"
            ]
        ]
    },
    {
        "id": "ba1a941db48c4067",
        "type": "link in",
        "z": "650a8f6f7f65f9de",
        "name": "quickFadeOn",
        "links": [],
        "x": 90,
        "y": 140,
        "wires": [
            [
                "8e2b8cf8fe6698eb"
            ]
        ],
        "l": true
    },
    {
        "id": "f440b6f2e7d9e1cc",
        "type": "delay",
        "z": "650a8f6f7f65f9de",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "fab6c0545bb83fa7"
            ]
        ]
    },
    {
        "id": "91c21372e5dc0457",
        "type": "i2c out",
        "z": "650a8f6f7f65f9de",
        "name": "Set Brightness",
        "busno": "1",
        "address": "8",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 700,
        "y": 100,
        "wires": [
            [
                "f440b6f2e7d9e1cc"
            ]
        ]
    },
    {
        "id": "13eef392766c7000",
        "type": "change",
        "z": "650a8f6f7f65f9de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "-127",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 100,
        "wires": [
            [
                "5f5921f92b98783f",
                "91c21372e5dc0457"
            ]
        ]
    },
    {
        "id": "fab6c0545bb83fa7",
        "type": "function",
        "z": "650a8f6f7f65f9de",
        "name": "Increment Brightness",
        "func": "const scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\n// If at the max brightness, then terminate the sub-flow\nif (msg.payload >= 128) {\n    return;\n}\n    \n// Otherwise, increment the brightness\nmsg.payload += 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "91c21372e5dc0457"
            ]
        ]
    },
    {
        "id": "3664037d789b2491",
        "type": "inject",
        "z": "650a8f6f7f65f9de",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-128",
        "payloadType": "num",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "13eef392766c7000"
            ]
        ]
    },
    {
        "id": "5f5921f92b98783f",
        "type": "function",
        "z": "650a8f6f7f65f9de",
        "name": "Enable/disable",
        "func": "// If the light is not off, then enable the control GPIO\nif (msg.payload != 0)\n    msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "ab861da4eb8ef389"
            ]
        ]
    },
    {
        "id": "ab861da4eb8ef389",
        "type": "pi-gpiod out",
        "z": "650a8f6f7f65f9de",
        "name": "NL Enable",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "22",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "8e2b8cf8fe6698eb",
        "type": "delay",
        "z": "650a8f6f7f65f9de",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "13eef392766c7000"
            ]
        ]
    },
    {
        "id": "ef705d6bc0304762",
        "type": "ui_text_input",
        "z": "1ef6a397c037ff41",
        "name": "",
        "label": "Wake Time",
        "tooltip": "Set your wake-up time",
        "group": "9129e728.6627d8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "time",
        "delay": "0",
        "topic": "",
        "topicType": "str",
        "x": 690,
        "y": 420,
        "wires": [
            [
                "6e36ebd0c5fc0d08"
            ]
        ]
    },
    {
        "id": "070c41b37d0cd57c",
        "type": "ui_slider",
        "z": "1ef6a397c037ff41",
        "d": true,
        "name": "",
        "label": "Fade Out (min)",
        "tooltip": "Time to fade completly out",
        "group": "9933a45d.b3b0e",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "30",
        "step": 1,
        "x": 800,
        "y": 480,
        "wires": [
            [
                "6ae2664b8ae145d6"
            ]
        ]
    },
    {
        "id": "0e8150641fc48f02",
        "type": "ui_slider",
        "z": "1ef6a397c037ff41",
        "d": true,
        "name": "",
        "label": "Fade In (min)    ",
        "tooltip": "WakeUp Light Fade In",
        "group": "91c4859.9f3e5f8",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "30",
        "step": 1,
        "x": 790,
        "y": 540,
        "wires": [
            [
                "cf873a5906edc227"
            ]
        ]
    },
    {
        "id": "f43371a946e6dd25",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "Clock",
        "payloadType": "date",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "739eabe4c5da0c7c"
            ]
        ]
    },
    {
        "id": "31d6a19c8d7c4470",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "set_waketime",
        "func": "const zeroPad = (num, places) => String(num).padStart(places, '0');\nconst twoDigitPad = (num) => zeroPad(num, 2);\nconst formatHHMM = (hours ,minutes) => `${twoDigitPad(hours)}:${twoDigitPad(minutes)}`;\nconst toMilliseconds = (minutes) => {\n    // Convert minutes to milliseconds\n  return minutes * 60000; // 60,000 millisec in a minute\n}\nconst formatMillisecondsAsHHMM = (millisecondsSinceMidnight) => {\n    // Convert the tim einmilliseconds since midnight to an hour-minute-seconds string \n    let hoursSinceMidnight = Math.floor(millisecondsSinceMidnight / 3600000);\n    let minutesPastTheHour = Math.floor((millisecondsSinceMidnight - hoursSinceMidnight * 3600000) / 60000);\n    if (hoursSinceMidnight > 12)\n        hoursSinceMidnight -= 12;\n    return formatHHMM(hoursSinceMidnight, minutesPastTheHour);\n}\n\n// Calculate the times that each step in the wakeup sequence should execute\n\nlet wakeupOffsetMs = msg.payload;\n\nconst MinutesBeforeWakeTimeToStartFadingInWakeLight = 30;\nconst MinutesAfterWakeTimeToTurnOffWakeLight = 15;\n\nflow.set(\"wakeOffsetMs\", wakeupOffsetMs);\nflow.set(\"wakeLightStartFadeInOffsetMs\", wakeupOffsetMs - toMilliseconds(MinutesBeforeWakeTimeToStartFadingInWakeLight));\nflow.set(\"wakeLightTurnOffOffsetMs\", wakeupOffsetMs + toMilliseconds(MinutesAfterWakeTimeToTurnOffWakeLight));\n\nnode.log(\"Waketime: \" + formatMillisecondsAsHHMM(wakeupOffsetMs));\nnode.log(\"WakeLight Start FadeIn Time: \" + formatMillisecondsAsHHMM(flow.get(\"wakeLightStartFadeInOffsetMs\")));\nnode.log(\"WakeLight Off Time: \" + formatMillisecondsAsHHMM(flow.get(\"wakeLightTurnOffOffsetMs\")));\n\n// Convert the waketime into a Date object for a pretty node.status() message\nlet now = new Date();\nlet hoursSinceMidnight = Math.floor(wakeupOffsetMs / 3600000);\nlet minutesPastTheHour = Math.floor((wakeupOffsetMs - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((wakeupOffsetMs / 1000) % 60);\nlet wakeTime = new Date(now.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0));\nwakeTime.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0);\nnode.status({text:wakeTime.toLocaleTimeString()});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "024a8df67441abe8",
                "499348cb3f4e5816"
            ]
        ]
    },
    {
        "id": "739eabe4c5da0c7c",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "mainTimerControl",
        "func": "const zeroPad = (num, places) => String(num).padStart(places, '0');\nconst twoDigitPad = (num) => zeroPad(num, 2);\nconst formatHHMMSS = (hours ,minutes, seconds) => `${twoDigitPad(hours)}:${twoDigitPad(minutes)}:${twoDigitPad(seconds)}`;\nconst toMilliseconds = (minutes) => {\n    // Convert minutes to milliseconds\n  return minutes * 60000; // 60,000 millisec in a minute\n}\nlet status = flow.get('status');\nnode.log(`status ${status}`);\n\n// Since this node is triggered once a second, determine if\n// this is the first tick/run after the user clicked the \"START\" button\n// (this allows for other nodes to do their action ONCE after being\n// started, like playing audio. Without this flag, the audio player\n// would be invoked multiple times and play overlapping audio)\n//\n// Valid \"status\" values are\n//  - stopped - NODE is \"off\"\n//  - starting - User just clicked the \"START\" button and this is the first tick/run\n//  - started - This is the second or later tick/run after the user clicked the \"START\" button\nlet isFirstTickAfterStarting = false;\nif (status == \"starting\") {\n    isFirstTickAfterStarting = true;\n    flow.set(\"isFirstTickAfterStarting\", true); // Temporarily set this \"flag\" to inform other nodes\n    flow.set(\"status\", \"started\") ;\n} else if (status == \"started\") {\n    // If this is not the first tick/run after being started, then clear the flag\n    // so other nodes won't run their \"first tick\" action anymore\n    flow.set(\"isFirstTickAfterStarting\");\n}\n\n// Get the current time, in milliseconds since midnight\nlet now = new Date();\nnow = now.getTime() - now.setHours(0,0,0,0);\n\n// Convert the current time to a string so it can be displayed in the flow\nlet hoursSinceMidnight = Math.floor(now / 3600000);\nlet minutesPastTheHour = Math.floor((now - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((now / 1000) % 60);\nif (hoursSinceMidnight > 12)\n    hoursSinceMidnight -= 12;\nlet hoursMinutesSecondsSinceMidnight = formatHHMMSS(hoursSinceMidnight, minutesPastTheHour, secondsPastTheHour);\n\n// Only do this if the system is running\nif(status === \"stopped\") {\n    node.status({ fill:'red', text:`${hoursMinutesSecondsSinceMidnight} ${flow.get(\"status\")}` });\n    return msg;\n}\n\n// System is \"running\", so show green fill\nnode.status({ fill:'green', text:`${hoursMinutesSecondsSinceMidnight} ${flow.get(\"status\")}`});\n\n\n// First: Handle wake-up seqence below\n\nlet wakeOffsetMs = flow.get(\"wakeOffsetMs\");\nlet wakeLightStartFadeInOffsetMs = flow.get(\"wakeLightStartFadeInOffsetMs\");\nlet wakeLightTurnOffOffsetMs = flow.get(\"wakeLightTurnOffOffsetMs\");\nlet maxPwmDutyCycle = flow.get(\"pwm_wu_max\");\n\n// Is it time to start the wake light fade-on sequence?\n// (just check if we're +/- 1 sec of the wake light fade-on time, since this function is only called once a sec)// OR\n// If the current time is past when the wake light should have\n// started to fade-on AND the current time is not yet past the time at which the light should turn fully on\n// (this allows for the NODE to be started within the wake light's\n// fade-on period and have the light jump to fading on, useful for testing)\nif ((Math.abs(now - wakeLightStartFadeInOffsetMs) < 500) || \n    ((now > wakeLightStartFadeInOffsetMs) && (now < wakeOffsetMs))) {\n    // Then it's time to fade in the wakeup light\n    // (convert the time remaining to a PWM duty cycle percentage)\n    let pwm_wu = Math.ceil(100 * ((now - wakeLightStartFadeInOffsetMs)/(wakeOffsetMs - wakeLightStartFadeInOffsetMs)));\n    pwm_wu = Math.min(pwm_wu, maxPwmDutyCycle);\n    node.log(\"1 pwm_wu \" + pwm_wu);\n    flow.set('pwm_wu', pwm_wu);\n}\n\n// Is it time to wake up and keep the wake light 100% on for a period of time after?\nif ((now >= wakeOffsetMs) && (now < wakeLightTurnOffOffsetMs)) {\n    // Yes, time to wake up and fully turn on the wakeup light\n    let pwm_wu = maxPwmDutyCycle;\n    node.log(\"2 pwm_wu \" + pwm_wu);\n    flow.set('pwm_wu', pwm_wu);\n}\n\n// If the current time is past MinutesAfterWakeTimeToTurnOffWakeLight, then turn off the wake light\n// (just check if we're +/- 1 sec of the wake light turn off time, since this function is only called once a sec)\nif (Math.abs(now - wakeLightTurnOffOffsetMs) < 500) {\n    // Then it's time to turn off the wakeup light\n    let pwm_wu = 0;\n    node.log(\"3 pwm_wu \" + pwm_wu);\n    flow.set('pwm_wu', pwm_wu);\n}\n\n// Second: Handle sleep/bedtime sequence below\n\nlet bedOffsetMs = flow.get(\"bedOffsetMs\");\nlet nightlightOnOffsetMs = flow.get(\"nightlightOnOffsetMs\");\nlet nightlightStartFadeOutOffsetMs = flow.get(\"nightlightStartFadeOutOffsetMs\");\n\n// Is it time to start fading-off the nightlight?\nif ((now < bedOffsetMs) && (now > nightlightStartFadeOutOffsetMs)) {\n    let pwm_nl = Math.floor(100 - (100.0 * ((now - nightlightStartFadeOutOffsetMs)/(bedOffsetMs - nightlightStartFadeOutOffsetMs))));\n    node.log(\"pwm_nl: \" + pwm_nl);\n    flow.set('pwm_nl', pwm_nl);\n}\n\n// Time to turn on the night light?\n// Either at the correct starting time OR\n// the current time is past the \"nightlight on time\" AND the current time isn't yet to the \"nightlight starting fading off\" time\nif ((Math.abs(now - nightlightOnOffsetMs) < 500) || \n    (now > nightlightOnOffsetMs && now < nightlightStartFadeOutOffsetMs)) {\n    // Yes, activate the sleep sequence and turn on the night light (100% duty cycle)\n    let pwm_nl = 100;\n    node.log(\"pwm_nl: \" + pwm_nl);\n    flow.set('pwm_nl', pwm_nl);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f6b41b29397f1411",
        "type": "ui_switch",
        "z": "1ef6a397c037ff41",
        "name": "",
        "label": "Nightlight",
        "tooltip": "",
        "group": "426403b1.4aa8dc",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "x": 360,
        "y": 760,
        "wires": [
            [
                "55cafd93338102f8"
            ]
        ]
    },
    {
        "id": "c4c52dda04f7824c",
        "type": "ui_switch",
        "z": "1ef6a397c037ff41",
        "name": "",
        "label": "Wake Up Light",
        "tooltip": "",
        "group": "426403b1.4aa8dc",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "x": 360,
        "y": 800,
        "wires": [
            [
                "5a95dce7f05fc842"
            ]
        ]
    },
    {
        "id": "55cafd93338102f8",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "turnOnOffNL",
        "func": "if (msg.payload) {\n    // Trigger night light's \"quick fade-on\"\n    flow.set('pwm_nl', 100);\n    return [ msg, null ];\n} else {\n    // Turning the night light off, so just turn it off without any fading\n    flow.set('pwm_nl', 0);\n    return [ null, msg ];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 760,
        "wires": [
            [
                "6b05f551c7c9ac4b"
            ],
            [
                "a56f72e0e55de909"
            ]
        ],
        "outputLabels": [
            "On",
            "Off"
        ]
    },
    {
        "id": "5a95dce7f05fc842",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "turnOnOffWU",
        "func": "// Map true/false to a brightness level (0% or 100%)\nif (msg.payload) {\n    flow.set('pwm_wu', flow.get(\"pwm_wu_max\"));\n} else {\n    flow.set('pwm_wu', 0);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 800,
        "wires": [
            [
                "c91d644d7998eb37"
            ]
        ]
    },
    {
        "id": "fb730672fa535043",
        "type": "ui_button",
        "z": "1ef6a397c037ff41",
        "name": "start_stop",
        "group": "9129e728.6627d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload || \"Start\"}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "4b5971bcf78dab1d"
            ]
        ]
    },
    {
        "id": "6856b99b6a06286e",
        "type": "ui_switch",
        "z": "1ef6a397c037ff41",
        "d": true,
        "name": "start_now",
        "label": "Start Bedtime Now",
        "tooltip": "Start your sleep sequence right now or later at specific time",
        "group": "9129e728.6627d8",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "start_now",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "x": 820,
        "y": 180,
        "wires": [
            [
                "aab32195b5c875f0"
            ]
        ]
    },
    {
        "id": "3defea4f02560d70",
        "type": "ui_switch",
        "z": "1ef6a397c037ff41",
        "d": true,
        "name": "play_audio",
        "label": "Play Audio Tracks",
        "tooltip": "Relaxing sounds to sleep better",
        "group": "9129e728.6627d8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "play_audio",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 610,
        "y": 240,
        "wires": [
            [
                "aab32195b5c875f0"
            ]
        ]
    },
    {
        "id": "aab32195b5c875f0",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "setSystemSettings",
        "func": "var settings = flow.get('settings') || {};\nsettings[msg.topic] = msg.payload; // Sets 'settings.start_now' to true/false\nflow.set('settings', settings);\n\nlet now = new Date();\nlet msSinceMidnight = now.getTime() - now.setHours(0,0,0,0);\n\nflow.set('bedOffsetMs', msSinceMidnight);\n\n// For debugging\nlet hoursSinceMidnight = Math.floor(msSinceMidnight/(3600000 ));\nlet minutesPastTheHour = Math.floor((msSinceMidnight - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((msSinceMidnight / 1000) % 60);\nlet hoursMinutesSecondsSinceMidnight = \n    `${hoursSinceMidnight}:${minutesPastTheHour}:${secondsPastTheHour}`;\nnode.status({text:hoursMinutesSecondsSinceMidnight});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d7cc596bb84ca5b6",
        "type": "comment",
        "z": "1ef6a397c037ff41",
        "name": "ManualControlOfLights",
        "info": "Modifiying any of these controls will stop the current sequence.",
        "x": 160,
        "y": 640,
        "wires": []
    },
    {
        "id": "99516704112a1005",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "d": true,
        "name": "OnStartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "3defea4f02560d70"
            ]
        ]
    },
    {
        "id": "0f55f04ee8f2d5aa",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "OnStartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "InitialValues",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "697b5069cc50821a"
            ]
        ]
    },
    {
        "id": "96e6514112588ba6",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "setInitialValues",
        "func": "node.log(\"Setting initial values\");\n\n//// Only overwrite settings that are missing\nif (!flow.get(\"nl_fadeout\"))\n    flow.set(\"nl_fadeout\", 45);\nif (!flow.get(\"wu_fadein\"))\n    flow.set(\"wu_fadein\", 30);\n// if (!flow.get(\"waketime\"))\n//     flow.set(\"waketime\", 0);\nif (!flow.get(\"sleep_hours\"))\n    flow.set(\"sleep_hours\", 8);\nif (!flow.get(\"sleep_minutes\"))\n    flow.set(\"sleep_minutes\", 0);\nif (!flow.get(\"pwm_wu_max\"))\n    flow.set(\"pwm_wu_max\", 75);\n    \nflow.set(\"pwm_wu\", 0);\nflow.set(\"pwm_nl\", 0);\nflow.set(\"status\", \"stopped\");\n\n//let projectDir = msg.payload.trim() + '/.node-red/';\nlet projectDir = msg.payload.trim() + '/yogasleepnode-master/';\nflow.set(\"projectDir\", projectDir);\n\nlet audioDir = projectDir + 'yogapod_audio/';\nflow.set(\"audioDir\", audioDir);\n\nlet defaultSettings = {\n    start_now: false,\n    isoAudioEnabled: false,\n    play_audio: true,\n    background_volume: 2,\n    background_noise: \"noSound\",\n    awakening_sound: \"noSound\",\n    awakening_volume: 2,\n    relax_technique: \"noSound\",\n    relax_volume: 5,\n};\n\nlet settings = flow.get(\"settings\") || defaultSettings;\n\n// Only overwrite settings that are missing\nif (!settings.background_volume)\n    settings.background_volume = defaultSettings.background_volume;\nif (!settings.awakening_volume)\n    settings.awakening_volume = defaultSettings.awakening_volume;\nif (!settings.background_noise)\n    settings.background_noise = defaultSettings.background_noise;\nif (!settings.awakening_sound)\n    settings.awakening_sound = defaultSettings.awakening_sound;\nif (!settings.relax_technique)\n    settings.relax_technique = defaultSettings.relax_technique;\nif (!settings.relax_volume)\n    settings.relax_volume = defaultSettings.relax_volume;\nif (!settings.play_audio)\n    settings.play_audio = true;\n    \nflow.set(\"settings\", settings);\n\nnode.status({fill:'green',text:\"All Set\"});\n\n// Set the start/stop button to START, since we're just starting up\nmsg.payload = \"Start\";\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "93ef176a0405f4ae",
                "6856b99b6a06286e"
            ]
        ]
    },
    {
        "id": "4cce1b09597ba463",
        "type": "status",
        "z": "1ef6a397c037ff41",
        "name": "setInitStatus",
        "scope": [
            "96e6514112588ba6"
        ],
        "x": 330,
        "y": 500,
        "wires": [
            [
                "ef705d6bc0304762",
                "becc5bce5ae4bd82",
                "a5a9a4301ed1ef63",
                "73e3ea67164662ca",
                "5e8fa079e3ea1996"
            ]
        ]
    },
    {
        "id": "697b5069cc50821a",
        "type": "exec",
        "z": "1ef6a397c037ff41",
        "command": "echo ~",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "getHomeDir",
        "x": 350,
        "y": 140,
        "wires": [
            [
                "96e6514112588ba6",
                "3ccdd1e53a9427ff"
            ],
            [],
            []
        ]
    },
    {
        "id": "74fbd1afbfb6f57f",
        "type": "status",
        "z": "1ef6a397c037ff41",
        "name": "Start Bedtime Now",
        "scope": [
            "6856b99b6a06286e"
        ],
        "x": 170,
        "y": 400,
        "wires": [
            [
                "f797b5e9de1785f4"
            ]
        ]
    },
    {
        "id": "f797b5e9de1785f4",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Enable/disable Bed Time",
        "func": "// If the \"Start Bedtime Now\" is ON/Enabled\n// then disable the \"Bed Time\" time input\nif(msg.status.text === 'on'){\n    msg[\"enabled\"] = false;\n}else{\n    msg[\"enabled\"] = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3ccdd1e53a9427ff",
        "type": "debug",
        "z": "1ef6a397c037ff41",
        "d": true,
        "name": "HOME_DIR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "c07dacf13f72cf77",
        "type": "link in",
        "z": "1ef6a397c037ff41",
        "name": "",
        "links": [
            "bd0277ef.079188"
        ],
        "x": 695,
        "y": 460,
        "wires": [
            [
                "070c41b37d0cd57c"
            ]
        ]
    },
    {
        "id": "c6c81656bcf1aee9",
        "type": "link in",
        "z": "1ef6a397c037ff41",
        "name": "",
        "links": [
            "a0f9521a.06912"
        ],
        "x": 695,
        "y": 560,
        "wires": [
            [
                "0e8150641fc48f02"
            ]
        ]
    },
    {
        "id": "29c0264c47c44b03",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 700,
        "wires": [
            [
                "b44f7ecfd1baf441",
                "c91d644d7998eb37"
            ]
        ]
    },
    {
        "id": "b44f7ecfd1baf441",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Scale NL Bright to PWM",
        "func": "const scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nlet pwmDutyCycle = flow.get('pwm_nl');\nif (pwmDutyCycle > 100)\n    pwmDutyCycle = 100;\nif (pwmDutyCycle < 0)\n    pwmDutyCycle = 0;\n\n// If the nightlight is being turned on \n// (either manually or automatically), then\n// trigger the \"turn on\" subflow by sending a message\n// to the second output\nif ((msg.payload == 100) || (pwmDutyCycle == 100))\n    return [ null, msg ];\n\n// Otherwise, the nightlight is being faded-out, so pass along\n// the PWM value to the first output\nmsg.payload = Math.round(scale(pwmDutyCycle, 0, 100, 0, 255));\nnode.status(msg.payload);\n\n// If the nightlight is being turned off, then reset\n// the trigger/latch that protects the \"Fade-in\" sub-flow\n// so that the light can be turned on again\nif (pwmDutyCycle == 0) {\n    return [ msg, msg ]; // Send to both outputs to reset the trigger\n} else {\n    return [ msg, null ];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 680,
        "wires": [
            [
                "32344058d434dbec",
                "a56f72e0e55de909"
            ],
            [
                "6b05f551c7c9ac4b"
            ]
        ],
        "outputLabels": [
            "FadeOut",
            "QuickFadeOn"
        ]
    },
    {
        "id": "c91d644d7998eb37",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Scale WL Bright to PWM",
        "func": "// Scale brightness percentage to a PWM duty cycle of 0-255\n\nconst scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nlet pwmDutyCycle = flow.get('pwm_wu');\nlet maxPwmDutyCycle = flow.get(\"pwm_wu_max\");\n\nif (pwmDutyCycle > maxPwmDutyCycle)\n    pwmDutyCycle = maxPwmDutyCycle;\nif (pwmDutyCycle < 0)\n    pwmDutyCycle = 0;\n\nmsg.payload = Math.round(scale(pwmDutyCycle, 0, 100, 0, 255));\n\nnode.status(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 780,
        "wires": [
            [
                "33448938b92fd540",
                "9c3c68a4b78fe17f"
            ]
        ]
    },
    {
        "id": "555feb6839c94591",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "OnStartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "f6b41b29397f1411",
                "c4c52dda04f7824c",
                "4b073bc2f9881729"
            ]
        ]
    },
    {
        "id": "93ef176a0405f4ae",
        "type": "link out",
        "z": "1ef6a397c037ff41",
        "name": "",
        "links": [
            "7580287265e63683"
        ],
        "x": 745,
        "y": 140,
        "wires": []
    },
    {
        "id": "a3bbcb3dfb265a8b",
        "type": "pi-gpiod out",
        "z": "1ef6a397c037ff41",
        "name": "NL Enable",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "22",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 1230,
        "y": 640,
        "wires": []
    },
    {
        "id": "bf4ed96d192dbcdd",
        "type": "pi-gpiod out",
        "z": "1ef6a397c037ff41",
        "name": "Wake Enable",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "27",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 1230,
        "y": 820,
        "wires": []
    },
    {
        "id": "a56f72e0e55de909",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Enable/disable",
        "func": "// If the light is not off, then enable the control GPIO\nif (msg.payload != 0)\n    msg.payload = 1;\n    \nnode.status(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 640,
        "wires": [
            [
                "a3bbcb3dfb265a8b"
            ]
        ]
    },
    {
        "id": "fe5c2eb336819048",
        "type": "i2c out",
        "z": "1ef6a397c037ff41",
        "name": "Set Brightness",
        "busno": "1",
        "address": "8",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 1400,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "33448938b92fd540",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Enable/disable",
        "func": "// If the brightness is not off, then enable the control GPIO\n// so the panel can light up\nif (msg.payload != 0)\n    msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 820,
        "wires": [
            [
                "bf4ed96d192dbcdd"
            ]
        ]
    },
    {
        "id": "9c3c68a4b78fe17f",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Enable/disable",
        "func": "if (msg.payload != 0)\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 780,
        "wires": [
            [
                "c41d0f854d1e05b5"
            ]
        ]
    },
    {
        "id": "32344058d434dbec",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Enable/disable",
        "func": "if (msg.payload != 0)\n    return msg;\nelse\n    return;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 740,
        "wires": [
            [
                "c41d0f854d1e05b5"
            ]
        ]
    },
    {
        "id": "c41d0f854d1e05b5",
        "type": "range",
        "z": "1ef6a397c037ff41",
        "minin": "0",
        "maxin": "255",
        "minout": "-128",
        "maxout": "127",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "",
        "x": 1230,
        "y": 760,
        "wires": [
            [
                "fe5c2eb336819048"
            ]
        ]
    },
    {
        "id": "5b014783d9bec295",
        "type": "ui_text",
        "z": "1ef6a397c037ff41",
        "group": "9129e728.6627d8",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Calculated Bed Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1620,
        "y": 340,
        "wires": []
    },
    {
        "id": "642feed3c2f05fe2",
        "type": "ui_slider",
        "z": "1ef6a397c037ff41",
        "name": "",
        "label": "Hours of Sleep",
        "tooltip": "Select desired hours of sleep",
        "group": "9129e728.6627d8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "sleep_hours",
        "topicType": "str",
        "min": 0,
        "max": "12",
        "step": 1,
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "499348cb3f4e5816"
            ]
        ]
    },
    {
        "id": "b6fbdb6064efa9c1",
        "type": "ui_slider",
        "z": "1ef6a397c037ff41",
        "name": "",
        "label": "Minutes of Sleep",
        "tooltip": "Select desired minutes of sleep",
        "group": "9129e728.6627d8",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "sleep_minutes",
        "topicType": "str",
        "min": 0,
        "max": "55",
        "step": "5",
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "499348cb3f4e5816"
            ]
        ]
    },
    {
        "id": "499348cb3f4e5816",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "calculateBedTime",
        "func": "const zeroPad = (num, places) => String(num).padStart(places, '0');\nconst twoDigitPad = (num) => zeroPad(num, 2);\nconst toMilliseconds = (minutes) => {\n    // Convert minutes to milliseconds\n  return minutes * 60000; // 60,000 millisec in a minute\n}\nconst formatHHMM = (hours ,minutes) => `${twoDigitPad(hours)}:${twoDigitPad(minutes)}`;\nconst formatMillisecondsAsHHMM = (millisecondsSinceMidnight) => {\n    // Convert the tim einmilliseconds since midnight to an hour-minute-seconds string \n    let hoursSinceMidnight = Math.floor(millisecondsSinceMidnight / 3600000);\n    let minutesPastTheHour = Math.floor((millisecondsSinceMidnight - hoursSinceMidnight * 3600000) / 60000);\n    if (hoursSinceMidnight > 12)\n        hoursSinceMidnight -= 12;\n    return formatHHMM(hoursSinceMidnight, minutesPastTheHour);\n}\nconst adjustIfTimeHasMovedIntoPreviousDay = (offsetInMs) => {\n    \n    const LengthOfDayInMs = 24 * 60 * 60 * 1000;\n    \n    // Add a full day so we can't return a negative time-offset value\n    offsetInMs += LengthOfDayInMs;\n    \n    // If the time-offset has increased into the next day, then subtract the added day\n    if (offsetInMs > LengthOfDayInMs)\n        offsetInMs -= LengthOfDayInMs;\n        \n    return offsetInMs;\n}\n\n\nif (msg.enabled == false)\n    // Do nothing and ignore msg\n    return;\n\n// Only save these two settings, since the other settings/inputs\n// are already being saved elsewhere\nswitch (msg.topic) {\n    case \"sleep_hours\":\n    case \"sleep_minutes\":\n        flow.set(msg.topic, msg.payload);\n        break;\n        \n    default:\n        // Do nothing for other settings/inputs\n        break;\n}\n\nlet sleepHours = flow.get(\"sleep_hours\");\nlet sleepMinutes = flow.get(\"sleep_minutes\");\nlet wakeOffsetMs = flow.get(\"wakeOffsetMs\");\n\n// If the wake time hasn't yet been set, then comsume the\n// message so that the \"Calculated Bed Time\" doesn't display \"Invalid Date\"\nif (!wakeOffsetMs) {\n    msg.payload = \"\";\n    return msg;\n}\n\n// Calculate the bedtime\nconst LengthOfDayInMs = 24 * 60 * 60 * 1000;\nlet bedTimeOffsetMs = LengthOfDayInMs; // Add a full day so we can't return a negative bedtime value\nbedTimeOffsetMs += wakeOffsetMs;\nbedTimeOffsetMs -= sleepHours * 60 * 60 * 1000;\nbedTimeOffsetMs -= sleepMinutes * 60 * 1000;\nif (bedTimeOffsetMs > LengthOfDayInMs) // If bedtime has increased into the next day, then subtract the added day\n    bedTimeOffsetMs -= LengthOfDayInMs;\n\n// Store the new sleep sequence times\n// These times define the start of all the parts of the sleep sequence\n// (ex. when to turn on the night light, when to play the background noise, \n// when to play the \"relaxation technique\" audio, when to turn off the nightlight, etc)\n\nconst MinutesBeforeBedTimeToTurnOnNightlight = 60;\nconst MinutesBeforeBedTimeToStartPlayingBackgroundNoise = 60;\nconst MinutesBeforeBedTimeToStartPlayingRelaxationTechnique = 30;\nconst MinutesBeforeBedTimeToStartFadingOutNightlight = 30;\n\nflow.set(\"bedOffsetMs\", bedTimeOffsetMs);\nflow.set(\"nightlightOnOffsetMs\", adjustIfTimeHasMovedIntoPreviousDay(bedTimeOffsetMs - toMilliseconds(MinutesBeforeBedTimeToTurnOnNightlight)));\nflow.set(\"backgroundNoiseStartOffsetMs\", adjustIfTimeHasMovedIntoPreviousDay(bedTimeOffsetMs - toMilliseconds(MinutesBeforeBedTimeToStartPlayingBackgroundNoise)));\nflow.set(\"relaxationTechniqueStartOffsetMs\", adjustIfTimeHasMovedIntoPreviousDay(bedTimeOffsetMs - toMilliseconds(MinutesBeforeBedTimeToStartPlayingRelaxationTechnique)));\nflow.set(\"nightlightStartFadeOutOffsetMs\", adjustIfTimeHasMovedIntoPreviousDay(bedTimeOffsetMs - toMilliseconds(MinutesBeforeBedTimeToStartFadingOutNightlight)));\n\n// Get the hours/minutes/seconds component of the calculated bedtime so it can be displayed\nlet hoursSinceMidnight = Math.floor(bedTimeOffsetMs/(3600000 ));\nlet minutesPastTheHour = Math.floor((bedTimeOffsetMs - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((bedTimeOffsetMs / 1000) % 60);\n\n// Convert the bedtime into a Date object for the UI\nlet now = new Date();\nlet bedTime = new Date(now.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0));\nbedTime.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0);\nmsg.payload = bedTime.toLocaleTimeString();\n\nnode.log(\"Bedtime: \" + msg.payload);\nnode.log(\"Nightlight On Time: \" + formatMillisecondsAsHHMM(flow.get(\"nightlightOnOffsetMs\")));\nnode.log(\"Background Noise Start Time: \" + formatMillisecondsAsHHMM(flow.get(\"backgroundNoiseStartOffsetMs\")));\nnode.log(\"Relax Tech. Start Time: \" + formatMillisecondsAsHHMM(flow.get(\"relaxationTechniqueStartOffsetMs\")));\nnode.log(\"Nightlight Start Fade-out Time: \" + formatMillisecondsAsHHMM(flow.get(\"nightlightStartFadeOutOffsetMs\")));\nnode.status({text:msg.payload});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 340,
        "wires": [
            [
                "5b014783d9bec295"
            ]
        ]
    },
    {
        "id": "a5a9a4301ed1ef63",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Get sleep_hours",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sleep_hours",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 280,
        "wires": [
            [
                "642feed3c2f05fe2"
            ]
        ]
    },
    {
        "id": "becc5bce5ae4bd82",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Get sleep_minuntes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sleep_minutes",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 340,
        "wires": [
            [
                "b6fbdb6064efa9c1"
            ]
        ]
    },
    {
        "id": "73e3ea67164662ca",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Get nl_fadeout",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "nl_fadeout",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 480,
        "wires": [
            [
                "070c41b37d0cd57c"
            ]
        ]
    },
    {
        "id": "5e8fa079e3ea1996",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Get wu_fadein",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "wu_fadein",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 540,
        "wires": [
            [
                "0e8150641fc48f02"
            ]
        ]
    },
    {
        "id": "6ae2664b8ae145d6",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Set nl_fadeout",
        "rules": [
            {
                "t": "set",
                "p": "nl_fadeout",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "cf873a5906edc227",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Set wu_fadein",
        "rules": [
            {
                "t": "set",
                "p": "wu_fadein",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "83fc6d6d55d3a7b4",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "fd317cf2550f4b3f"
            ]
        ]
    },
    {
        "id": "fd317cf2550f4b3f",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Set Short Fade-out/in",
        "func": "// For easier debugging\nnode.log(\"Changing fade-out/in to 3 minutes\");\n\nflow.set(\"nl_fadeout\", 3);\nflow.set(\"wu_fadein\", 3);\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ce22fa1ecd1e9574",
        "type": "subflow:650a8f6f7f65f9de",
        "z": "1ef6a397c037ff41",
        "name": "",
        "env": [],
        "x": 1300,
        "y": 700,
        "wires": []
    },
    {
        "id": "6b05f551c7c9ac4b",
        "type": "trigger",
        "z": "1ef6a397c037ff41",
        "name": "",
        "op1": "100",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1060,
        "y": 700,
        "wires": [
            [
                "ce22fa1ecd1e9574"
            ]
        ]
    },
    {
        "id": "8d60236f30fc9a4c",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Enable/Disable Start/Stop",
        "func": "msg.payload = \"Start\";\n\n// Enable the Start button only if a wake time has been set\nlet wakeOffsetMs = flow.get(\"wakeOffsetMs\");\nmsg.enabled = (wakeOffsetMs && (wakeOffsetMs != 0));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1080,
        "wires": [
            [
                "fb730672fa535043"
            ]
        ]
    },
    {
        "id": "024a8df67441abe8",
        "type": "link out",
        "z": "1ef6a397c037ff41",
        "name": "",
        "links": [
            "4fe3d51140cc8cfa"
        ],
        "x": 1255,
        "y": 420,
        "wires": []
    },
    {
        "id": "4fe3d51140cc8cfa",
        "type": "link in",
        "z": "1ef6a397c037ff41",
        "name": "",
        "links": [
            "024a8df67441abe8",
            "0e474670d2be2268"
        ],
        "x": 75,
        "y": 1080,
        "wires": [
            [
                "8d60236f30fc9a4c"
            ]
        ]
    },
    {
        "id": "5e210ed8912afd60",
        "type": "comment",
        "z": "1ef6a397c037ff41",
        "name": "Main Application Tick & Logic",
        "info": "",
        "x": 180,
        "y": 940,
        "wires": []
    },
    {
        "id": "4b5971bcf78dab1d",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "setSystemState",
        "func": "\nlet status = flow.get('status');\nnode.log(`status ${status}`);\n\n// Disable the Start button if the wake time is not set\nlet wakeOffsetMs = flow.get(\"wakeOffsetMs\");\nif (!wakeOffsetMs || wakeOffsetMs == 0) {\n    msg.enabled = false;\n}\n\nif (status == \"stopped\") {\n    // Enable the REST Node's behavior\n    flow.set('status', \"starting\");\n    msg.payload = \"Stop\";\n} else {\n    // Disable the REST Node's behavior\n    flow.set('status', \"stopped\");\n    msg.payload = \"Start\";\n}\n\nreturn msg;\n\n/*\n\nif (!flow.get('settings').start_now) {\n    \n    switch (status) {\n        case 'running':\n        case 'waiting':\n            msg.payload = 'Start'; // Set new label\n            flow.set('status', 'stopped');\n            flow.set(\"pwm_wu\", 0);\n            flow.set(\"pwm_nl\", 0);\n            node.status({fill:\"red\",shape:\"dot\",text:\"stopped\"});\n            break;\n        \n        case 'stopped':\n        default:\n            msg.payload = 'Stop'; // Set new label\n            flow.set('status', 'waiting');\n            flow.set(\"pwm_wu\", 0);\n            flow.set(\"pwm_nl\", 0);\n            flow.set('wu_status', '');\n            //flow.set('initial_condition', {'nl':flow.get('nl_fadeout'), 'wu':flow.get('wu_fadein')});\n            node.status({fill:\"yellow\",shape:\"dot\",text:\"waiting\"});\n            break;\n    }\n}\n*/\n/*\nelse {\n    if (flow.get('status') === 'running') {\n        // STOP PROGRAM\n        msg.payload = 'Start'; // Set new label\n        flow.set('status', 'stopped');\n        flow.set(\"pwm_wu\", 0);\n        flow.set(\"pwm_nl\", 0);\n        node.status({fill:\"red\",shape:\"dot\",text:\"stopped\"});\n        \n    } else {\n        // START PROGRAM\n        msg.payload = 'Stop';\n        \n        // User clicked \"Start\" with the \"Start Now\" option selected\n        if (flow.get('settings').start_now) {\n            // So set the bedtime to the current time\n            let now = new Date();\n            let msSinceMidnight = now.getTime() - now.setHours(0,0,0,0);\n            flow.set(\"bedOffsetMs\", msSinceMidnight)\n        }\n        \n        flow.set(\"pwm_wu\", 0);\n        flow.set(\"pwm_nl\", 0);\n        //flow.set('initial_condition', {'nl':flow.get('nl_fadeout'), 'wu':flow.get('wu_fadein')});\n        flow.set('status', 'running');\n        flow.set('wu_status', '');\n        node.status({fill:\"green\",shape:\"dot\",text:\"running\"});\n    }\n}\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('status', 'stopped');",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1080,
        "wires": [
            [
                "fb730672fa535043",
                "ca38fd58a14bb803"
            ]
        ]
    },
    {
        "id": "6e36ebd0c5fc0d08",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Stop msg when Disabled",
        "func": "if (msg.enabled == false)\n    return; // Consume msg\nelse\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 420,
        "wires": [
            [
                "31d6a19c8d7c4470"
            ]
        ]
    },
    {
        "id": "cf3e582ab3de4ad4",
        "type": "ui_dropdown",
        "z": "1ef6a397c037ff41",
        "name": "background_noise",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "a81e9f61.3e719",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "background_noise",
        "topicType": "str",
        "className": "",
        "x": 550,
        "y": 1320,
        "wires": [
            [
                "4691212c7721451d",
                "e30a801aa243f8d0"
            ]
        ]
    },
    {
        "id": "761aae3db61ccf7a",
        "type": "ui_dropdown",
        "z": "1ef6a397c037ff41",
        "name": "awakening_sound",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "a81e9f61.3e719",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "awakening_sound",
        "topicType": "str",
        "className": "",
        "x": 550,
        "y": 1380,
        "wires": [
            [
                "4691212c7721451d"
            ]
        ]
    },
    {
        "id": "06937e969d611285",
        "type": "status",
        "z": "1ef6a397c037ff41",
        "name": "setSystemState",
        "scope": [
            "ea42445f.53f978"
        ],
        "x": 380,
        "y": 1720,
        "wires": [
            [
                "916b998df22073a4"
            ]
        ]
    },
    {
        "id": "916b998df22073a4",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Stop Audio",
        "func": "node.log(`msg.status ${JSON.stringify(msg.status)}`);\n\nif (msg.status.text == 'stopped') {\n    msg.payload = 'stop';\n    return msg;\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1720,
        "wires": [
            [
                "7a8ade61c005cf58"
            ]
        ]
    },
    {
        "id": "16472ad8d3aeb9e1",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "noSound",
        "payloadType": "str",
        "x": 160,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "4691212c7721451d",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "setSettings",
        "func": "var settings = flow.get('settings');\nswitch (msg.topic) {\n    \n    // These topics don't need any modification before saving\n    case 'awakening_volume':\n    case 'background_volume':\n    case 'relax_volume':\n        settings[msg.topic] = msg.payload;\n        break;\n        \n    default:\n        // User selected a sound file, so the path is important\n        //let folder = flow.get('audioDir') + msg.topic + '/';\n        //settings[msg.topic] = folder + msg.payload;\n        settings[msg.topic] = msg.payload;\n}\nnode.log(`${msg.topic} = ${settings[msg.topic]}`);\nflow.set('settings', settings);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "b15101d07ebe364b",
        "type": "comment",
        "z": "1ef6a397c037ff41",
        "name": "AudioSequenceControl",
        "info": "Remember to install \"mplayer\" or any other player listed [here](https://www.npmjs.com/package/play-sound). ",
        "x": 180,
        "y": 1660,
        "wires": []
    },
    {
        "id": "52fc5c86793aa14e",
        "type": "comment",
        "z": "1ef6a397c037ff41",
        "name": "AudioTracksSelection",
        "info": "To add an audio track:\n1 - Add the track to the corresponding folder in ~/.node-red/yogapod_audio/.\n2 - Copy the the full filepath.\n3 - Add a new option in the corresponding dropdown node. Paste the full filename as the \"value\" for the option.\n",
        "x": 180,
        "y": 1260,
        "wires": []
    },
    {
        "id": "90255c066cdb67ec",
        "type": "ui_text",
        "z": "1ef6a397c037ff41",
        "group": "a81e9f61.3e719",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Awakening Sound",
        "format": "",
        "layout": "row-left",
        "x": 1110,
        "y": 1340,
        "wires": []
    },
    {
        "id": "7a8ade61c005cf58",
        "type": "exec",
        "z": "1ef6a397c037ff41",
        "command": "killall omxplayer.bin",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "kill omxplayer",
        "x": 1040,
        "y": 1740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "7188f5c2898a8174",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Play Awakening",
        "func": "// Get the current time, in milliseconds since midnight\nlet now = new Date();\nnow = now.getTime() - now.setHours(0,0,0,0);\n\nlet wakeOffsetMs = flow.get('wakeOffsetMs');\n\nlet isVolumeTest = (msg.payload == \"test\");\n\n// Don't do anything if the Node isn't running OR No sound has been selected by the user\n// AND this is NOT a test of the volume\nif (((flow.get(\"status\") != 'started') || \n    (flow.get(\"settings\").awakening_sound === \"noSound\")) &&\n    (msg.payload != \"test\"))\n    return;\n\n// Only start playing the awakening sound if the current\n// time is within +/- 1 seconds of the wake time\n// so that the sound is only triggered once\nif ((Math.abs(wakeOffsetMs - now) < 500) || (msg.payload == \"test\")) {\n    \n    let volume = flow.get(\"settings\").awakening_volume;\n    let soundFile = flow.get(\"audioDir\") + \n                    \"awakening_sound/\" + \n                    flow.get(\"settings\").awakening_sound;\n    \n    node.log(`Playing ${soundFile}`);\n    \n    // Assamble the msg to send to the audio player\n    msg.options = (10 - volume) * -450; // Set volume, the only option\n    msg.options = msg.options + \" \" + soundFile;\n    msg.payload = \"start\";\n    node.log(\"ARGS \" + msg.options);\n    \n    if (isVolumeTest) {\n        // This is just a volume test\n        return [ msg, msg ];\n    } else {\n        // Play the full sound (i.e. not a volume test)\n        return [ msg, null ];\n    }\n}\n// Otherwise, consume the message\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1900,
        "wires": [
            [
                "2b7a3f5122fd41fd",
                "5c8545be6c61fd8a"
            ],
            [
                "0be6dd486395389c"
            ]
        ]
    },
    {
        "id": "59f4c7a8fedf01bf",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Play Background",
        "func": "// Get the current time, in milliseconds since midnight\nlet now = new Date();\nnow = now.getTime() - now.setHours(0,0,0,0);\n\nlet bedTimeOffsetMs = flow.get(\"bedOffsetMs\");\nlet backgroundNoiseStartOffsetMs = flow.get('backgroundNoiseStartOffsetMs');\nlet relaxationTechniqueStartOffsetMs = flow.get(\"relaxationTechniqueStartOffsetMs\");\n\nlet isVolumeTest = (msg.payload == \"test\");\nlet shouldRestartAfterRelaxFinished = (msg.payload == \"restart\");\nlet isFirstTickAfterStarting = flow.get(\"isFirstTickAfterStarting\");\n\n// Don't do anything if the Node isn't running OR No sound has been selected by the user\n// AND this is NOT a test of the volume\nif (((flow.get(\"status\") != 'started') || \n    (flow.get(\"settings\").background_noise === \"noSound\")) &&\n    (msg.payload != \"test\"))\n    return;\n\n// Only start playing the background sound if the current\n// time is within +/- 1 seconds of the wake time\n// so that the sound is only triggered once\n// OR\n// This is the first tick after the NODE's been started AND the current\n// time is already past the time at which the background noise should have started\n// OR\n// This is only a volume test\n// OR\n// The relaxation technique just finished playing and the background noise should be restarted\nif ((Math.abs(now - backgroundNoiseStartOffsetMs) < 500) || \n    (isFirstTickAfterStarting && (now > backgroundNoiseStartOffsetMs) && (((now < relaxationTechniqueStartOffsetMs || (flow.get(\"settings\").relax_technique === \"noSound\"))) || (now > bedTimeOffsetMs))) || \n    (msg.payload == \"test\") || \n    ((now > backgroundNoiseStartOffsetMs) && shouldRestartAfterRelaxFinished)) {\n    \n    let volume = flow.get(\"settings\").background_volume;\n    let soundFile = flow.get(\"audioDir\") + \n                    \"background_noise/\" + \n                    flow.get(\"settings\").background_noise;\n    \n    node.log(`Playing ${soundFile}`);\n    \n    // Assamble the msg to send to the audio player\n    msg.options = (10 - volume) * -450; // Set volume, the only option\n    msg.options = msg.options + \" \" + soundFile;\n    msg.payload = \"start\";\n    node.log(\"ARGS \" + msg.options);\n    \n    if (isVolumeTest) {\n        // This is just a volume test\n        return [ msg, msg ];\n    } else {\n        // Play the full sound (i.e. not a volume test)\n        return [ msg, null ];\n    }\n}\n// Otherwise, consume the message\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1860,
        "wires": [
            [
                "364c684d72d4e01c"
            ],
            [
                "0be6dd486395389c"
            ]
        ]
    },
    {
        "id": "ed5c106a2ffb5736",
        "type": "status",
        "z": "1ef6a397c037ff41",
        "name": "from setInitialValues",
        "scope": [
            "96e6514112588ba6"
        ],
        "x": 130,
        "y": 1360,
        "wires": [
            [
                "16834e68aaf024cf",
                "9df96ef78b6d724b",
                "4e4a978a53331644",
                "88cf7e56a6794beb"
            ]
        ]
    },
    {
        "id": "364c684d72d4e01c",
        "type": "exec",
        "z": "1ef6a397c037ff41",
        "command": "/home/pi/yogasleepnode-master/scripts/play-sound.sh",
        "addpay": "options",
        "append": "",
        "useSpawn": "false",
        "timer": "3000",
        "winHide": false,
        "oldrc": false,
        "name": "run omxplayer",
        "x": 960,
        "y": 1880,
        "wires": [
            [
                "85d8634aea8989e0"
            ],
            [],
            []
        ]
    },
    {
        "id": "85d8634aea8989e0",
        "type": "debug",
        "z": "1ef6a397c037ff41",
        "name": "1 omxplayer rc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1860,
        "wires": []
    },
    {
        "id": "cd8d6aeb97ba10e0",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "Clock",
        "payloadType": "date",
        "x": 150,
        "y": 1900,
        "wires": [
            [
                "59f4c7a8fedf01bf",
                "7188f5c2898a8174",
                "98ff3c144acf0d2e"
            ]
        ]
    },
    {
        "id": "b668462f89b06f67",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "stap!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 730,
        "y": 1680,
        "wires": [
            [
                "7a8ade61c005cf58"
            ]
        ]
    },
    {
        "id": "16834e68aaf024cf",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Get Backgrd volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "settings.background_volume",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1520,
        "wires": [
            [
                "d0562d31f012dd9e"
            ]
        ]
    },
    {
        "id": "9df96ef78b6d724b",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Pre-populate",
        "func": "let settings = flow.get(\"settings\");\n\n// Build background_noise message first\nlet settingsParts = settings.background_noise.split(\"/\");\nlet backgroundMsg = {payload: settingsParts[settingsParts.length - 1]};\n\n// Set the options for the \"Background Noise\" drop-down\nbackgroundMsg.options = \n[\n    { \"No Sound\":\"noSound\" },\n    { \"Convergence By S.Duncan\" : \"convergence-by-s.duncan-12-hours.mp3\" },\n    { \"Deep Serenity By S.Duncan\" : \"deep-serenity-by-s.duncan-12-hours.mp3\" },\n    { \"Nocturnal Crossings By S.Duncan\" : \"nocturnal-crossings-by-s.duncan-12-hour.mp3\" },\n    { \"Ocean Waves Big\" : \"ocean-waves-big-12-hours.mp3\" },\n    { \"Ponderings By S.Duncan\" : \"ponderings-by-s.duncan-12-hours.mp3\" },\n    { \"Heavy Rain\" : \"rain-heavy-12-hours.mp3\" },\n    { \"Light Rain\" : \"rain-light-12-hours.mp3\" },\n    { \"Refresh By S.Duncan\" : \"refresh-by-s.duncan-12-hours.mp3\" },\n    { \"Train Tracks\" : \"train-tracks-12-hours.mp3\" },\n    { \"Tranquil Calm\" : \"tranquil-calm-12-hours.mp3\" },\n    { \"White Noise\" : \"white-noise-12-hours.mp3\" },\n];\n// Set the default option\n//backgroundMsg.payload = \"noSound\";\n\n// Build awakening_sound message\nsettingsParts = settings.awakening_sound.split(\"/\");\nlet awakeningMsg = {payload: settingsParts[settingsParts.length - 1]};\n\n// Set the options for the \"Awakening Sound\" drop-down\nawakeningMsg.options = \n[\n    { \"No Sound\":\"noSound\" },\n    { \"Birds Chirping\" : \"birds-chirping-15-min.mp3\" },\n    { \"Deep Waking Meditation\" : \"deep-waking-meditation-24-min.mp3\" },\n    { \"Monk Om\" : \"monk-om-16-min.mp3\" },\n    { \"Morning Flute\" : \"morning-flute-17-min.mp3\" },\n    { \"Spiritual Awakening\" : \"spiritual-awakening-13-min.mp3\" },\n    { \"Stream Birds\" : \"stream-birds-15-minutes.mp3\" },\n];\n//awakeningMsg.payload = \"noSound\";\n\n// Build relax_technique message\nsettingsParts = settings.relax_technique.split(\"/\");\nlet relaxMsg = {payload: settingsParts[settingsParts.length - 1]};\n\n// Set the options for the \"Relaxation Technique\" drop-down\nrelaxMsg.options = \n[\n    { \"No Sound\":\"noSound\" },\n    { \"Week 2 Breath with Sound\" : \"week-2-breath-with-sound.m4a\" },\n    { \"Week 3 Box Breathing\" : \"week-3-box-breathing.m4a\" },\n    { \"Week 4 Alternate Nostril Breathing\" : \"week-4-alternate-nostril-breathing.m4a\" },\n    { \"Week 5 Ferris Wheel Breath\" : \"week-5-ferris-wheel-breath.m4a\" },\n    { \"Week 6 iRest (26 min)\" : \"week-6-irest-26-min.mp3\" },\n];\n//relaxMsg.payload = \"noSound\";\n\nreturn [ backgroundMsg, awakeningMsg, relaxMsg ];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1360,
        "wires": [
            [
                "cf3e582ab3de4ad4"
            ],
            [
                "761aae3db61ccf7a"
            ],
            [
                "3b0fee619399e4c5"
            ]
        ],
        "outputLabels": [
            "background_noise",
            "awakening_sound",
            ""
        ]
    },
    {
        "id": "4e4a978a53331644",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Get Awake volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "settings.awakening_volume",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1560,
        "wires": [
            [
                "c58291dba1908a5e"
            ]
        ]
    },
    {
        "id": "3b0fee619399e4c5",
        "type": "ui_dropdown",
        "z": "1ef6a397c037ff41",
        "name": "relax_technique",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "a81e9f61.3e719",
        "order": 20,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "relax_technique",
        "topicType": "str",
        "x": 540,
        "y": 1440,
        "wires": [
            [
                "4691212c7721451d"
            ]
        ]
    },
    {
        "id": "88cf7e56a6794beb",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Get Relax volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "settings.relax_volume",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1600,
        "wires": [
            [
                "c18705fddbfd0d2d"
            ]
        ]
    },
    {
        "id": "d88b7907febbbffd",
        "type": "ui_text",
        "z": "1ef6a397c037ff41",
        "group": "a81e9f61.3e719",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Background Noise",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 1110,
        "y": 1300,
        "wires": []
    },
    {
        "id": "502583070a9a7908",
        "type": "ui_text",
        "z": "1ef6a397c037ff41",
        "group": "a81e9f61.3e719",
        "order": 18,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Relaxation Technique",
        "format": "",
        "layout": "row-left",
        "x": 1120,
        "y": 1380,
        "wires": []
    },
    {
        "id": "5299c6790c2db46b",
        "type": "ui_button",
        "z": "1ef6a397c037ff41",
        "name": "",
        "group": "a81e9f61.3e719",
        "order": 16,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Test Awakening Sound Volume",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "test",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1860,
        "wires": [
            [
                "7188f5c2898a8174"
            ]
        ]
    },
    {
        "id": "973525263a9b4187",
        "type": "ui_button",
        "z": "1ef6a397c037ff41",
        "name": "",
        "group": "a81e9f61.3e719",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Test Background Noise Volume",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "test",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1820,
        "wires": [
            [
                "59f4c7a8fedf01bf"
            ]
        ]
    },
    {
        "id": "0be6dd486395389c",
        "type": "delay",
        "z": "1ef6a397c037ff41",
        "name": "Delay for Volume Test",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 820,
        "y": 1780,
        "wires": [
            [
                "7a8ade61c005cf58"
            ]
        ]
    },
    {
        "id": "d0562d31f012dd9e",
        "type": "ui_dropdown",
        "z": "1ef6a397c037ff41",
        "name": "background_volume",
        "label": "Volume",
        "tooltip": "Relative volume of background noise playback",
        "place": "Medium",
        "group": "a81e9f61.3e719",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "High",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Medium",
                "value": 6,
                "type": "num"
            },
            {
                "label": "Low",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "background_volume",
        "topicType": "str",
        "x": 600,
        "y": 1520,
        "wires": [
            [
                "4691212c7721451d",
                "e30a801aa243f8d0"
            ]
        ]
    },
    {
        "id": "c58291dba1908a5e",
        "type": "ui_dropdown",
        "z": "1ef6a397c037ff41",
        "name": "awakening_volume",
        "label": "Volume",
        "tooltip": "Relative volume of awakening sound volume",
        "place": "Medium",
        "group": "a81e9f61.3e719",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "High",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Medium",
                "value": 5,
                "type": "num"
            },
            {
                "label": "Low",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "awakening_volume",
        "topicType": "str",
        "x": 590,
        "y": 1560,
        "wires": [
            [
                "4691212c7721451d"
            ]
        ]
    },
    {
        "id": "b5a3b18af98b0f2a",
        "type": "ui_text",
        "z": "1ef6a397c037ff41",
        "d": true,
        "group": "9129e728.6627d8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "System Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 530,
        "y": 2060,
        "wires": []
    },
    {
        "id": "8233be8e22ad95e5",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Get Current Time",
        "func": "// Get the current system time and display it for the user\n// (in case the time is off and the user needs to correct it)\n\nlet msgTimeOnly = msg;\nlet msgDateAndTime = msg;\nlet now = new Date();\n\nmsgDateAndTime.payload = now.toLocaleTimeString('en-US');\nnow.setSeconds(0);\nmsgTimeOnly.payload = now.toTimeString();\n\nreturn [msgDateAndTime, msgTimeOnly];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2100,
        "wires": [
            [
                "b5a3b18af98b0f2a"
            ],
            [
                "15f1f191d714513a"
            ]
        ]
    },
    {
        "id": "5ac6e2ece189515f",
        "type": "exec",
        "z": "1ef6a397c037ff41",
        "command": "sudo /home/pi/yogasleepnode-master/scripts/set-time.sh",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Set Date/Time",
        "x": 1000,
        "y": 2100,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "cdc03f585201017f",
        "type": "comment",
        "z": "1ef6a397c037ff41",
        "name": "Setting System Time",
        "info": "",
        "x": 130,
        "y": 2040,
        "wires": []
    },
    {
        "id": "af58ab5d7786b746",
        "type": "ui_text_input",
        "z": "1ef6a397c037ff41",
        "name": "",
        "label": "Current Time",
        "tooltip": "Displays the current time. Edit then press enter to correct the time.",
        "group": "9129e728.6627d8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "time",
        "delay": "0",
        "topic": "",
        "sendOnBlur": true,
        "topicType": "str",
        "x": 650,
        "y": 2100,
        "wires": [
            [
                "ebfa0432c0d16c1d"
            ]
        ]
    },
    {
        "id": "6f8d85040a4848a6",
        "type": "inject",
        "z": "1ef6a397c037ff41",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2100,
        "wires": [
            [
                "8233be8e22ad95e5"
            ]
        ]
    },
    {
        "id": "ebfa0432c0d16c1d",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Parse",
        "func": "\nlet hoursSinceMidnight = Math.floor(msg.payload/(3600000 ));\nlet minutesPastTheHour = Math.floor((msg.payload - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((msg.payload / 1000) % 60);\n\nlet now = new Date();\nlet newDateTime = new Date(now.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0));\n\nmsg.payload = newDateTime.toLocaleDateString() + ' ' + newDateTime.toLocaleTimeString();\nnode.status({text:msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2100,
        "wires": [
            [
                "5ac6e2ece189515f"
            ]
        ]
    },
    {
        "id": "15f1f191d714513a",
        "type": "rbe",
        "z": "1ef6a397c037ff41",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 510,
        "y": 2100,
        "wires": [
            [
                "af58ab5d7786b746"
            ]
        ]
    },
    {
        "id": "c18705fddbfd0d2d",
        "type": "ui_dropdown",
        "z": "1ef6a397c037ff41",
        "name": "relax_volume",
        "label": "Volume",
        "tooltip": "Relative volume of relaxation technique volume",
        "place": "Medium",
        "group": "a81e9f61.3e719",
        "order": 22,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "High",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Medium",
                "value": 8,
                "type": "num"
            },
            {
                "label": "Low",
                "value": 6,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "relax_volume",
        "topicType": "str",
        "x": 570,
        "y": 1600,
        "wires": [
            [
                "4691212c7721451d"
            ]
        ]
    },
    {
        "id": "98ff3c144acf0d2e",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Play Relax",
        "func": "// Get the current time, in milliseconds since midnight\nlet now = new Date();\nnow = now.getTime() - now.setHours(0,0,0,0);\n\nlet bedTime = flow.get('bedOffsetMs');\nlet relaxationTechniqueStartOffsetMs = flow.get('relaxationTechniqueStartOffsetMs');\n\nlet isVolumeTest = (msg.payload == \"test\");\nlet isFirstTickAfterStarting = flow.get(\"isFirstTickAfterStarting\");\n\n// Don't do anything if the Node isn't running OR No sound has been selected by the user\n// AND this is NOT a test of the volume\nif (((flow.get(\"status\") != 'started') || \n    (flow.get(\"settings\").relax_technique === \"noSound\")) &&\n    (msg.payload != \"test\"))\n    return;\n\n// Only start playing the relaxation technique if the current\n// time is within +/- 1 seconds of the required start time\n// so that the sound is only triggered once\n// OR\n// This is the first tick after the NODE's been started AND the current\n// time is already past the time at which the relaxation technique should have started AND\n// the current time has not yet reached the bed time\n// OR\n// This is only a volume test\nif ((Math.abs(now - relaxationTechniqueStartOffsetMs) < 500) || \n    (isFirstTickAfterStarting && (now > relaxationTechniqueStartOffsetMs) && (now < bedTime)) || \n    (msg.payload == \"test\")) {\n\n    let volume = flow.get(\"settings\").relax_volume;\n    let soundFile = flow.get(\"audioDir\") + \n                    \"relax_technique/\" + \n                    flow.get(\"settings\").relax_technique;\n    \n    node.log(`Playing ${soundFile}`);\n    \n    // Assemble the msg to send to the audio player\n    msg.options = (10 - volume) * -450; // Set volume, the only option\n    msg.options = msg.options + \" \" + soundFile;\n    msg.payload = \"start\";\n    node.log(\"ARGS \" + msg.options);\n    \n    if (isVolumeTest) {\n        // This is just a volume test\n        return [ msg, msg ];\n    } else {\n        // Play the full sound (i.e. not a volume test)\n        return [ msg, null ];\n    }\n}\n// Otherwise, consume the message\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1940,
        "wires": [
            [
                "77fa84e449cd77f4",
                "2b7a3f5122fd41fd"
            ],
            [
                "0be6dd486395389c"
            ]
        ]
    },
    {
        "id": "e30a801aa243f8d0",
        "type": "debug",
        "z": "1ef6a397c037ff41",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1240,
        "wires": []
    },
    {
        "id": "809b48e855efb057",
        "type": "ui_button",
        "z": "1ef6a397c037ff41",
        "name": "",
        "group": "a81e9f61.3e719",
        "order": 23,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Test Relax Tech. Sound Volume",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "test",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1940,
        "wires": [
            [
                "98ff3c144acf0d2e"
            ]
        ]
    },
    {
        "id": "ca38fd58a14bb803",
        "type": "function",
        "z": "1ef6a397c037ff41",
        "name": "Handle Stopping Audio",
        "func": "let status = flow.get('status');\n// Only kill the audio if the NODE is stopped\n// to make sure the clicking \"STOP\" will stop any playing audio\nif (status == \"stopped\") {\n    return msg;\n} else {\n    // Consume the message\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1640,
        "wires": [
            [
                "7a8ade61c005cf58"
            ]
        ]
    },
    {
        "id": "f192509777947ba2",
        "type": "exec",
        "z": "1ef6a397c037ff41",
        "command": "/home/pi/yogasleepnode-master/scripts/play-sound.sh",
        "addpay": "options",
        "append": "",
        "useSpawn": "false",
        "timer": "3000",
        "winHide": false,
        "oldrc": false,
        "name": "run omxplayer",
        "x": 920,
        "y": 2000,
        "wires": [
            [
                "a04d626f9099800f"
            ],
            [],
            []
        ]
    },
    {
        "id": "a04d626f9099800f",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Restart BG Noise",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "restart",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 2020,
        "wires": [
            [
                "59f4c7a8fedf01bf"
            ]
        ]
    },
    {
        "id": "2b7a3f5122fd41fd",
        "type": "exec",
        "z": "1ef6a397c037ff41",
        "command": "killall omxplayer.bin",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "kill omxplayer",
        "x": 1140,
        "y": 1940,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5c8545be6c61fd8a",
        "type": "delay",
        "z": "1ef6a397c037ff41",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 740,
        "y": 1900,
        "wires": [
            [
                "364c684d72d4e01c"
            ]
        ]
    },
    {
        "id": "90cdf1b809cad929",
        "type": "ui_slider",
        "z": "1ef6a397c037ff41",
        "name": "",
        "label": "Wake Up Light Max Brightness",
        "tooltip": "Limits the maxinum brightness of the wake light (from 20% to 100%)",
        "group": "91c4859.9f3e5f8",
        "order": 9,
        "width": "0",
        "height": "0",
        "passthru": true,
        "outs": "end",
        "topic": "pwm_wu_max",
        "topicType": "str",
        "min": "20",
        "max": "100",
        "step": "5",
        "x": 550,
        "y": 860,
        "wires": [
            [
                "f5b7baa356901983"
            ]
        ]
    },
    {
        "id": "f5b7baa356901983",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Set Max",
        "rules": [
            {
                "t": "set",
                "p": "pwm_wu_max",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "4b073bc2f9881729",
        "type": "change",
        "z": "1ef6a397c037ff41",
        "name": "Get Max",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "pwm_wu_max",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 860,
        "wires": [
            [
                "90cdf1b809cad929"
            ]
        ]
    },
    {
        "id": "77fa84e449cd77f4",
        "type": "delay",
        "z": "1ef6a397c037ff41",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 760,
        "y": 2000,
        "wires": [
            [
                "f192509777947ba2"
            ]
        ]
    },
    {
        "id": "f0e97be702be0e23",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 960,
        "wires": [
            [
                "406cc2bc2f372440",
                "f0c75390fa0772e0"
            ]
        ]
    },
    {
        "id": "406cc2bc2f372440",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Fade Counter",
        "func": "const { FADE_ON, ON } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { state, light, max_brightness } = night_light\n\nif(msg.counter >= max_brightness) {\n    flow.set(light, {\n        ...night_light, state: ON\n    })\n    \n    return null\n}\n\nif(state !== FADE_ON)\n    return null\n\nmsg.counter++\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 960,
        "wires": [
            [
                "f0e97be702be0e23"
            ]
        ]
    },
    {
        "id": "91b733e0b0b35e42",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Fade On",
        "func": "const { FADE_ON } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { light, max_brightness, tick } = night_light\nconst counter = flow.get('night_light_current_brightness')\n\nconst light_config = {\n    ...night_light, state: FADE_ON\n}\n\nflow.set(light, light_config)\n\nmsg.counter = counter\nmsg.delay = tick\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 960,
        "wires": [
            [
                "406cc2bc2f372440"
            ]
        ]
    },
    {
        "id": "f0c75390fa0772e0",
        "type": "change",
        "z": "e1a40699ea85764e",
        "name": "Payload to Counter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "counter",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "night_light_current_brightness",
                "pt": "flow",
                "to": "counter",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1120,
        "wires": [
            [
                "69f5739f6c172707"
            ]
        ]
    },
    {
        "id": "e70d1942fa62036c",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Fade On)",
        "links": [
            "b2e7a0407aea6a2a",
            "48503f83daebe740",
            "bd5fce3febdf15d7",
            "0eb1bec83ebe053c",
            "8f4f3375b91bce77"
        ],
        "x": 35,
        "y": 960,
        "wires": [
            [
                "91b733e0b0b35e42"
            ]
        ]
    },
    {
        "id": "a1917919418e600f",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Fade Off",
        "func": "const { FADE_OFF } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { light, max_brightness, tick } = night_light\nconst counter = flow.get('night_light_current_brightness')\n\nconst light_config = {\n    ...night_light, state: FADE_OFF\n}\n\nflow.set(light, light_config)\n\nmsg.counter = counter\nmsg.delay = tick\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1280,
        "wires": [
            [
                "111b8044a4a2c809"
            ]
        ]
    },
    {
        "id": "111b8044a4a2c809",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Fade Counter",
        "func": "const { FADE_OFF, OFF } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { state, light, max_brightness } = night_light\n\nif(msg.counter <= 0) {\n    flow.set(light, {\n        ...night_light, state: OFF\n    })\n    \n    return null\n}\n\nif(state !== FADE_OFF)\n    return null\n\nmsg.counter--\nflow.set('night_light_current_brightness', msg.counter)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1280,
        "wires": [
            [
                "4de216b02ff64d27"
            ]
        ]
    },
    {
        "id": "99d636e4c54833d3",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Fade Off)",
        "links": [
            "960cc71d221701e5",
            "6e09738fba4f3349",
            "d9103be68bd22c99",
            "60a1514379cf765d",
            "ea31ccf57e478c46"
        ],
        "x": 35,
        "y": 1280,
        "wires": [
            [
                "a1917919418e600f"
            ]
        ]
    },
    {
        "id": "83e2f5a55a74d18b",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Off",
        "func": "const { OFF } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { light, max_brightness, tick } = night_light\nconst light_config = {\n    ...night_light, state: OFF\n}\n\nflow.set(light, light_config)\n\nmsg.counter = 0\nmsg.delay = tick\n\nflow.set('night_light_current_brightness', 0)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1220,
        "wires": [
            [
                "aa04e4d2977d7fff"
            ]
        ]
    },
    {
        "id": "7ca518af31291cf3",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle On",
        "func": "const { ON } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\n\nconst night_light = flow.get(NIGHT_LIGHT)\nconst { light, max_brightness, tick } = night_light\nconst light_config = {\n    ...night_light, state: ON\n}\n\nflow.set(light, light_config)\n\nmsg.counter = max_brightness\nmsg.delay = tick\nmsg.payload = light_config\n\nflow.set('night_light_current_brightness', max_brightness)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "c9ce0d6ad1cb5c50"
            ]
        ]
    },
    {
        "id": "aa04e4d2977d7fff",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "f0c75390fa0772e0"
            ]
        ]
    },
    {
        "id": "4de216b02ff64d27",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1280,
        "wires": [
            [
                "111b8044a4a2c809",
                "f0c75390fa0772e0"
            ]
        ]
    },
    {
        "id": "c9ce0d6ad1cb5c50",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1020,
        "wires": [
            [
                "f0c75390fa0772e0"
            ]
        ]
    },
    {
        "id": "437ad050babab08f",
        "type": "function",
        "z": "b7f24f4584cfd7ab",
        "name": "Toggle Fade Off",
        "func": "const { FADE_OFF } = flow.get('light_states')\n\nflow.set('night_light_state', FADE_OFF)\nmsg.counter = 100\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "1d2d711a8a0673e0"
            ]
        ]
    },
    {
        "id": "1d2d711a8a0673e0",
        "type": "function",
        "z": "b7f24f4584cfd7ab",
        "name": "Fade Counter",
        "func": "const { FADE_OFF, OFF } = flow.get('light_states')\nconst night_light_state = flow.get('night_light_state')\n\nif(msg.counter <= 0) {\n    flow.set('night_light_state', OFF)\n    \n    return null\n}\n\nif(night_light_state !== FADE_OFF)\n    return null\n\nmsg.counter--\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "3f54b697c73637aa"
            ]
        ]
    },
    {
        "id": "3f54b697c73637aa",
        "type": "delay",
        "z": "b7f24f4584cfd7ab",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "1d2d711a8a0673e0"
            ]
        ]
    },
    {
        "id": "103ef86aff47b2d5",
        "type": "websocket in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "server": "18c6c46d15594407",
        "client": "",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "db7057806dca5e74"
            ]
        ]
    },
    {
        "id": "62e6a71c4cb08a51",
        "type": "websocket out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "server": "18c6c46d15594407",
        "client": "",
        "x": 840,
        "y": 200,
        "wires": []
    },
    {
        "id": "35e4ae63f18d6679",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (On)",
        "links": [
            "81c8ed3d1f966e48",
            "5bde7861c88f93ce",
            "9161018b3a1cc506",
            "627d595124cde24e",
            "6e61cac404cd1fd5"
        ],
        "x": 35,
        "y": 1020,
        "wires": [
            [
                "7ca518af31291cf3"
            ]
        ]
    },
    {
        "id": "f6a3886c0d4dd377",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Off)",
        "links": [
            "25cd6159ea46fd09",
            "7f04188022e29c07",
            "6277dbf5345db5cb",
            "404746cedc16dfcd",
            "88f4bd92c145a669"
        ],
        "x": 35,
        "y": 1220,
        "wires": [
            [
                "83e2f5a55a74d18b"
            ]
        ]
    },
    {
        "id": "305ca6698a091b49",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Night Light Controls",
        "info": "",
        "x": 110,
        "y": 900,
        "wires": []
    },
    {
        "id": "1590337acdb5b8fc",
        "type": "debug",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 300,
        "wires": []
    },
    {
        "id": "80eb67c307aed82d",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "647a013a3e33688b"
        ],
        "x": 495,
        "y": 260,
        "wires": []
    },
    {
        "id": "647a013a3e33688b",
        "type": "link in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "80eb67c307aed82d"
        ],
        "x": 55,
        "y": 380,
        "wires": [
            [
                "1e74388b5934da98"
            ]
        ]
    },
    {
        "id": "1e74388b5934da98",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "audio",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "system",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 190,
        "y": 380,
        "wires": [
            [
                "e3eda576d486f91d"
            ],
            [
                "80a2e49cac03acfa"
            ],
            [
                "fd19c57a68bb1b9a"
            ],
            [
                "270a5f0227d80833"
            ]
        ]
    },
    {
        "id": "db7057806dca5e74",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "62e6a71c4cb08a51",
                "80eb67c307aed82d"
            ]
        ]
    },
    {
        "id": "415057ac6ad5cab1",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "605654e2f63916c5",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 360,
        "wires": []
    },
    {
        "id": "43f0b87cf04ea4de",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 400,
        "wires": []
    },
    {
        "id": "a9377bed695f3949",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 440,
        "wires": []
    },
    {
        "id": "e3eda576d486f91d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Send to Light Control",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 320,
        "wires": [
            [
                "415057ac6ad5cab1"
            ]
        ]
    },
    {
        "id": "80a2e49cac03acfa",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Send to Audio Control",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 360,
        "wires": [
            [
                "605654e2f63916c5"
            ]
        ]
    },
    {
        "id": "fd19c57a68bb1b9a",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Send to System Control",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 400,
        "wires": [
            [
                "43f0b87cf04ea4de"
            ]
        ]
    },
    {
        "id": "270a5f0227d80833",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Handle Default",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 440,
        "wires": [
            [
                "a9377bed695f3949"
            ]
        ]
    },
    {
        "id": "766cf8448e1566aa",
        "type": "trigger",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "op1": "false",
        "op2": "true",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 380,
        "y": 300,
        "wires": [
            [
                "1590337acdb5b8fc"
            ]
        ]
    },
    {
        "id": "1620cc6ba52e96c1",
        "type": "debug",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 360,
        "wires": []
    },
    {
        "id": "99890cfd06ef832a",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "From API (Lights)",
        "links": [
            "07e37e563f84c4ef",
            "144b0ce6de73da81",
            "6d92577b0a9c447d",
            "fe19b0d6879b5403"
        ],
        "x": 175,
        "y": 520,
        "wires": [
            [
                "379e9aab2c3b613a"
            ]
        ]
    },
    {
        "id": "6022aef9ff5d1e91",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 480,
        "wires": []
    },
    {
        "id": "a0d0ba5fe385674b",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "const { NIGHT_LIGHT, WAKE_LIGHT } = flow.get('lights') \nconst { FADE_ON, FADE_OFF } = flow.get('light_states')\n\nmsg.payload = {\n    light: WAKE_LIGHT,\n    max_brightness: 70,\n    state: FADE_OFF\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 580,
        "wires": [
            [
                "379e9aab2c3b613a"
            ]
        ]
    },
    {
        "id": "0189daa5f53e7eaf",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "Test API Call for Light Controls",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "a0d0ba5fe385674b"
            ]
        ]
    },
    {
        "id": "379e9aab2c3b613a",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Light State Handler",
        "func": "const { light } = msg.payload\nconst prev_light_state = flow.get(light) || {}\nconst new_light_state = {\n    ...prev_light_state, ...msg.payload\n}\n\nflow.set(light, new_light_state)\n\nmsg.payload = new_light_state\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "6022aef9ff5d1e91",
                "076a5ab5e051a561"
            ]
        ]
    },
    {
        "id": "723b2b9bac1a7185",
        "type": "file in",
        "z": "e1a40699ea85764e",
        "name": "Retrieve Lights Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 360,
        "wires": [
            [
                "c66d3893f2da6fef"
            ]
        ]
    },
    {
        "id": "3d590f59ba52ee01",
        "type": "catch",
        "z": "e1a40699ea85764e",
        "name": "If Lights Config Does Not Exist",
        "scope": [
            "723b2b9bac1a7185"
        ],
        "uncaught": false,
        "x": 140,
        "y": 420,
        "wires": [
            [
                "e2447a0bb398c179"
            ]
        ]
    },
    {
        "id": "b532aa6c3ea97ef1",
        "type": "file",
        "z": "e1a40699ea85764e",
        "name": "Create Lights Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 730,
        "y": 420,
        "wires": [
            [
                "c66d3893f2da6fef"
            ]
        ]
    },
    {
        "id": "76c66935f94f3d2f",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "b6b9c922ac0177ab",
                "4c149006d1618a77"
            ]
        ]
    },
    {
        "id": "b6b9c922ac0177ab",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Global Config",
        "func": "const NIGHT_LIGHT = {\n    light: 'NIGHT_LIGHT',\n    max_brightness: 100,\n    state: 'OFF',\n    tick: 100\n}\n\nconst WAKE_LIGHT = {\n    light: 'WAKE_LIGHT',\n    max_brightness: 100,\n    state: 'OFF',\n    tick: 100\n}\n\nconst NIGHT_SOUND = {\n    audio_file: null,\n    volume: 50,\n    max_volume: 100,\n    state: 'STOPPED',\n    sound: 'NIGHT_SOUND'\n}\n\nconst WAKE_SOUND = {\n    audio_file: null,\n    volume: 50,\n    max_volume: 100,\n    state: 'STOPPED',\n    sound: 'WAKE_SOUND'\n}\n\nconst RELAXATION_SOUND = {\n    audio_file: null,\n    volume: 50,\n    max_volume: 100,\n    state: 'STOPPED',\n    sound: 'RELAXATION_SOUND'\n}\n\nconst days_selected = {\n    mon: true,\n    tue: true,\n    wed: true,\n    thu: true,\n    fri: true,\n    sat: true,\n    sun: true\n}\n\nconst bedtime = {\n    type: 'bedtime', // Should be one of the values: bedtime, waketime, sunrise, sunset\n    time: '21:00', // Base time of the on and off offsets\n    light: {\n        onoffset: 0, // integer - The on time offset in minutes e.g. the light will turn on at the same time (0* minutes) that was set\n        offoffset: 60, // integer - The off time offset in minutes e.g. the light will turn off after 60 minutes of the time set\n        onpayload: {\n            ...NIGHT_LIGHT,\n            state: 'FADE_ON' // Can be one of the following values: ON, FADE_ON\n        },\n        offpayload: {\n            ...NIGHT_LIGHT,\n            state: 'FADE_OFF' // Can be one of the following values: OFF, FADE_OFF\n        },\n        days_selected\n    },\n    sound: {\n        onoffset: 0, // The on time offset in minutes e.g. the sound will start playing at the same time (0* minutes) that was set\n        offoffset: 420, // The off time offset in minutes e.g. the sound will stop playing after 420* minutes (7 hours) of the time set\n        onpayload: {\n            ...NIGHT_SOUND,\n            state: 'PLAYING' \n        },\n        offpayload: {\n            ...NIGHT_SOUND,\n            state: 'STOPPED'\n        },\n        days_selected\n    }\n}\n\nconst waketime = {\n    type: 'waketime',\n    time: '5:00',\n    light: {\n        onoffset: 0,\n        offoffset: 60,\n        onpayload: {\n            ...WAKE_LIGHT,\n            state: 'FADE_ON'\n        },\n        offpayload: {\n            ...WAKE_LIGHT,\n            state: 'FADE_OFF'\n        },\n        days_selected\n    },\n    sound: {\n        onoffset: 0,\n        offoffset: 60,\n        onpayload: {\n            ...WAKE_SOUND,\n            state: 'PLAYING' \n        },\n        offpayload: {\n            ...WAKE_SOUND,\n            state: 'STOPPED'\n        },\n        days_selected\n    }\n}\n\nconst sunrise = {\n    type: 'sunrise',\n    time: 'sunrise',\n    light: {\n        onoffset: 0,\n        offoffset: 60,\n        onpayload: {\n            ...WAKE_LIGHT,\n            state: 'FADE_ON'\n        },\n        offpayload: {\n            ...WAKE_LIGHT,\n            state: 'FADE_OFF'\n        },\n        days_selected\n    },\n    // sound: {\n    //     onoffset: 0,\n    //     offoffset: 60,\n    //     onpayload: {\n    //         ...WAKE_SOUND,\n    //         state: 'PLAYING' \n    //     },\n    //     offpayload: {\n    //         ...WAKE_SOUND,\n    //         state: 'STOPPED'\n    //     },\n    //     days_selected\n    // }\n}\n\nconst sunset = {\n    type: 'sunset',\n    time: 'sunset',\n    light: {\n        onoffset: 0,\n        offoffset: 60,\n        onpayload: {\n            ...NIGHT_LIGHT,\n            state: 'FADE_ON'\n        },\n        offpayload: {\n            ...NIGHT_LIGHT,\n            state: 'FADE_OFF'\n        },\n        days_selected\n    },\n    // sound: {\n    //     onoffset: 0,\n    //     offoffset: 60,\n    //     onpayload: {\n    //         ...WAKE_SOUND,\n    //         state: 'PLAYING' \n    //     },\n    //     offpayload: {\n    //         ...WAKE_SOUND,\n    //         state: 'STOPPED'\n    //     },\n    //     days_selected\n    // }\n}\n\nconst defaults_config = {\n    assets_dir: '/data/projects/REST_NODE/assets',\n    light: './defaults/light.config.json',\n    audio: './defaults/audio.config.json',\n    event: './defaults/event.config.json',\n    system: './defaults/system.config.json',\n    \n    default_light_config: {\n        NIGHT_LIGHT, WAKE_LIGHT\n    },\n    \n    default_audio_config: {\n        NIGHT_SOUND, WAKE_SOUND, RELAXATION_SOUND\n    },\n    \n    default_event_config: {\n        bedtime,\n        waketime,\n        sunrise,\n        sunset,\n        days_selected\n    },\n    \n    default_system_config: {\n        system_volume: 100,\n        audio_device: 'Headphone'\n    }\n}\n\nglobal.set('defaults_config', defaults_config)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "6c3ef41b9b35c8fd",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "FileName",
        "func": "const { light } = global.get('defaults_config')\n\nmsg.filename = light\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 360,
        "wires": [
            [
                "723b2b9bac1a7185"
            ]
        ]
    },
    {
        "id": "c66d3893f2da6fef",
        "type": "json",
        "z": "e1a40699ea85764e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "d39db940d012a468"
            ]
        ]
    },
    {
        "id": "e2447a0bb398c179",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Default Lights Config",
        "func": "const { default_light_config } = global.get('defaults_config')\n\nmsg.payload = default_light_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 420,
        "wires": [
            [
                "b532aa6c3ea97ef1"
            ]
        ]
    },
    {
        "id": "187d77bbac4e11b7",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "From API",
        "info": "",
        "x": 80,
        "y": 480,
        "wires": []
    },
    {
        "id": "31f728f22bd028c9",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Default Config (Lights)",
        "info": "",
        "x": 120,
        "y": 320,
        "wires": []
    },
    {
        "id": "0eb1bec83ebe053c",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "e70d1942fa62036c"
        ],
        "x": 875,
        "y": 100,
        "wires": []
    },
    {
        "id": "60a1514379cf765d",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "99d636e4c54833d3"
        ],
        "x": 875,
        "y": 140,
        "wires": []
    },
    {
        "id": "404746cedc16dfcd",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "f6a3886c0d4dd377"
        ],
        "x": 875,
        "y": 180,
        "wires": []
    },
    {
        "id": "59d2f5a0fe0738df",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Testing (Lights)",
        "info": "",
        "x": 100,
        "y": 20,
        "wires": []
    },
    {
        "id": "628f1ede24fe8779",
        "type": "trigger",
        "z": "e1a40699ea85764e",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 2240,
        "wires": [
            [
                "0d47c729aedd341c"
            ]
        ]
    },
    {
        "id": "89a5244ab48b41b7",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2240,
        "wires": [
            [
                "628f1ede24fe8779",
                "6ba7acfd5afc440a"
            ]
        ]
    },
    {
        "id": "0d47c729aedd341c",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 2240,
        "wires": []
    },
    {
        "id": "6ba7acfd5afc440a",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 2180,
        "wires": []
    },
    {
        "id": "54f5fc3d7401f62e",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Testing Section",
        "info": "",
        "x": 100,
        "y": 2140,
        "wires": []
    },
    {
        "id": "eea4862a45819507",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Wake Light Controls",
        "info": "",
        "x": 110,
        "y": 1360,
        "wires": []
    },
    {
        "id": "1ff8364eb592139e",
        "type": "i2c out",
        "z": "e1a40699ea85764e",
        "name": "Set Brightness",
        "busno": "1",
        "address": "8",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 540,
        "y": 2340,
        "wires": [
            [
                "f212dc56aacf6421"
            ]
        ]
    },
    {
        "id": "7b32d6db586424cc",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2340,
        "wires": [
            [
                "383f42983ad210bb"
            ]
        ]
    },
    {
        "id": "f212dc56aacf6421",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 2340,
        "wires": []
    },
    {
        "id": "383f42983ad210bb",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "msg.payload = 100\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2340,
        "wires": [
            [
                "1ff8364eb592139e"
            ]
        ]
    },
    {
        "id": "7b84691ef016a6ab",
        "type": "pi-gpiod out",
        "z": "39c947163c4b72c5",
        "name": "Night Light",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "18",
        "set": false,
        "level": "0",
        "out": "pwm",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "2000",
        "x": 330,
        "y": 100,
        "wires": []
    },
    {
        "id": "d479c906edc53339",
        "type": "pi-gpiod out",
        "z": "39c947163c4b72c5",
        "name": "Wake Light",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "23",
        "set": false,
        "level": "0",
        "out": "pwm",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "2000",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "108c9cd67defe8d0",
        "type": "link in",
        "z": "39c947163c4b72c5",
        "name": "Night Light (GPIO)",
        "links": [
            "69f5739f6c172707"
        ],
        "x": 55,
        "y": 100,
        "wires": [
            [
                "7b84691ef016a6ab",
                "a4fc78ecb023e5f0"
            ]
        ]
    },
    {
        "id": "3ae8dc738dda02fa",
        "type": "link in",
        "z": "39c947163c4b72c5",
        "name": "Wake Light (GPIO)",
        "links": [
            "ba1dff0b015dd369"
        ],
        "x": 575,
        "y": 100,
        "wires": [
            [
                "d479c906edc53339"
            ]
        ]
    },
    {
        "id": "69f5739f6c172707",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Control)",
        "links": [
            "108c9cd67defe8d0"
        ],
        "x": 875,
        "y": 1160,
        "wires": []
    },
    {
        "id": "0c073804e2d3024f",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "To Night Light",
        "info": "",
        "x": 910,
        "y": 1060,
        "wires": []
    },
    {
        "id": "20d962370170bda9",
        "type": "trigger",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 100,
        "wires": [
            [
                "d4a9d574e8776756"
            ]
        ]
    },
    {
        "id": "d4a9d574e8776756",
        "type": "file",
        "z": "024a5d7a17bad4d1",
        "name": "Update Light Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 810,
        "y": 160,
        "wires": [
            [
                "f48818170f588c63"
            ]
        ]
    },
    {
        "id": "015cb074f7b97d87",
        "type": "trigger",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 140,
        "wires": [
            [
                "d4a9d574e8776756"
            ]
        ]
    },
    {
        "id": "f48818170f588c63",
        "type": "debug",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 240,
        "wires": []
    },
    {
        "id": "e22c19358ff80035",
        "type": "switch",
        "z": "024a5d7a17bad4d1",
        "name": "Select Config File",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "audio",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "event",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "system",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "5e7adbb9acd218dd"
            ],
            [
                "ca7b3f2c024562b1"
            ],
            [
                "f430cccf82ec05a3"
            ],
            [
                "6a7c4e44cfb9a01d"
            ]
        ]
    },
    {
        "id": "39d1d42028adc83d",
        "type": "comment",
        "z": "39c947163c4b72c5",
        "name": "Lights (Hardware)",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "94188c21eddb1250",
        "type": "comment",
        "z": "39c947163c4b72c5",
        "name": "Audio (Hardware)",
        "info": "",
        "x": 120,
        "y": 240,
        "wires": []
    },
    {
        "id": "55de0a99484f7e4c",
        "type": "comment",
        "z": "39c947163c4b72c5",
        "name": "Input Buttons (Hardware)",
        "info": "",
        "x": 150,
        "y": 380,
        "wires": []
    },
    {
        "id": "2895fb3018f77f98",
        "type": "pi-gpiod in",
        "z": "39c947163c4b72c5",
        "name": "System Reset",
        "host": "172.17.0.1",
        "port": 8888,
        "pin": "24",
        "intype": "PUD_DOWN",
        "debounce": "25",
        "read": false,
        "x": 110,
        "y": 440,
        "wires": [
            [
                "5397f0d28c60d06a"
            ]
        ]
    },
    {
        "id": "5397f0d28c60d06a",
        "type": "link out",
        "z": "39c947163c4b72c5",
        "name": "System Reset (Hardware)",
        "links": [
            "5ec14e1ee0ad2eee"
        ],
        "x": 375,
        "y": 440,
        "wires": []
    },
    {
        "id": "5ec14e1ee0ad2eee",
        "type": "link in",
        "z": "4fcd3dd2df70f0c8",
        "name": "System Reset",
        "links": [
            "5397f0d28c60d06a"
        ],
        "x": 175,
        "y": 300,
        "wires": [
            [
                "766cf8448e1566aa",
                "1620cc6ba52e96c1"
            ]
        ]
    },
    {
        "id": "ec7beb856b75bc82",
        "type": "link in",
        "z": "024a5d7a17bad4d1",
        "name": "Update Lights / Audio Config",
        "links": [
            "064db609db367336"
        ],
        "x": 195,
        "y": 100,
        "wires": [
            [
                "e22c19358ff80035"
            ]
        ]
    },
    {
        "id": "a74e7bbe2c2e8154",
        "type": "comment",
        "z": "024a5d7a17bad4d1",
        "name": "Update Config File",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "5e7adbb9acd218dd",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Audio Config",
        "func": "const { audio: audio_config } = global.get('defaults_config')\nconst { audio } = msg.payload\n\nmsg.payload = audio\nmsg.filename = audio_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "20d962370170bda9"
            ]
        ]
    },
    {
        "id": "ca7b3f2c024562b1",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Light Config",
        "func": "const { light: light_config } = global.get('defaults_config')\nconst { light } = msg.payload\n\nmsg.payload = light\nmsg.filename = light_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "015cb074f7b97d87"
            ]
        ]
    },
    {
        "id": "180795f0312fe096",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "Prepare Data for Storage",
        "info": "",
        "x": 130,
        "y": 1960,
        "wires": []
    },
    {
        "id": "b959eed8d98a5acb",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Get Current Light Config",
        "func": "const { NIGHT_LIGHT: night_light, WAKE_LIGHT: wake_light } = flow.get('lights')\nconst NIGHT_LIGHT = flow.get(night_light)\nconst WAKE_LIGHT = flow.get(wake_light)\n\nmsg.payload = {\n    NIGHT_LIGHT, WAKE_LIGHT\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2020,
        "wires": [
            [
                "1539bc275456eee8"
            ]
        ]
    },
    {
        "id": "1539bc275456eee8",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Compile Light Config",
        "func": "const { NIGHT_LIGHT, WAKE_LIGHT } = msg.payload\n\nmsg.payload = {\n    light: {\n        NIGHT_LIGHT, WAKE_LIGHT\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 2020,
        "wires": [
            [
                "a2bd95418d6120d8",
                "7e2ac3fcc945b0ad"
            ]
        ]
    },
    {
        "id": "99a65e88efcd3084",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "076a5ab5e051a561",
            "1b82a8d02f7d982c",
            "e7fb127bc0694c12"
        ],
        "x": 35,
        "y": 2020,
        "wires": [
            [
                "b959eed8d98a5acb"
            ]
        ]
    },
    {
        "id": "a2bd95418d6120d8",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [],
        "x": 915,
        "y": 2020,
        "wires": []
    },
    {
        "id": "076a5ab5e051a561",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "99a65e88efcd3084",
            "c36c3b8450aaf67a"
        ],
        "x": 635,
        "y": 520,
        "wires": []
    },
    {
        "id": "7e2ac3fcc945b0ad",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2060,
        "wires": []
    },
    {
        "id": "3663a760b9cc022e",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2260,
        "wires": [
            [
                "cd660cc58e12663c"
            ]
        ]
    },
    {
        "id": "cd660cc58e12663c",
        "type": "exec",
        "z": "427808241d304283",
        "command": "date",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 310,
        "y": 2260,
        "wires": [
            [
                "ea43c528df705993"
            ],
            [
                "dd6fb2a1a86b2977"
            ],
            [
                "b3cc693c8e39187b"
            ]
        ]
    },
    {
        "id": "ea43c528df705993",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2220,
        "wires": []
    },
    {
        "id": "dd6fb2a1a86b2977",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2260,
        "wires": []
    },
    {
        "id": "b3cc693c8e39187b",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2300,
        "wires": []
    },
    {
        "id": "d29f913641706a93",
        "type": "inject",
        "z": "427808241d304283",
        "name": "On Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "db18fd732dfa43d7"
            ]
        ]
    },
    {
        "id": "ed362dbd9b36c014",
        "type": "function",
        "z": "427808241d304283",
        "name": "Initialize Constants",
        "func": "const events = msg.payload\nconst date = new Date()\nconst timezone_offset = date.getTimezoneOffset()\n\nconst lights = {\n    NIGHT_LIGHT: 'NIGHT_LIGHT',\n    WAKE_LIGHT: 'WAKE_LIGHT'\n}\n\nconst light_states = {\n    OFF: 'OFF',\n    FADE_ON: 'FADE_ON',\n    FADE_OFF: 'FADE_OFF',\n    ON: 'ON'\n}\n\nconst audio = {\n    NIGHT_SOUND: 'NIGHT_SOUND',\n    WAKE_SOUND: 'WAKE_SOUND'\n}\n\nconst audio_player_states = {\n    PAUSED: 'PAUSED',\n    PLAYING: 'PLAYING',\n    STOPPED: 'STOPPED',\n    RESUMED: 'RESUMED'\n}\n\nflow.set('events', events)\nflow.set('timezone_offset', timezone_offset)\n\nflow.set('lights', lights)\nflow.set('light_states', light_states)\n\nflow.set('audio', audio)\nflow.set('audio_player_states', audio_player_states)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": []
    },
    {
        "id": "db18fd732dfa43d7",
        "type": "function",
        "z": "427808241d304283",
        "name": "FileName",
        "func": "const { event } = global.get('defaults_config')\n\nmsg.filename = event\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            [
                "6f801ba2e4fac0ba"
            ]
        ]
    },
    {
        "id": "6f801ba2e4fac0ba",
        "type": "file in",
        "z": "427808241d304283",
        "name": "Retrieve Event Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "aa81ecef31a7e3c5"
            ]
        ]
    },
    {
        "id": "aa81ecef31a7e3c5",
        "type": "json",
        "z": "427808241d304283",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "ed362dbd9b36c014"
            ]
        ]
    },
    {
        "id": "a38d84f617594c64",
        "type": "catch",
        "z": "427808241d304283",
        "name": "If Event Config Does Not Exist",
        "scope": [
            "6f801ba2e4fac0ba"
        ],
        "uncaught": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "7d8a557427f39da0"
            ]
        ]
    },
    {
        "id": "7d8a557427f39da0",
        "type": "function",
        "z": "427808241d304283",
        "name": "Default Event Config",
        "func": "const { default_event_config } = global.get('defaults_config')\n\nmsg.payload = default_event_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "d31ff6390836f524"
            ]
        ]
    },
    {
        "id": "d31ff6390836f524",
        "type": "file",
        "z": "427808241d304283",
        "name": "Create Event Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 140,
        "wires": [
            [
                "ed362dbd9b36c014"
            ]
        ]
    },
    {
        "id": "4f1d443dfd155458",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Initialize Event Scheduler",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "0efb101deac18438",
        "type": "inject",
        "z": "4fcd3dd2df70f0c8",
        "name": "On Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "9a692eb9368947d8"
            ]
        ]
    },
    {
        "id": "cf8d672130ac567c",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "Initialize Constants",
        "func": "const system_config = msg.payload\n\nflow.set('system_config', system_config)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": []
    },
    {
        "id": "9a692eb9368947d8",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "FileName",
        "func": "const { system } = global.get('defaults_config')\n\nmsg.filename = system\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            [
                "76c31bda66027c24"
            ]
        ]
    },
    {
        "id": "76c31bda66027c24",
        "type": "file in",
        "z": "4fcd3dd2df70f0c8",
        "name": "Retrieve System Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 450,
        "y": 80,
        "wires": [
            [
                "0d9ef61f4a7f9dd9"
            ]
        ]
    },
    {
        "id": "0d9ef61f4a7f9dd9",
        "type": "json",
        "z": "4fcd3dd2df70f0c8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "cf8d672130ac567c"
            ]
        ]
    },
    {
        "id": "839d39a22b2664c3",
        "type": "catch",
        "z": "4fcd3dd2df70f0c8",
        "name": "If System Config Does Not Exist",
        "scope": [
            "76c31bda66027c24"
        ],
        "uncaught": false,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "6627babede3ed239"
            ]
        ]
    },
    {
        "id": "6627babede3ed239",
        "type": "function",
        "z": "4fcd3dd2df70f0c8",
        "name": "Default System Config",
        "func": "const { default_system_config } = global.get('defaults_config')\n\nmsg.payload = default_system_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "f6a6960f282e0aab"
            ]
        ]
    },
    {
        "id": "f6a6960f282e0aab",
        "type": "file",
        "z": "4fcd3dd2df70f0c8",
        "name": "Create System Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 140,
        "wires": [
            [
                "cf8d672130ac567c"
            ]
        ]
    },
    {
        "id": "39c4db23c13ac5d4",
        "type": "comment",
        "z": "4fcd3dd2df70f0c8",
        "name": "Initialize System Controls",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "c93afaa03282fed6",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "On Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "cbe31ffaf8de222e"
            ]
        ]
    },
    {
        "id": "b5468e96fe8f2a22",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Initialize Constants",
        "func": "const { NIGHT_SOUND, WAKE_SOUND } = msg.payload\n\nconst audio = {\n    NIGHT_SOUND: 'NIGHT_SOUND',\n    WAKE_SOUND: 'WAKE_SOUND'\n}\n\nconst audio_player_states = {\n    PAUSED: 'PAUSED',\n    PLAYING: 'PLAYING',\n    STOPPED: 'STOPPED',\n    RESUMED: 'RESUMED'\n}\n\nflow.set('audio', audio)\nflow.set('audio_player_states', audio_player_states)\n\nflow.set(audio.NIGHT_SOUND, NIGHT_SOUND)\nflow.set(audio.WAKE_SOUND, WAKE_SOUND)\n\nflow.set('current_audio_playing', null)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": []
    },
    {
        "id": "cbe31ffaf8de222e",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "FileName",
        "func": "const { audio } = global.get('defaults_config')\n\nmsg.filename = audio\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "a6c9850fdc2f3179"
            ]
        ]
    },
    {
        "id": "a6c9850fdc2f3179",
        "type": "file in",
        "z": "56ae43efe9a5b4d3",
        "name": "Retrieve Audio Config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 340,
        "wires": [
            [
                "95c3b798b0bdc8e2"
            ]
        ]
    },
    {
        "id": "95c3b798b0bdc8e2",
        "type": "json",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 340,
        "wires": [
            [
                "b5468e96fe8f2a22"
            ]
        ]
    },
    {
        "id": "5f766748e9cc933f",
        "type": "catch",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Config Does Not Exist",
        "scope": [
            "a6c9850fdc2f3179"
        ],
        "uncaught": false,
        "x": 140,
        "y": 400,
        "wires": [
            [
                "313656ae5e072080"
            ]
        ]
    },
    {
        "id": "313656ae5e072080",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Default Audio Config",
        "func": "const { default_audio_config } = global.get('defaults_config')\n\nmsg.payload = default_audio_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "684485ae3297fb89"
            ]
        ]
    },
    {
        "id": "684485ae3297fb89",
        "type": "file",
        "z": "56ae43efe9a5b4d3",
        "name": "Create Audio Config File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 400,
        "wires": [
            [
                "b5468e96fe8f2a22"
            ]
        ]
    },
    {
        "id": "bdda5f13ef7b859d",
        "type": "exec",
        "z": "56ae43efe9a5b4d3",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get Available Assets Dir",
        "x": 510,
        "y": 540,
        "wires": [
            [
                "96e40cd73607b259"
            ],
            [],
            []
        ]
    },
    {
        "id": "602c94c223cbfeb2",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "On Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "b66df60352b322a4"
            ]
        ]
    },
    {
        "id": "b66df60352b322a4",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Assets Folder",
        "func": "const { assets_dir } = global.get('defaults_config')\nconst list_all_dirs = ['cd', assets_dir, '&&', 'ls']\n\nmsg.payload = list_all_dirs.join(' ')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 540,
        "wires": [
            [
                "bdda5f13ef7b859d"
            ]
        ]
    },
    {
        "id": "96e40cd73607b259",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "List All Available Dirs ",
        "func": "const { assets_dir } = global.get('defaults_config')\nconst dirs_list = msg.payload.split('\\n').filter( dir => dir )\nconst dirs = {}\n\ndirs_list.forEach((dir) => {\n    dirs[dir] = `${ assets_dir }/${dir}`\n})\n\nmsg.payload = dirs\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 540,
        "wires": [
            [
                "a1129c5118d5ddf3"
            ]
        ]
    },
    {
        "id": "a1129c5118d5ddf3",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "a82335699ae83965"
        ],
        "x": 935,
        "y": 540,
        "wires": []
    },
    {
        "id": "a82335699ae83965",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "a1129c5118d5ddf3"
        ],
        "x": 35,
        "y": 600,
        "wires": [
            [
                "8f95c813886203df"
            ]
        ]
    },
    {
        "id": "98c3fccf36890e09",
        "type": "exec",
        "z": "56ae43efe9a5b4d3",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get Audio Files",
        "x": 580,
        "y": 600,
        "wires": [
            [
                "61788fd3ef25a635"
            ],
            [],
            []
        ]
    },
    {
        "id": "8f95c813886203df",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Initialize Get",
        "func": "const dirs_list = msg.payload\n\nmsg.dirs = dirs_list \nmsg.counter = 0\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 600,
        "wires": [
            [
                "3e3046e22d35507b"
            ]
        ]
    },
    {
        "id": "3e3046e22d35507b",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Audio Files Command",
        "func": "const dirs_list = msg.dirs\nconst keys = Object.keys(dirs_list)\n\nif(!keys[msg.counter])\n    return null\n\nconst path = dirs_list[ keys[msg.counter] ]\nconst command = `cd ${path} && ls`\n\nmsg.payload = command\n\nmsg.counter++\nmsg.keys_length = keys.length\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 600,
        "wires": [
            [
                "98c3fccf36890e09"
            ]
        ]
    },
    {
        "id": "61788fd3ef25a635",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "Continue or End Loop",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "keys_length",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 780,
        "y": 600,
        "wires": [
            [
                "3e3046e22d35507b",
                "83a9855aacd469f3"
            ]
        ]
    },
    {
        "id": "63eab9a095401ba2",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Store Audio Assets",
        "func": "const { dirs, counter } = msg\nconst previous_assets = flow.get('audio_assets') || {}\nconst keys = Object.keys(dirs)\nconst audio_assets = msg.payload\n\nflow.set('audio_assets', {\n    ...previous_assets, [ keys[counter - 1] ]: audio_assets\n})",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 660,
        "wires": []
    },
    {
        "id": "877d10eea80694f7",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "List All Available Audio",
        "func": "const { assets_dir } = global.get('defaults_config')\nconst { counter, dirs } = msg\nconst keys = Object.keys(dirs)\nconst audio_list = msg.payload.split('\\n').filter( audio => audio )\nconst audio_files = {}\n\naudio_list.forEach((audio) => {\n    audio_files[audio] = `${ assets_dir }/${ keys[counter - 1] }/${ audio }`\n})\n\nmsg.payload = audio_files\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 660,
        "wires": [
            [
                "63eab9a095401ba2"
            ]
        ]
    },
    {
        "id": "83a9855aacd469f3",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "9bed374137c02de5"
        ],
        "x": 935,
        "y": 600,
        "wires": []
    },
    {
        "id": "9bed374137c02de5",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "83a9855aacd469f3"
        ],
        "x": 35,
        "y": 660,
        "wires": [
            [
                "877d10eea80694f7"
            ]
        ]
    },
    {
        "id": "52eb4e7a40d8147b",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "From API (Lights)",
        "links": [
            "af7443700a2c537c"
        ],
        "x": 35,
        "y": 780,
        "wires": [
            [
                "9af2857d9a1be37c"
            ]
        ]
    },
    {
        "id": "86d20a5355d39ce3",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio State Handler",
        "func": "const { audio } = msg.payload\nconst audio_state = flow.get(audio) || {}\nconst new_audio_state = {\n    ...audio_state, ...msg.payload\n}\n\nflow.set(audio, new_audio_state)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 760,
        "wires": [
            [
                "8aa8457966c1294f"
            ]
        ]
    },
    {
        "id": "a64a0f9be8ac2820",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "From API",
        "info": "",
        "x": 80,
        "y": 720,
        "wires": []
    },
    {
        "id": "5bcd5493bad182cc",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Initialize Audio Controls",
        "info": "",
        "x": 120,
        "y": 300,
        "wires": []
    },
    {
        "id": "d10e582aeb62e9f0",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "List Available Audio Files",
        "info": "",
        "x": 130,
        "y": 480,
        "wires": []
    },
    {
        "id": "8d54343c273a8128",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Audio Volume Command",
        "func": "const audio_device = msg.audio_device || 'Headphone'\n\nmsg.payload = `amixer -M set ${ audio_device } ${ msg.payload }%`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1280,
        "wires": [
            [
                "397d62e439616946"
            ]
        ],
        "icon": "font-awesome/fa-volume-up"
    },
    {
        "id": "397d62e439616946",
        "type": "exec",
        "z": "56ae43efe9a5b4d3",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Execute Volume Command",
        "x": 640,
        "y": 1280,
        "wires": [
            [
                "efdf05c1fd0eb8b2"
            ],
            [
                "2b844dbfbc780a53"
            ],
            [
                "dcb72c7e2448a69b"
            ]
        ]
    },
    {
        "id": "9a498067d2130e99",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Volume Adjustments",
        "info": "",
        "x": 110,
        "y": 1240,
        "wires": []
    },
    {
        "id": "dcd89f3eddf44c04",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Testing Section",
        "info": "",
        "x": 100,
        "y": 20,
        "wires": []
    },
    {
        "id": "ee743279d14d6d2f",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Low Volume",
        "props": [
            {
                "p": "payload.volume",
                "v": "33",
                "vt": "num"
            },
            {
                "p": "payload.audio",
                "v": "audio.WAKE_SOUND",
                "vt": "flow"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "4095d36df0bf7800"
            ]
        ]
    },
    {
        "id": "b944c218dd1d80cf",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Medium Volume",
        "props": [
            {
                "p": "payload.volume",
                "v": "66",
                "vt": "num"
            },
            {
                "p": "payload.audio",
                "v": "audio.WAKE_SOUND",
                "vt": "flow"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "4095d36df0bf7800"
            ]
        ]
    },
    {
        "id": "cd8b0f2964068165",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "High Volume",
        "props": [
            {
                "p": "payload.volume",
                "v": "100",
                "vt": "num"
            },
            {
                "p": "payload.audio",
                "v": "audio.WAKE_SOUND",
                "vt": "flow"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "4095d36df0bf7800"
            ]
        ]
    },
    {
        "id": "4095d36df0bf7800",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "acf064936cbe206e"
        ],
        "x": 295,
        "y": 100,
        "wires": []
    },
    {
        "id": "dcc3e4b965949c44",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "0ff74578e0a81cab",
            "49568c675f1055e9"
        ],
        "x": 35,
        "y": 1280,
        "wires": [
            [
                "7d8f844d95a0a057"
            ]
        ]
    },
    {
        "id": "8aa8457966c1294f",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 760,
        "wires": []
    },
    {
        "id": "7d8f844d95a0a057",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Extract Volume",
        "func": "const { volume, audio } = msg.payload\nconst audio_state = flow.get(audio)\n\nmsg.payload = volume\n\nflow.set(audio, {\n    ...audio_state, volume\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1280,
        "wires": [
            [
                "8d54343c273a8128",
                "f76419f21e496097"
            ]
        ]
    },
    {
        "id": "f9727f7f7488862d",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio Player",
        "info": "",
        "x": 90,
        "y": 1420,
        "wires": []
    },
    {
        "id": "1b563d9b71af7068",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "66cbd01c27b85f84",
            "51b7c7c047fd2605",
            "0ff74578e0a81cab",
            "97d940100fd6c4e4",
            "f8ba3ca312b725df",
            "3c33859bf78ed215",
            "8e6a6d9d5f9d1403",
            "819ffe8c2a50daa4"
        ],
        "x": 35,
        "y": 1480,
        "wires": [
            [
                "ab91ca2c5c750e95"
            ]
        ]
    },
    {
        "id": "7fbe952ddacdef3c",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Play Audio",
        "func": "const { audio_file } = msg.payload\nmsg.audio_obj = msg.payload\n\nif(audio_file) {\n    msg.payload = 'start'\n    msg.audioURI = audio_file\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1420,
        "wires": [
            [
                "5a44044c38f6a2b7"
            ]
        ]
    },
    {
        "id": "24365bd64551e5cd",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1740,
        "wires": []
    },
    {
        "id": "d3c721f30dc405fe",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio End",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 1700,
        "wires": [
            [
                "24365bd64551e5cd",
                "835f3cbfbff328bf"
            ]
        ]
    },
    {
        "id": "835f3cbfbff328bf",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Reset Audio",
        "func": "flow.set('current_audio_playing', null)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b47fadcb378c2227",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "Toggle Audio State",
        "property": "payload.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "audio_player_states.PLAYING",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "audio_player_states.PAUSED",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "audio_player_states.STOPPED",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "audio_player_states.RESUMED",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 350,
        "y": 1480,
        "wires": [
            [
                "7fbe952ddacdef3c"
            ],
            [
                "64d5954e3b593755"
            ],
            [
                "b3be279cfd75a974"
            ],
            [
                "86c26390856a8017"
            ]
        ]
    },
    {
        "id": "64d5954e3b593755",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Pause Audio",
        "func": "msg.payload = 'pause'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "c3907ce3b315e7d0"
            ]
        ]
    },
    {
        "id": "c3907ce3b315e7d0",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "87a8be781c772fe9"
        ],
        "x": 895,
        "y": 1540,
        "wires": []
    },
    {
        "id": "87a8be781c772fe9",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "c3907ce3b315e7d0",
            "3c25c445887cca7c"
        ],
        "x": 35,
        "y": 1700,
        "wires": [
            [
                "837e2a02b8b3cb89"
            ]
        ]
    },
    {
        "id": "b3be279cfd75a974",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Stop Audio",
        "func": "msg.payload = 'stop'\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1580,
        "wires": [
            [
                "c3907ce3b315e7d0"
            ]
        ]
    },
    {
        "id": "86c26390856a8017",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Resume Audio",
        "func": "msg.payload = 'resume'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1620,
        "wires": [
            [
                "c3907ce3b315e7d0"
            ]
        ]
    },
    {
        "id": "140b30a66cedb943",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Play Sound",
        "func": "const { PLAYING } = flow.get('audio_player_states')\nconst { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio')\nconst audio_state = flow.get(WAKE_SOUND)\n\nflow.set(WAKE_SOUND, {\n    ...audio_state, state: PLAYING\n})\n\nmsg.payload = {\n    audio: WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 60,
        "wires": [
            [
                "819ffe8c2a50daa4"
            ]
        ]
    },
    {
        "id": "4c81fcc60674a9e1",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 480,
        "y": 60,
        "wires": [
            [
                "140b30a66cedb943"
            ]
        ]
    },
    {
        "id": "dd19c29ede9b837b",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Pause Sound",
        "func": "const { PAUSED } = flow.get('audio_player_states')\nconst { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio')\nconst audio_state = flow.get(WAKE_SOUND)\n\nflow.set(WAKE_SOUND, {\n    ...audio_state, state: PAUSED\n})\n\nmsg.payload = {\n    audio: WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            [
                "819ffe8c2a50daa4"
            ]
        ]
    },
    {
        "id": "0b573ff8da384adc",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "dd19c29ede9b837b"
            ]
        ]
    },
    {
        "id": "d553a5c758663ee2",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Resume Sound",
        "func": "const { RESUMED } = flow.get('audio_player_states')\nconst { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio')\nconst audio_state = flow.get(WAKE_SOUND)\n\nflow.set(WAKE_SOUND, {\n    ...audio_state, state: RESUMED\n})\n\nmsg.payload = {\n    audio: WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [
                "819ffe8c2a50daa4"
            ]
        ]
    },
    {
        "id": "fcd53103b2ee45d3",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 140,
        "wires": [
            [
                "d553a5c758663ee2"
            ]
        ]
    },
    {
        "id": "e70fab1ad935c865",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Stopped Sound",
        "func": "const { STOPPED } = flow.get('audio_player_states')\nconst { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio')\nconst audio_state = flow.get(WAKE_SOUND)\n\nflow.set(WAKE_SOUND, {\n    ...audio_state, state: STOPPED\n})\n\nmsg.payload = {\n    audio: WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 180,
        "wires": [
            [
                "819ffe8c2a50daa4"
            ]
        ]
    },
    {
        "id": "2067773c52cf5c67",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 180,
        "wires": [
            [
                "e70fab1ad935c865"
            ]
        ]
    },
    {
        "id": "819ffe8c2a50daa4",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "d067cf25769cc9a2",
            "1b563d9b71af7068"
        ],
        "x": 855,
        "y": 120,
        "wires": []
    },
    {
        "id": "5a853defe09c191e",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Wake Sound (Test)",
        "func": "const { NIGHT_SOUND, WAKE_SOUND } = flow.get('audio') \nconst audio_assets = flow.get('audio_assets')\n\nconst dir = 'guided_meditation'\nconst file = 'college_and_electric_youth_-_a_real_hero.mp3'\n\nmsg.payload = {\n    audio_file: audio_assets[dir][file],\n    audio: WAKE_SOUND,\n    volume: 100\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 240,
        "wires": [
            [
                "af7443700a2c537c"
            ]
        ]
    },
    {
        "id": "f72aac987ed90a0f",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "Test API Call for Audio Controls",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "5a853defe09c191e"
            ]
        ]
    },
    {
        "id": "af7443700a2c537c",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "52eb4e7a40d8147b",
            "acf064936cbe206e"
        ],
        "x": 855,
        "y": 240,
        "wires": []
    },
    {
        "id": "5fa2284a12b19fc9",
        "type": "comment",
        "z": "56ae43efe9a5b4d3",
        "name": "Prepare Data for Storage",
        "info": "",
        "x": 130,
        "y": 1820,
        "wires": []
    },
    {
        "id": "91e830cf715025c9",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "5ecb2d5c879290ab",
            "c35c2c2ca227e677",
            "2b4a0860d67ccf97",
            "49568c675f1055e9"
        ],
        "x": 35,
        "y": 1860,
        "wires": [
            [
                "6b5fe6e5651bbcdc"
            ]
        ]
    },
    {
        "id": "6b5fe6e5651bbcdc",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Current Audio Config",
        "func": "const { NIGHT_SOUND: night_sound, WAKE_SOUND: wake_sound } = flow.get('audio')\nconst NIGHT_SOUND = flow.get(night_sound)\nconst WAKE_SOUND = flow.get(wake_sound)\n\nmsg.payload = {\n    NIGHT_SOUND, WAKE_SOUND\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1860,
        "wires": [
            [
                "377cc3968f89cf3d"
            ]
        ]
    },
    {
        "id": "9af2857d9a1be37c",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "Check If Audio is Present",
        "property": "payload.audio",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 780,
        "wires": [
            [
                "86d20a5355d39ce3",
                "2b4a0860d67ccf97"
            ],
            [
                "20f8ab873c0bb663"
            ]
        ]
    },
    {
        "id": "20f8ab873c0bb663",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Parameter is Missing",
        "func": "\nthrow new Error('Audio parameter is required')",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 800,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "2b4a0860d67ccf97",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "91e830cf715025c9"
        ],
        "x": 535,
        "y": 720,
        "wires": []
    },
    {
        "id": "064db609db367336",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "ec7beb856b75bc82"
        ],
        "x": 795,
        "y": 1860,
        "wires": []
    },
    {
        "id": "21799f2975f9cd0d",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1920,
        "wires": []
    },
    {
        "id": "377cc3968f89cf3d",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Compile Audio Config",
        "func": "const { NIGHT_SOUND, WAKE_SOUND } = msg.payload\n\nmsg.payload = {\n    audio: {\n        NIGHT_SOUND, WAKE_SOUND\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1860,
        "wires": [
            [
                "064db609db367336",
                "21799f2975f9cd0d"
            ]
        ]
    },
    {
        "id": "ab91ca2c5c750e95",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Get Audio Input",
        "func": "const { audio } = msg.payload\nconst audio_config = flow.get(audio)\n\nmsg.payload = audio_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1480,
        "wires": [
            [
                "b47fadcb378c2227"
            ]
        ]
    },
    {
        "id": "f3226fefd804061d",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "Check If Audio is Present",
        "property": "payload.audio",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 880,
        "wires": [
            [
                "ec82c39f81a74236"
            ],
            [
                "85f4acfda2a661c8"
            ]
        ]
    },
    {
        "id": "acf064936cbe206e",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "From API (Lights)",
        "links": [
            "af7443700a2c537c",
            "4095d36df0bf7800"
        ],
        "x": 35,
        "y": 900,
        "wires": [
            [
                "192c539d401cbfe5"
            ]
        ]
    },
    {
        "id": "ec82c39f81a74236",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Volume Handler",
        "func": "const { audio } = msg.payload\nconst audio_state = flow.get(audio) || {}\nconst new_audio_state = {\n    ...audio_state, ...msg.payload\n}\n\nflow.set(audio, new_audio_state)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 860,
        "wires": [
            [
                "49568c675f1055e9"
            ]
        ]
    },
    {
        "id": "85f4acfda2a661c8",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Parameter is Missing",
        "func": "\nthrow new Error('Audio parameter is required')",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 900,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "49568c675f1055e9",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "dcc3e4b965949c44",
            "91e830cf715025c9"
        ],
        "x": 915,
        "y": 860,
        "wires": []
    },
    {
        "id": "192c539d401cbfe5",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "If Audio Playing",
        "property": "current_audio_playing",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 900,
        "wires": [
            [
                "f3226fefd804061d"
            ],
            [
                "8074f3d58d255362"
            ]
        ]
    },
    {
        "id": "8074f3d58d255362",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "If No Audio Playing",
        "func": "\nthrow new Error('No audio is currently playing')",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 920,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "f9696091e419c12c",
        "type": "PlaySound",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio Player",
        "playerOptions": "{}",
        "audioURI": "",
        "options": "{}",
        "x": 410,
        "y": 1700,
        "wires": [
            [
                "d3c721f30dc405fe"
            ]
        ]
    },
    {
        "id": "5a44044c38f6a2b7",
        "type": "switch",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "property": "current_audio_playing",
        "propertyType": "flow",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "3c25c445887cca7c"
            ],
            [
                "9a9a620506e794dc"
            ]
        ]
    },
    {
        "id": "9a9a620506e794dc",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio is Playing",
        "func": "msg.payload = 'stop'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1480,
        "wires": [
            [
                "c3907ce3b315e7d0",
                "290fdd10d19a84aa"
            ]
        ]
    },
    {
        "id": "290fdd10d19a84aa",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Reset Audio",
        "func": "msg.payload = {\n    audio_file: msg.audioURI\n}\n\nflow.set('current_audio_playing', null)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1480,
        "wires": [
            [
                "7fbe952ddacdef3c"
            ]
        ]
    },
    {
        "id": "3c25c445887cca7c",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "87a8be781c772fe9"
        ],
        "x": 895,
        "y": 1400,
        "wires": []
    },
    {
        "id": "837e2a02b8b3cb89",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Set Current Audio Playing",
        "func": "flow.set('current_audio_playing', msg.audio_obj)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1700,
        "wires": [
            [
                "f9696091e419c12c"
            ]
        ]
    },
    {
        "id": "f76419f21e496097",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1240,
        "wires": []
    },
    {
        "id": "efdf05c1fd0eb8b2",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2b844dbfbc780a53",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1280,
        "wires": []
    },
    {
        "id": "dcb72c7e2448a69b",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1320,
        "wires": []
    },
    {
        "id": "c8535874aa1ff738",
        "type": "link in",
        "z": "56ae43efe9a5b4d3",
        "name": "Audio Assets List",
        "links": [
            "b1c4643e4ab543a5"
        ],
        "x": 135,
        "y": 980,
        "wires": [
            [
                "4fbca4893f9888f9"
            ]
        ]
    },
    {
        "id": "4fbca4893f9888f9",
        "type": "function",
        "z": "56ae43efe9a5b4d3",
        "name": "Send Available Audio Files",
        "func": "const audio_assets = JSON.parse( \n    JSON.stringify( flow.get('audio_assets') )\n)\n\nfor(let key in audio_assets) {\n    audio_assets[key] = Object.keys( audio_assets[key] )\n}\n\nmsg.payload = audio_assets\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 980,
        "wires": [
            [
                "5b84f8efca57f859",
                "f5cad2c23ed73012"
            ]
        ]
    },
    {
        "id": "5b84f8efca57f859",
        "type": "link out",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 775,
        "y": 980,
        "wires": []
    },
    {
        "id": "f5cad2c23ed73012",
        "type": "debug",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5492fb483b8b2eb8",
        "type": "inject",
        "z": "56ae43efe9a5b4d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1040,
        "wires": [
            [
                "4fbca4893f9888f9"
            ]
        ]
    },
    {
        "id": "7a8082dc4e53ede4",
        "type": "comment",
        "z": "4fcd3dd2df70f0c8",
        "name": "Reset",
        "info": "",
        "x": 210,
        "y": 240,
        "wires": []
    },
    {
        "id": "f430cccf82ec05a3",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract Event Config",
        "func": "const { event: event_config } = global.get('defaults_config')\nconst { event } = msg.payload\n\nmsg.payload = event\nmsg.filename = event_config\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "e3b233261f0697e2"
            ]
        ]
    },
    {
        "id": "e3b233261f0697e2",
        "type": "trigger",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 180,
        "wires": [
            [
                "d4a9d574e8776756"
            ]
        ]
    },
    {
        "id": "6a7c4e44cfb9a01d",
        "type": "function",
        "z": "024a5d7a17bad4d1",
        "name": "Extract System Config",
        "func": "const { system: system_config } = global.get('defaults_config')\nconst { system } = msg.payload\n\nmsg.payload = system\nmsg.filename = system_config\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "41f01c7bb18553ca"
            ]
        ]
    },
    {
        "id": "41f01c7bb18553ca",
        "type": "trigger",
        "z": "024a5d7a17bad4d1",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "d4a9d574e8776756"
            ]
        ]
    },
    {
        "id": "5be91df37a5ca220",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Testing Section",
        "info": "",
        "x": 100,
        "y": 2160,
        "wires": []
    },
    {
        "id": "a240ce146f5a7cec",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2360,
        "wires": [
            [
                "1df171d5d7671863"
            ]
        ]
    },
    {
        "id": "1df171d5d7671863",
        "type": "function",
        "z": "427808241d304283",
        "name": "Schedex Input Template",
        "func": "const { NIGHT_LIGHT } = flow.get('lights')\nconst { FADE_ON, FADE_OFF } = flow.get('light_states')\n\nconst { sunset } = flow.get('events')\nconst { time } = sunset\n\nconst ontime = 'sunsetStart'\nconst offtime = time\n\nconst onpayload = {\n    light: NIGHT_LIGHT,\n    state: FADE_ON\n}\n\nconst offpayload = {\n    light: NIGHT_LIGHT,\n    state: FADE_OFF\n}\n\nconst onoffset = 0\nconst offoffset = 0\n\nconst day_selected = {\n    mon: true,\n    tue: true,\n    wed: true,\n    thu: true,\n    fri: true,\n    sat: true,\n    sun: true\n}\n\nconst latitude = 12.8797207\nconst longitude = 121.7740173\n\nconst schedex_input = {\n    ontime, \n    offtime, \n    onpayload, \n    offpayload,\n    onoffset,\n    offoffset,\n    day_selected,\n    latitude,\n    longitude\n}\n\nmsg.payload = schedex_input\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2360,
        "wires": [
            [
                "117250d66187fc3d"
            ]
        ]
    },
    {
        "id": "117250d66187fc3d",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 570,
        "y": 2360,
        "wires": [
            [
                "53afddc4b9ae2286"
            ]
        ]
    },
    {
        "id": "53afddc4b9ae2286",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2360,
        "wires": []
    },
    {
        "id": "259fcaaf2b86aa30",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "2247154c64c64885"
        ],
        "x": 135,
        "y": 1040,
        "wires": [
            [
                "d07a1b83f9c64ac9"
            ]
        ]
    },
    {
        "id": "c471b87c92ffd98e",
        "type": "function",
        "z": "427808241d304283",
        "name": "Process Bedtime Event",
        "func": "const events = flow.get('events')\nconst { type } = msg.payload\n\nconst { light, sound, time }  = events[type]\n\nif(light) {\n    light.ontime = time\n    light.offtime = time\n}\n\nif(sound) {\n    sound.ontime = time\n    sound.offtime = time\n}\n\nconst light_output = {\n    payload: light || null\n}\n\nconst sound_output = {\n    payload: sound || null\n}\n\nreturn [light_output, sound_output];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 960,
        "wires": [
            [
                "5ac43b6bb0c97b1f"
            ],
            [
                "7b93ad097c44a871"
            ]
        ]
    },
    {
        "id": "d07a1b83f9c64ac9",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Event Selector",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "bedtime",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "waketime",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sunrise",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sunset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 320,
        "y": 1040,
        "wires": [
            [
                "c471b87c92ffd98e"
            ],
            [
                "4299733cfc962944"
            ],
            [
                "f47f1bd8da8b2a17"
            ],
            [
                "2fcb5ce120904711"
            ]
        ]
    },
    {
        "id": "ce1ae75d01b821fa",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Night Light Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1300,
        "wires": [
            [
                "f7a6f1ecf602f09f",
                "6d92577b0a9c447d"
            ]
        ]
    },
    {
        "id": "f520c999092bcc9d",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Night Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1380,
        "wires": [
            [
                "0bc3dc3bd0f4d5bb",
                "c34ed1fab46fbda8"
            ]
        ]
    },
    {
        "id": "f7a6f1ecf602f09f",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1260,
        "wires": []
    },
    {
        "id": "0bc3dc3bd0f4d5bb",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6d92577b0a9c447d",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Night Light)",
        "links": [
            "99890cfd06ef832a"
        ],
        "x": 675,
        "y": 1300,
        "wires": []
    },
    {
        "id": "c34ed1fab46fbda8",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Night Sound)",
        "links": [],
        "x": 675,
        "y": 1380,
        "wires": []
    },
    {
        "id": "4299733cfc962944",
        "type": "function",
        "z": "427808241d304283",
        "name": "Process Waketime Event",
        "func": "const events = flow.get('events')\nconst { type } = msg.payload\n\nconst { light, sound, time }  = events[type]\n\nif(light) {\n    light.ontime = time\n    light.offtime = time\n}\n\nif(sound) {\n    sound.ontime = time\n    sound.offtime = time\n}\n\nconst light_output = {\n    payload: light || null\n}\n\nconst sound_output = {\n    payload: sound || null\n}\n\nreturn [light_output, sound_output];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1020,
        "wires": [
            [
                "349e569a87321cae",
                "e6051fd47e03a3ac"
            ],
            []
        ]
    },
    {
        "id": "f47f1bd8da8b2a17",
        "type": "function",
        "z": "427808241d304283",
        "name": "Process Sunrise Event",
        "func": "const events = flow.get('events')\nconst timezone_offset = flow.get('timezone_offset')\nconst { type } = msg.payload\nconst { light, sound, time }  = events[type]\n\nif(light) {\n    light.ontime = time\n    light.offtime = time\n    light.onoffset += timezone_offset\n    light.offoffset += timezone_offset\n}\n\nif(sound) {\n    sound.ontime = time\n    sound.offtime = time\n    light.onoffset += timezone_offset\n    light.offoffset += timezone_offset\n}\n\nconst light_output = {\n    payload: light || null\n}\n\nconst sound_output = {\n    payload: sound || null\n}\n\nreturn [light_output, sound_output];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1060,
        "wires": [
            [
                "68cb7f19d709eeda"
            ],
            [
                "b914b988c5f86161"
            ]
        ]
    },
    {
        "id": "2fcb5ce120904711",
        "type": "function",
        "z": "427808241d304283",
        "name": "Process Sunset Event",
        "func": "const events = flow.get('events')\nconst { type } = msg.payload\n\nconst { light, sound, time }  = events[type]\n\nif(light) {\n    light.ontime = time\n    light.offtime = time\n}\n\nif(sound) {\n    sound.ontime = time\n    sound.offtime = time\n}\n\nconst light_output = {\n    payload: light || null\n}\n\nconst sound_output = {\n    payload: sound || null\n}\n\nreturn [light_output, sound_output];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1120,
        "wires": [
            [
                "13f3d625ca8b5451"
            ],
            [
                "f5e24ac39eacf5b5"
            ]
        ]
    },
    {
        "id": "5ac43b6bb0c97b1f",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "fc9a17a39836810e"
        ],
        "x": 855,
        "y": 900,
        "wires": []
    },
    {
        "id": "7b93ad097c44a871",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "13a9c539dbf6804d"
        ],
        "x": 855,
        "y": 940,
        "wires": []
    },
    {
        "id": "349e569a87321cae",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "f469bf6260d912ed"
        ],
        "x": 855,
        "y": 980,
        "wires": []
    },
    {
        "id": "e6051fd47e03a3ac",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "f100181ab0425189"
        ],
        "x": 855,
        "y": 1020,
        "wires": []
    },
    {
        "id": "68cb7f19d709eeda",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "495043e9e266776a"
        ],
        "x": 855,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b914b988c5f86161",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "783accad78d48adb"
        ],
        "x": 855,
        "y": 1100,
        "wires": []
    },
    {
        "id": "13f3d625ca8b5451",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "88cc8f4bee1804d7"
        ],
        "x": 855,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f5e24ac39eacf5b5",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "9d06b45d4b526d19"
        ],
        "x": 855,
        "y": 1180,
        "wires": []
    },
    {
        "id": "fc9a17a39836810e",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "5ac43b6bb0c97b1f"
        ],
        "x": 35,
        "y": 1300,
        "wires": [
            [
                "4e5b6a6d74a43c95"
            ]
        ]
    },
    {
        "id": "13a9c539dbf6804d",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "7b93ad097c44a871"
        ],
        "x": 35,
        "y": 1380,
        "wires": [
            [
                "b2bd9aa7291da2c0"
            ]
        ]
    },
    {
        "id": "2663df0f99463eb3",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Wake Light Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1520,
        "wires": [
            [
                "7eabb8b5079c6791",
                "fe19b0d6879b5403"
            ]
        ]
    },
    {
        "id": "a0305c97741e49da",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Wake Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1600,
        "wires": [
            [
                "2ea692060d68e9e2",
                "fe30fcaa2bea0d31"
            ]
        ]
    },
    {
        "id": "7eabb8b5079c6791",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2ea692060d68e9e2",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1560,
        "wires": []
    },
    {
        "id": "fe19b0d6879b5403",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Wake Light)",
        "links": [
            "99890cfd06ef832a"
        ],
        "x": 675,
        "y": 1520,
        "wires": []
    },
    {
        "id": "fe30fcaa2bea0d31",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Wake Sound)",
        "links": [],
        "x": 675,
        "y": 1600,
        "wires": []
    },
    {
        "id": "f469bf6260d912ed",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "349e569a87321cae"
        ],
        "x": 35,
        "y": 1520,
        "wires": [
            [
                "07bb8b4e4f5bcd11"
            ]
        ]
    },
    {
        "id": "f100181ab0425189",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "e6051fd47e03a3ac"
        ],
        "x": 35,
        "y": 1600,
        "wires": [
            [
                "73870de815788819"
            ]
        ]
    },
    {
        "id": "a57d1afa4409fe65",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Sunrise Light Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1740,
        "wires": [
            [
                "e6f9baa780e3f1f1",
                "144b0ce6de73da81"
            ]
        ]
    },
    {
        "id": "91e434e46084f453",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Sunrise Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 380,
        "y": 1820,
        "wires": [
            [
                "21d44777591b63e4",
                "fd3d2a96f7af15a2"
            ]
        ]
    },
    {
        "id": "e6f9baa780e3f1f1",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1700,
        "wires": []
    },
    {
        "id": "21d44777591b63e4",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1780,
        "wires": []
    },
    {
        "id": "144b0ce6de73da81",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Sunrise Light)",
        "links": [
            "99890cfd06ef832a"
        ],
        "x": 675,
        "y": 1740,
        "wires": []
    },
    {
        "id": "fd3d2a96f7af15a2",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Sunrise Sound)",
        "links": [],
        "x": 675,
        "y": 1820,
        "wires": []
    },
    {
        "id": "495043e9e266776a",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "68cb7f19d709eeda"
        ],
        "x": 35,
        "y": 1740,
        "wires": [
            [
                "e05e972893b302e7"
            ]
        ]
    },
    {
        "id": "783accad78d48adb",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "b914b988c5f86161"
        ],
        "x": 35,
        "y": 1820,
        "wires": [
            [
                "81edaddf3e9d531b"
            ]
        ]
    },
    {
        "id": "97423e057c4b1573",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Sunset Light Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 370,
        "y": 1960,
        "wires": [
            [
                "5c5f8454517d22ae",
                "07e37e563f84c4ef"
            ]
        ]
    },
    {
        "id": "ec600430246adfbc",
        "type": "schedex",
        "z": "427808241d304283",
        "name": "Sunset Sound Event",
        "passthroughunhandled": true,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 380,
        "y": 2040,
        "wires": [
            [
                "7a268c4b05adbf68",
                "2bfd2be2228a7d7f"
            ]
        ]
    },
    {
        "id": "5c5f8454517d22ae",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1920,
        "wires": []
    },
    {
        "id": "7a268c4b05adbf68",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2000,
        "wires": []
    },
    {
        "id": "07e37e563f84c4ef",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Sunset Light)",
        "links": [
            "99890cfd06ef832a"
        ],
        "x": 675,
        "y": 1960,
        "wires": []
    },
    {
        "id": "2bfd2be2228a7d7f",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event (Sunset Sound)",
        "links": [],
        "x": 675,
        "y": 2040,
        "wires": []
    },
    {
        "id": "88cc8f4bee1804d7",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "13f3d625ca8b5451"
        ],
        "x": 35,
        "y": 1960,
        "wires": [
            [
                "c3a64d8207260a6e"
            ]
        ]
    },
    {
        "id": "9d06b45d4b526d19",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "f5e24ac39eacf5b5"
        ],
        "x": 35,
        "y": 2040,
        "wires": [
            [
                "5e3cc9fc7ada368a"
            ]
        ]
    },
    {
        "id": "106e93b658270025",
        "type": "inject",
        "z": "427808241d304283",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 2460,
        "wires": [
            [
                "70fc9bec53d3ad66"
            ]
        ]
    },
    {
        "id": "70fc9bec53d3ad66",
        "type": "function",
        "z": "427808241d304283",
        "name": "Timezone Offset",
        "func": "const date = new Date()\n\nmsg.payload = date.getTimezoneOffset()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2460,
        "wires": [
            [
                "3a0e0a204596172f"
            ]
        ]
    },
    {
        "id": "3a0e0a204596172f",
        "type": "debug",
        "z": "427808241d304283",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2460,
        "wires": []
    },
    {
        "id": "4e5b6a6d74a43c95",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload.light",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1300,
        "wires": [
            [
                "ce1ae75d01b821fa"
            ]
        ]
    },
    {
        "id": "b2bd9aa7291da2c0",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload.audio_file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1380,
        "wires": [
            [
                "f520c999092bcc9d"
            ]
        ]
    },
    {
        "id": "07bb8b4e4f5bcd11",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload.light",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1520,
        "wires": [
            [
                "2663df0f99463eb3"
            ]
        ]
    },
    {
        "id": "73870de815788819",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload.audio_file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1600,
        "wires": [
            [
                "a0305c97741e49da"
            ]
        ]
    },
    {
        "id": "e05e972893b302e7",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload.light",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1740,
        "wires": [
            [
                "a57d1afa4409fe65"
            ]
        ]
    },
    {
        "id": "81edaddf3e9d531b",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload.audio_file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1820,
        "wires": [
            [
                "91e434e46084f453"
            ]
        ]
    },
    {
        "id": "c3a64d8207260a6e",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload.light",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1960,
        "wires": [
            [
                "97423e057c4b1573"
            ]
        ]
    },
    {
        "id": "5e3cc9fc7ada368a",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Null Payload Filter",
        "property": "payload.onpayload.audio_file",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 2040,
        "wires": [
            [
                "ec600430246adfbc"
            ]
        ]
    },
    {
        "id": "3ced736f1171ab7a",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Bedtime Events",
        "info": "",
        "x": 100,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9b7ef405323b93d4",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Waketime Events",
        "info": "",
        "x": 100,
        "y": 1460,
        "wires": []
    },
    {
        "id": "5c04f3608e849a3b",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Sunrise Events",
        "info": "",
        "x": 100,
        "y": 1680,
        "wires": []
    },
    {
        "id": "6d1b3f02e40ddb4d",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Sunset Events",
        "info": "",
        "x": 90,
        "y": 1900,
        "wires": []
    },
    {
        "id": "8523b9a0de75b41c",
        "type": "comment",
        "z": "427808241d304283",
        "name": "Event Processor",
        "info": "",
        "x": 100,
        "y": 900,
        "wires": []
    },
    {
        "id": "0c4d8870999efbbf",
        "type": "switch",
        "z": "e1a40699ea85764e",
        "name": "Light Handler",
        "property": "payload.light",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NIGHT_LIGHT.light",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "WAKE_LIGHT.light",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 720,
        "wires": [
            [
                "8647433edc9277b7"
            ],
            [
                "91512abe54268463"
            ]
        ]
    },
    {
        "id": "c36c3b8450aaf67a",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "076a5ab5e051a561",
            "fe0fda044e9bd38a",
            "4f7655a54e04938c"
        ],
        "x": 35,
        "y": 720,
        "wires": [
            [
                "0c4d8870999efbbf"
            ]
        ]
    },
    {
        "id": "8647433edc9277b7",
        "type": "switch",
        "z": "e1a40699ea85764e",
        "name": "Night Light",
        "property": "payload.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "light_states.FADE_ON",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.ON",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.OFF",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.FADE_OFF",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 680,
        "wires": [
            [
                "8f4f3375b91bce77"
            ],
            [
                "6e61cac404cd1fd5"
            ],
            [
                "88f4bd92c145a669"
            ],
            [
                "ea31ccf57e478c46"
            ]
        ]
    },
    {
        "id": "91512abe54268463",
        "type": "switch",
        "z": "e1a40699ea85764e",
        "name": "Wake Light",
        "property": "payload.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "light_states.FADE_ON",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.ON",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.OFF",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "light_states.FADE_OFF",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 760,
        "wires": [
            [
                "a537ecd6a1fbca50"
            ],
            [
                "7f332a4dc2da9171"
            ],
            [
                "9d1dbf5d28d51703"
            ],
            [
                "17a595eed9d0742d"
            ]
        ]
    },
    {
        "id": "6e61cac404cd1fd5",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "35e4ae63f18d6679"
        ],
        "x": 815,
        "y": 620,
        "wires": []
    },
    {
        "id": "8f4f3375b91bce77",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "e70d1942fa62036c"
        ],
        "x": 815,
        "y": 580,
        "wires": []
    },
    {
        "id": "ea31ccf57e478c46",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "99d636e4c54833d3"
        ],
        "x": 815,
        "y": 700,
        "wires": []
    },
    {
        "id": "88f4bd92c145a669",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "f6a3886c0d4dd377"
        ],
        "x": 815,
        "y": 660,
        "wires": []
    },
    {
        "id": "7f332a4dc2da9171",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "67801cebe5dcc6c3",
            "bbc14b24f4ab375e"
        ],
        "x": 815,
        "y": 780,
        "wires": []
    },
    {
        "id": "a537ecd6a1fbca50",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "1c6e4cb06ec4242a",
            "5b50227a9e312302"
        ],
        "x": 815,
        "y": 740,
        "wires": []
    },
    {
        "id": "17a595eed9d0742d",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "706856ecf2888e23",
            "0014672d01606e55"
        ],
        "x": 815,
        "y": 860,
        "wires": []
    },
    {
        "id": "9d1dbf5d28d51703",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "d3cca85a24e36670",
            "f830b6987eeb3c91"
        ],
        "x": 815,
        "y": 820,
        "wires": []
    },
    {
        "id": "d6f259f76a970ae1",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Adjust Max Brightness",
        "func": "const { ADJUST_BRIGHTNESS } = flow.get('light_states')\nconst { NIGHT_LIGHT } = flow.get('lights')\nconst night_light = flow.get(NIGHT_LIGHT)\n\nconst new_night_light_state = {\n    ...night_light, \n    state: ADJUST_BRIGHTNESS,\n    previous_state: night_light.state\n}\n\nmsg.counter = night_light.max_brightness\n\nif(night_light.state !== ADJUST_BRIGHTNESS) \n    flow.set(NIGHT_LIGHT, new_night_light_state)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "f0c75390fa0772e0",
                "6f970beb3b20be63"
            ]
        ]
    },
    {
        "id": "013f132b89390dae",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (On)",
        "links": [
            "81c8ed3d1f966e48",
            "5bde7861c88f93ce",
            "9161018b3a1cc506",
            "fad2e5d76f69c42c"
        ],
        "x": 35,
        "y": 1120,
        "wires": [
            [
                "d6f259f76a970ae1"
            ]
        ]
    },
    {
        "id": "400b7b11d39d6e90",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Revert to Previous",
        "func": "const { NIGHT_LIGHT } = flow.get('lights')\nconst night_light = flow.get(NIGHT_LIGHT)\n\nnight_light.state = night_light.previous_state\ndelete night_light['previous_state']\n\nflow.set(NIGHT_LIGHT, night_light)\n\nmsg.payload = {\n    ...night_light\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1080,
        "wires": [
            [
                "fe0fda044e9bd38a"
            ]
        ]
    },
    {
        "id": "6f970beb3b20be63",
        "type": "trigger",
        "z": "e1a40699ea85764e",
        "name": "",
        "op1": "",
        "op2": "previous_state",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "3",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "400b7b11d39d6e90"
            ]
        ]
    },
    {
        "id": "ea0ae540ddba98b8",
        "type": "ui_slider",
        "z": "e1a40699ea85764e",
        "name": "",
        "label": "Night Light Brightness",
        "tooltip": "",
        "group": "9933a45d.b3b0e",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": "10",
        "max": "100",
        "step": 1,
        "className": "",
        "x": 640,
        "y": 260,
        "wires": [
            [
                "38f9fed8f00fc587"
            ]
        ]
    },
    {
        "id": "fad2e5d76f69c42c",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "013f132b89390dae"
        ],
        "x": 915,
        "y": 260,
        "wires": []
    },
    {
        "id": "38f9fed8f00fc587",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "const brightness_level = msg.payload\nconst { NIGHT_LIGHT } = flow.get('lights')\nconst night_light = flow.get(NIGHT_LIGHT)\n\nnight_light.max_brightness = brightness_level\n\nflow.set(NIGHT_LIGHT, night_light)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 260,
        "wires": [
            [
                "fad2e5d76f69c42c"
            ]
        ]
    },
    {
        "id": "fe0fda044e9bd38a",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "c36c3b8450aaf67a"
        ],
        "x": 675,
        "y": 1080,
        "wires": []
    },
    {
        "id": "627d595124cde24e",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "35e4ae63f18d6679"
        ],
        "x": 875,
        "y": 60,
        "wires": []
    },
    {
        "id": "792af44094a0b0c2",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "9933a45d.b3b0e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Night Light On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 620,
        "y": 60,
        "wires": [
            [
                "627d595124cde24e"
            ]
        ]
    },
    {
        "id": "e67bb6fff1bf84c8",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "9933a45d.b3b0e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Night Light Fade On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 640,
        "y": 100,
        "wires": [
            [
                "0eb1bec83ebe053c"
            ]
        ]
    },
    {
        "id": "82a3398cb2e8036a",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "9933a45d.b3b0e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Night Light Fade Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 640,
        "y": 140,
        "wires": [
            [
                "60a1514379cf765d"
            ]
        ]
    },
    {
        "id": "aa80c32f22b4ccd7",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "9933a45d.b3b0e",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Night Light Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 620,
        "y": 180,
        "wires": [
            [
                "404746cedc16dfcd"
            ]
        ]
    },
    {
        "id": "79c4f1b3026cbdcb",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/event",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "332df25bbfca8896"
            ]
        ]
    },
    {
        "id": "b443ac417c7a70f1",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "Event API (Bedtime)",
        "links": [
            "923891f5d3e27f13"
        ],
        "x": 635,
        "y": 700,
        "wires": []
    },
    {
        "id": "4c149006d1618a77",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "API Config",
        "func": "const events = {\n    bedtime: 'bedtime',\n    waketime: 'waketime',\n    sunrise: 'sunrise',\n    sunset: 'sunset'\n}\n\nflow.set('events', events)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 80,
        "wires": []
    },
    {
        "id": "583ea8bb450c7347",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1420,
        "wires": [
            [
                "b0613226d302c452",
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "b0613226d302c452",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Fade Counter",
        "func": "const { FADE_ON, ON } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { state, light, max_brightness } = wake_light\n\nif(msg.counter >= max_brightness) {\n    flow.set(light, {\n        ...wake_light, state: ON\n    })\n    \n    return null\n}\n\nif(state !== FADE_ON)\n    return null\n\nmsg.counter++\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1420,
        "wires": [
            [
                "583ea8bb450c7347"
            ]
        ]
    },
    {
        "id": "0678df904206e8dd",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Fade On",
        "func": "const { FADE_ON } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { light, max_brightness, tick } = wake_light\nconst counter = flow.get('night_light_current_brightness')\n\nconst light_config = {\n    ...wake_light, state: FADE_ON\n}\n\nflow.set(light, light_config)\n\nmsg.counter = counter\nmsg.delay = tick\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1420,
        "wires": [
            [
                "b0613226d302c452"
            ]
        ]
    },
    {
        "id": "ede233c7a745c8a5",
        "type": "change",
        "z": "e1a40699ea85764e",
        "name": "Payload to Counter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "counter",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "wake_light_current_brightness",
                "pt": "flow",
                "to": "counter",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1580,
        "wires": [
            [
                "ba1dff0b015dd369"
            ]
        ]
    },
    {
        "id": "5b50227a9e312302",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Fade On)",
        "links": [
            "b2e7a0407aea6a2a",
            "48503f83daebe740",
            "bd5fce3febdf15d7",
            "a537ecd6a1fbca50",
            "47ff69e28e3253c7"
        ],
        "x": 35,
        "y": 1420,
        "wires": [
            [
                "0678df904206e8dd"
            ]
        ]
    },
    {
        "id": "bc01ae598792fec7",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Fade Off",
        "func": "const { FADE_OFF } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { light, max_brightness, tick } = wake_light\nconst light_config = {\n    ...wake_light, state: FADE_OFF\n}\n\nflow.set(light, light_config)\n\nmsg.counter = flow.get('wake_light_current_brightness')\nmsg.delay = tick\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1740,
        "wires": [
            [
                "b7a3a968c21c1c87"
            ]
        ]
    },
    {
        "id": "b7a3a968c21c1c87",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Fade Counter",
        "func": "const { FADE_OFF, OFF } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { state, light, max_brightness } = wake_light\n\nif(msg.counter <= 0) {\n    flow.set(light, {\n        ...wake_light, state: OFF\n    })\n    \n    return null\n}\n\nif(state !== FADE_OFF)\n    return null\n\nmsg.counter--\nflow.set('wake_light_current_brightness', msg.counter)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1740,
        "wires": [
            [
                "bceff95bf4c455d9"
            ]
        ]
    },
    {
        "id": "0014672d01606e55",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Fade Off)",
        "links": [
            "960cc71d221701e5",
            "6e09738fba4f3349",
            "d9103be68bd22c99",
            "17a595eed9d0742d",
            "8be0100032eb33f1"
        ],
        "x": 35,
        "y": 1740,
        "wires": [
            [
                "bc01ae598792fec7"
            ]
        ]
    },
    {
        "id": "ff56fb4543730841",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle On",
        "func": "const { ON } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { light, max_brightness, tick } = wake_light\nconst light_config = {\n    ...wake_light, state: ON\n}\n\nflow.set(light, light_config)\n\nmsg.counter = max_brightness\nmsg.delay = tick\nmsg.payload = light_config\n\nflow.set('wake_light_current_brightness', max_brightness)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "d0cde0e138d4caed"
            ]
        ]
    },
    {
        "id": "b252f7eb5d0776c4",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1680,
        "wires": [
            [
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "bceff95bf4c455d9",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1740,
        "wires": [
            [
                "b7a3a968c21c1c87",
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "d0cde0e138d4caed",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 540,
        "y": 1480,
        "wires": [
            [
                "ede233c7a745c8a5"
            ]
        ]
    },
    {
        "id": "bbc14b24f4ab375e",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (On)",
        "links": [
            "81c8ed3d1f966e48",
            "5bde7861c88f93ce",
            "9161018b3a1cc506",
            "7f332a4dc2da9171",
            "5cf54b7658242ff1"
        ],
        "x": 35,
        "y": 1480,
        "wires": [
            [
                "ff56fb4543730841"
            ]
        ]
    },
    {
        "id": "f830b6987eeb3c91",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Off)",
        "links": [
            "25cd6159ea46fd09",
            "7f04188022e29c07",
            "6277dbf5345db5cb",
            "9d1dbf5d28d51703",
            "0753ed9b53d7e4f5"
        ],
        "x": 35,
        "y": 1680,
        "wires": [
            [
                "1903cfd8d5af3d7c"
            ]
        ]
    },
    {
        "id": "ba1dff0b015dd369",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "Night Light (Control)",
        "links": [
            "3ae8dc738dda02fa"
        ],
        "x": 875,
        "y": 1620,
        "wires": []
    },
    {
        "id": "8c1cd366aa62ef23",
        "type": "comment",
        "z": "e1a40699ea85764e",
        "name": "To Wake Light",
        "info": "",
        "x": 910,
        "y": 1520,
        "wires": []
    },
    {
        "id": "bf2457e754a185f6",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Adjust Max Brightness",
        "func": "const { ADJUST_BRIGHTNESS } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\n\nconst new_wake_light_state = {\n    ...wake_light, \n    state: ADJUST_BRIGHTNESS,\n    previous_state: wake_light.state\n}\n\nmsg.counter = wake_light.max_brightness\n\nif(wake_light.state !== ADJUST_BRIGHTNESS) \n    flow.set(WAKE_LIGHT, new_wake_light_state)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1580,
        "wires": [
            [
                "ede233c7a745c8a5",
                "ecc883a0274381d8"
            ]
        ]
    },
    {
        "id": "83aaf991dc94095c",
        "type": "link in",
        "z": "e1a40699ea85764e",
        "name": "Night Light (On)",
        "links": [
            "81c8ed3d1f966e48",
            "5bde7861c88f93ce",
            "9161018b3a1cc506",
            "fd4b212aed8bb7d3"
        ],
        "x": 35,
        "y": 1580,
        "wires": [
            [
                "bf2457e754a185f6"
            ]
        ]
    },
    {
        "id": "2ec5aa6e81203463",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Revert to Previous",
        "func": "const { WAKE_LIGHT } = flow.get('lights')\nconst wake_light = flow.get(WAKE_LIGHT)\n\nwake_light.state = wake_light.previous_state\ndelete wake_light['previous_state']\n\nflow.set(WAKE_LIGHT, wake_light)\n\nmsg.payload = {\n    ...wake_light\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1540,
        "wires": [
            [
                "4f7655a54e04938c"
            ]
        ]
    },
    {
        "id": "ecc883a0274381d8",
        "type": "trigger",
        "z": "e1a40699ea85764e",
        "name": "",
        "op1": "",
        "op2": "previous_state",
        "op1type": "nul",
        "op2type": "flow",
        "duration": "3",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 360,
        "y": 1540,
        "wires": [
            [
                "2ec5aa6e81203463"
            ]
        ]
    },
    {
        "id": "4f7655a54e04938c",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "c36c3b8450aaf67a"
        ],
        "x": 675,
        "y": 1540,
        "wires": []
    },
    {
        "id": "1903cfd8d5af3d7c",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Toggle Off",
        "func": "const { OFF } = flow.get('light_states')\nconst { WAKE_LIGHT } = flow.get('lights')\n\nconst wake_light = flow.get(WAKE_LIGHT)\nconst { light, max_brightness, tick } = wake_light\nconst light_config = {\n    ...wake_light, state: OFF\n}\n\nflow.set(light, light_config)\n\nmsg.counter = 0\nmsg.delay = tick\n\nflow.set('wake_light_current_brightness', 0)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "b252f7eb5d0776c4"
            ]
        ]
    },
    {
        "id": "d39db940d012a468",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "Initialize Constants",
        "func": "const { NIGHT_LIGHT, WAKE_LIGHT } = msg.payload\n\nconst lights = {\n    NIGHT_LIGHT: 'NIGHT_LIGHT',\n    WAKE_LIGHT: 'WAKE_LIGHT'\n}\n\nconst light_states = {\n    OFF: 'OFF',\n    FADE_ON: 'FADE_ON',\n    FADE_OFF: 'FADE_OFF',\n    ON: 'ON',\n    ADJUST_BRIGHTNESS: 'ADJUST_BRIGHTNESS'\n}\n\nflow.set('lights', lights)\nflow.set('light_states', light_states)\n\nflow.set(lights.NIGHT_LIGHT, NIGHT_LIGHT)\nflow.set(lights.WAKE_LIGHT, WAKE_LIGHT)\n\nflow.set('night_light_current_brightness', 0)\nflow.set('wake_light_current_brightness', 0)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 360,
        "wires": []
    },
    {
        "id": "57e909829a54afa3",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "On Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "6c3ef41b9b35c8fd"
            ]
        ]
    },
    {
        "id": "47ff69e28e3253c7",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "5b50227a9e312302"
        ],
        "x": 355,
        "y": 100,
        "wires": []
    },
    {
        "id": "8be0100032eb33f1",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "0014672d01606e55"
        ],
        "x": 355,
        "y": 140,
        "wires": []
    },
    {
        "id": "0753ed9b53d7e4f5",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "f830b6987eeb3c91"
        ],
        "x": 355,
        "y": 180,
        "wires": []
    },
    {
        "id": "0e5c1f3d27343ed1",
        "type": "ui_slider",
        "z": "e1a40699ea85764e",
        "name": "",
        "label": "Wake Light Brightness",
        "tooltip": "",
        "group": "91c4859.9f3e5f8",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": "10",
        "max": "100",
        "step": 1,
        "className": "",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "bf9bd97b5457ba76"
            ]
        ]
    },
    {
        "id": "fd4b212aed8bb7d3",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "83aaf991dc94095c"
        ],
        "x": 395,
        "y": 260,
        "wires": []
    },
    {
        "id": "bf9bd97b5457ba76",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "const brightness_level = msg.payload\nconst { WAKE_LIGHT } = flow.get('lights')\nconst wake_light = flow.get(WAKE_LIGHT)\n\nwake_light.max_brightness = brightness_level\n\nflow.set(WAKE_LIGHT, wake_light)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "fd4b212aed8bb7d3"
            ]
        ]
    },
    {
        "id": "5cf54b7658242ff1",
        "type": "link out",
        "z": "e1a40699ea85764e",
        "name": "",
        "links": [
            "bbc14b24f4ab375e"
        ],
        "x": 355,
        "y": 60,
        "wires": []
    },
    {
        "id": "6ee61aeae2fc75d0",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "91c4859.9f3e5f8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Wake Light On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "5cf54b7658242ff1"
            ]
        ]
    },
    {
        "id": "6c624c80fad1e718",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "91c4859.9f3e5f8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Wake Light Fade On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "47ff69e28e3253c7"
            ]
        ]
    },
    {
        "id": "753721aff0f529b0",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "91c4859.9f3e5f8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Wake Light Fade Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "8be0100032eb33f1"
            ]
        ]
    },
    {
        "id": "a2caf23355772d66",
        "type": "ui_button",
        "z": "e1a40699ea85764e",
        "name": "",
        "group": "91c4859.9f3e5f8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Wake Light Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "0753ed9b53d7e4f5"
            ]
        ]
    },
    {
        "id": "332df25bbfca8896",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Event Type Selector",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "events.bedtime",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.waketime",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.sunrise",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "events.sunset",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 420,
        "y": 780,
        "wires": [
            [
                "b443ac417c7a70f1"
            ],
            [
                "cee32bbd8ec92569"
            ],
            [
                "b54e559135e567a0"
            ],
            [
                "67b663c836889056"
            ],
            [
                "cf57cdebde601ad2"
            ]
        ]
    },
    {
        "id": "14b017febce3fd48",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 580,
        "wires": []
    },
    {
        "id": "1bd0312798db6fb0",
        "type": "link in",
        "z": "f6f2187d.f17ca8",
        "name": "HTTP Response",
        "links": [
            "69dda5ef5e2c5df0",
            "a37c62cfcb685775",
            "0b58e656f91710d1",
            "5b84f8efca57f859"
        ],
        "x": 635,
        "y": 580,
        "wires": [
            [
                "14b017febce3fd48"
            ]
        ]
    },
    {
        "id": "cf57cdebde601ad2",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Event Type Not Available",
        "func": "const error = new Error('No such event. Please update the type property of the event')\n\nmsg.statusCode = 400\n\nthrow error",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 860,
        "wires": []
    },
    {
        "id": "d629cceacc4dc2f0",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "scope": [
            "cf57cdebde601ad2"
        ],
        "uncaught": false,
        "x": 90,
        "y": 580,
        "wires": [
            [
                "a80e8adf40042251",
                "0dd6df953acaddba"
            ]
        ]
    },
    {
        "id": "a37c62cfcb685775",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 435,
        "y": 580,
        "wires": []
    },
    {
        "id": "a80e8adf40042251",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 640,
        "wires": []
    },
    {
        "id": "0dd6df953acaddba",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Error Handler",
        "func": "msg.payload = msg.error\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 580,
        "wires": [
            [
                "a37c62cfcb685775"
            ]
        ]
    },
    {
        "id": "aa793674e9df93dc",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "HTTP Requests",
        "info": "",
        "x": 120,
        "y": 520,
        "wires": []
    },
    {
        "id": "cee32bbd8ec92569",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "Event API (Waketime)",
        "links": [
            "923891f5d3e27f13"
        ],
        "x": 635,
        "y": 740,
        "wires": []
    },
    {
        "id": "b54e559135e567a0",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "Event API (Sunrise)",
        "links": [
            "923891f5d3e27f13"
        ],
        "x": 635,
        "y": 780,
        "wires": []
    },
    {
        "id": "67b663c836889056",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "Event API (Sunset)",
        "links": [
            "923891f5d3e27f13"
        ],
        "x": 635,
        "y": 820,
        "wires": []
    },
    {
        "id": "fccde3b1c6d74d57",
        "type": "comment",
        "z": "427808241d304283",
        "name": "From API",
        "info": "",
        "x": 80,
        "y": 200,
        "wires": []
    },
    {
        "id": "923891f5d3e27f13",
        "type": "link in",
        "z": "427808241d304283",
        "name": "Event Scheduler API Handler",
        "links": [
            "67b663c836889056",
            "b443ac417c7a70f1",
            "b54e559135e567a0",
            "cee32bbd8ec92569"
        ],
        "x": 175,
        "y": 240,
        "wires": [
            [
                "266fa5850523710a"
            ]
        ]
    },
    {
        "id": "f283a18f727f7d39",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Websocket Connection",
        "info": "",
        "x": 140,
        "y": 140,
        "wires": []
    },
    {
        "id": "69dda5ef5e2c5df0",
        "type": "link out",
        "z": "427808241d304283",
        "name": "Event Scheduler API Response",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 835,
        "y": 500,
        "wires": []
    },
    {
        "id": "8f182a8917caaff6",
        "type": "function",
        "z": "427808241d304283",
        "name": "Update Event Data",
        "func": "const input_event = msg.payload\nconst events = flow.get('events')\nconst prev_event_values = events[ input_event.type ]\n\nevents[ input_event.type ] = {\n    ...prev_event_values, ...input_event\n}\n\nmsg.payload = events[ input_event.type ]\n\nflow.set('events', events)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "69dda5ef5e2c5df0",
                "2247154c64c64885"
            ]
        ]
    },
    {
        "id": "266fa5850523710a",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Device Check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "sound",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 120,
        "y": 360,
        "wires": [
            [
                "40cc1ee4203c67b1"
            ],
            [
                "24fc08548f841a57"
            ],
            [
                "8f182a8917caaff6"
            ]
        ]
    },
    {
        "id": "24fc08548f841a57",
        "type": "function",
        "z": "427808241d304283",
        "name": "Object Filter (Light)",
        "func": "const { type } = msg.payload\nconst events = flow.get('events')\nconst prev_light_state = events[type].light\n\nconst input_event = msg.payload.light\nconst falsy = !input_event\nconst is_not_an_object = typeof input_event !== 'object'\nconst is_array = Array.isArray(input_event)\nconst is_a_function = typeof input_event === 'function'\n\nconst error_message = 'light property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n    \nconst light_state = {\n    ...prev_light_state, ...input_event\n}\n\nmsg.payload = {\n    ...events[type],\n    ...msg.payload,\n    light: light_state\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "9408d853948da010"
            ]
        ]
    },
    {
        "id": "35d0e3b966410d3e",
        "type": "catch",
        "z": "427808241d304283",
        "name": "Catch Bad Request",
        "scope": [
            "24fc08548f841a57",
            "7c464e60a7b77c6d",
            "bd047f2cf479b3c2",
            "4fb25b3066115638",
            "8b5b691f8fe11007",
            "40cc1ee4203c67b1"
        ],
        "uncaught": false,
        "x": 250,
        "y": 540,
        "wires": [
            [
                "5fc1de1f0371f99f"
            ]
        ]
    },
    {
        "id": "5fc1de1f0371f99f",
        "type": "function",
        "z": "427808241d304283",
        "name": "Bad Request Handler",
        "func": "msg.payload = msg.error\nmsg.statusCode = 400\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 540,
        "wires": [
            [
                "69dda5ef5e2c5df0"
            ]
        ]
    },
    {
        "id": "4b3a54eafc04740c",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "4eff4186dc07b337"
        ],
        "x": 835,
        "y": 280,
        "wires": []
    },
    {
        "id": "4eff4186dc07b337",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "4b3a54eafc04740c",
            "4d27fc0b004cba69",
            "4b40149d09f49823",
            "f6a636151c32c1e8",
            "85cf2265447a95b4",
            "ad950fbd2fb39211"
        ],
        "x": 175,
        "y": 480,
        "wires": [
            [
                "8f182a8917caaff6"
            ]
        ]
    },
    {
        "id": "40cc1ee4203c67b1",
        "type": "function",
        "z": "427808241d304283",
        "name": "Object Filter (Sound)",
        "func": "const { type } = msg.payload\nconst events = flow.get('events')\nconst prev_sound_state = events[type].sound\n\nconst input_event = msg.payload.sound\nconst falsy = !input_event\nconst is_not_an_object = typeof input_event !== 'object'\nconst is_array = Array.isArray(input_event)\nconst is_a_function = typeof input_event === 'function'\n\nconst error_message = 'sound property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n    \nconst sound_state = {\n    ...prev_sound_state, ...input_event\n}\n\nmsg.payload = {\n    ...events[type],\n    ...msg.payload,\n    sound: sound_state\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 240,
        "wires": [
            [
                "565f95d10e299df3"
            ]
        ]
    },
    {
        "id": "565f95d10e299df3",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Sound Payload Check",
        "property": "payload.sound",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "onpayload",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "offpayload",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 600,
        "y": 240,
        "wires": [
            [
                "35b902818884c988"
            ],
            [
                "be115d4263a2a415"
            ],
            [
                "4b3a54eafc04740c"
            ]
        ]
    },
    {
        "id": "9408d853948da010",
        "type": "switch",
        "z": "427808241d304283",
        "name": "Light Payload Check",
        "property": "payload.sound",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "onpayload",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "offpayload",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 600,
        "y": 360,
        "wires": [
            [
                "0b4f7021b35a3798"
            ],
            [
                "0e99f2228c6314a1"
            ],
            [
                "4d27fc0b004cba69"
            ]
        ]
    },
    {
        "id": "4d27fc0b004cba69",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "4eff4186dc07b337"
        ],
        "x": 835,
        "y": 400,
        "wires": []
    },
    {
        "id": "0e99f2228c6314a1",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "258da716120f9d91"
        ],
        "x": 835,
        "y": 360,
        "wires": []
    },
    {
        "id": "0b4f7021b35a3798",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "bf64bbf5d4bb8e58"
        ],
        "x": 835,
        "y": 320,
        "wires": []
    },
    {
        "id": "be115d4263a2a415",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "017d53701a7db32c",
            "258da716120f9d91"
        ],
        "x": 835,
        "y": 240,
        "wires": []
    },
    {
        "id": "35b902818884c988",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "35062676617241b8"
        ],
        "x": 835,
        "y": 200,
        "wires": []
    },
    {
        "id": "8b5b691f8fe11007",
        "type": "function",
        "z": "427808241d304283",
        "name": "Sound Object Filter (On Payload)",
        "func": "const { onpayload } = msg.payload.sound\nconst falsy = !onpayload\nconst is_not_an_object = typeof onpayload !== 'object'\nconst is_array = Array.isArray(onpayload)\nconst is_a_function = typeof onpayload === 'function'\n\nconst error_message = 'onpayload property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 680,
        "wires": [
            [
                "4b40149d09f49823"
            ]
        ]
    },
    {
        "id": "4fb25b3066115638",
        "type": "function",
        "z": "427808241d304283",
        "name": "Sound Object Filter (Off Payload)",
        "func": "const { offpayload } = msg.payload.sound\nconst falsy = !offpayload\nconst is_not_an_object = typeof offpayload !== 'object'\nconst is_array = Array.isArray(offpayload)\nconst is_a_function = typeof offpayload === 'function'\n\nconst error_message = 'offpayload property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "4b40149d09f49823"
            ]
        ]
    },
    {
        "id": "35062676617241b8",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "35b902818884c988"
        ],
        "x": 295,
        "y": 680,
        "wires": [
            [
                "8b5b691f8fe11007"
            ]
        ]
    },
    {
        "id": "017d53701a7db32c",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "be115d4263a2a415"
        ],
        "x": 295,
        "y": 740,
        "wires": [
            [
                "4fb25b3066115638"
            ]
        ]
    },
    {
        "id": "4b40149d09f49823",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "4eff4186dc07b337"
        ],
        "x": 775,
        "y": 720,
        "wires": []
    },
    {
        "id": "7c464e60a7b77c6d",
        "type": "function",
        "z": "427808241d304283",
        "name": "Light Object Filter (On Payload)",
        "func": "const { onpayload } = msg.payload.light\nconst falsy = !onpayload\nconst is_not_an_object = typeof onpayload !== 'object'\nconst is_array = Array.isArray(onpayload)\nconst is_a_function = typeof onpayload === 'function'\n\nconst error_message = 'sound property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 620,
        "wires": [
            [
                "4b40149d09f49823"
            ]
        ]
    },
    {
        "id": "bd047f2cf479b3c2",
        "type": "function",
        "z": "427808241d304283",
        "name": "Light Object Filter (Off Payload)",
        "func": "const { offpayload } = msg.payload.light\nconst falsy = !offpayload\nconst is_not_an_object = typeof offpayload !== 'object'\nconst is_array = Array.isArray(offpayload)\nconst is_a_function = typeof offpayload === 'function'\n\nconst error_message = 'offpayload property must be an object'\n\nif (falsy || is_not_an_object || is_array || is_a_function) \n    throw new Error(error_message)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 800,
        "wires": [
            [
                "4b40149d09f49823"
            ]
        ]
    },
    {
        "id": "bf64bbf5d4bb8e58",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "0b4f7021b35a3798"
        ],
        "x": 295,
        "y": 620,
        "wires": [
            [
                "7c464e60a7b77c6d"
            ]
        ]
    },
    {
        "id": "258da716120f9d91",
        "type": "link in",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "be115d4263a2a415",
            "0e99f2228c6314a1"
        ],
        "x": 295,
        "y": 800,
        "wires": [
            [
                "bd047f2cf479b3c2"
            ]
        ]
    },
    {
        "id": "2247154c64c64885",
        "type": "link out",
        "z": "427808241d304283",
        "name": "",
        "links": [
            "259fcaaf2b86aa30"
        ],
        "x": 835,
        "y": 460,
        "wires": []
    },
    {
        "id": "a4fc78ecb023e5f0",
        "type": "range",
        "z": "39c947163c4b72c5",
        "minin": "0",
        "maxin": "100",
        "minout": "0",
        "maxout": "255",
        "action": "scale",
        "round": true,
        "property": "payload",
        "name": "Decimal Counter Range",
        "x": 250,
        "y": 180,
        "wires": [
            [
                "fba936b87591aa54"
            ]
        ]
    },
    {
        "id": "fba936b87591aa54",
        "type": "debug",
        "z": "39c947163c4b72c5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 180,
        "wires": []
    },
    {
        "id": "f23cdff951c7f4be",
        "type": "inject",
        "z": "e1a40699ea85764e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2520,
        "wires": [
            [
                "938ce01b32a69ba3"
            ]
        ]
    },
    {
        "id": "9b5102480a019f85",
        "type": "debug",
        "z": "e1a40699ea85764e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 2520,
        "wires": []
    },
    {
        "id": "938ce01b32a69ba3",
        "type": "function",
        "z": "e1a40699ea85764e",
        "name": "",
        "func": "msg.payload = \"Payload\"\n\nmsg.delay = 10000\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2520,
        "wires": [
            [
                "463433da6f3bb88d"
            ]
        ]
    },
    {
        "id": "463433da6f3bb88d",
        "type": "delay",
        "z": "e1a40699ea85764e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 520,
        "y": 2520,
        "wires": [
            [
                "9b5102480a019f85"
            ]
        ]
    },
    {
        "id": "3f5a7c9574b1777d",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/event",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "a4e0cf51c9a7d1eb"
            ]
        ]
    },
    {
        "id": "a4e0cf51c9a7d1eb",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Event Types Available",
        "func": "const events = flow.get('events')\n\nmsg.payload = events\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 940,
        "wires": [
            [
                "0b58e656f91710d1"
            ]
        ]
    },
    {
        "id": "0b58e656f91710d1",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "1bd0312798db6fb0"
        ],
        "x": 635,
        "y": 940,
        "wires": []
    },
    {
        "id": "cf7c569ef36c9c38",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/restnode/audio/assets",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "b1c4643e4ab543a5"
            ]
        ]
    },
    {
        "id": "b1c4643e4ab543a5",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "links": [
            "c8535874aa1ff738"
        ],
        "x": 635,
        "y": 1020,
        "wires": []
    }
]