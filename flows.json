[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bec86240dee2b9be",
        "type": "tab",
        "label": "restnode",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2beab0d8.f64dc",
        "type": "subflow",
        "name": "Light Quick Fade-On",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 60,
                "wires": [
                    {
                        "id": "c9f5b0f2.57521"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 840,
            "y": 60,
            "wires": [
                {
                    "id": "6233e22c.fb4eec",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e3bb1fc6.01612",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#89a45b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#89a45b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#89a45b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#acbf8c",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#89a45b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3f2c5e5d.9118c2",
        "type": "ui_tab",
        "name": "REST Sleep Node",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9129e728.6627d8",
        "type": "ui_group",
        "name": "System Control",
        "tab": "3f2c5e5d.9118c2",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "9933a45d.b3b0e",
        "type": "ui_group",
        "name": "Nightlight",
        "tab": "3f2c5e5d.9118c2",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "91c4859.9f3e5f8",
        "type": "ui_group",
        "name": "WakeUp Light",
        "tab": "3f2c5e5d.9118c2",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "426403b1.4aa8dc",
        "type": "ui_group",
        "name": "Manual Control",
        "tab": "3f2c5e5d.9118c2",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "a81e9f61.3e719",
        "type": "ui_group",
        "name": "Audio Selection",
        "tab": "3f2c5e5d.9118c2",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "52e48fc7e732e998",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "40ef7a4d5276a89c"
            ]
        ]
    },
    {
        "id": "5eb5521bb04f5b3e",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 100,
        "wires": []
    },
    {
        "id": "40ef7a4d5276a89c",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "5eb5521bb04f5b3e"
            ]
        ]
    },
    {
        "id": "246d0eb029f31c99",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "db69395b900aceee"
            ]
        ]
    },
    {
        "id": "db69395b900aceee",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "203b5aa236b598ed"
            ]
        ]
    },
    {
        "id": "203b5aa236b598ed",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 200,
        "wires": []
    },
    {
        "id": "3bcabf98.3b81",
        "type": "link in",
        "z": "2beab0d8.f64dc",
        "name": "quickFadeOn",
        "links": [],
        "x": 90,
        "y": 140,
        "wires": [
            [
                "c9f5b0f2.57521"
            ]
        ],
        "l": true
    },
    {
        "id": "4fd7a6cd.192be8",
        "type": "delay",
        "z": "2beab0d8.f64dc",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "883559c4.769128"
            ]
        ]
    },
    {
        "id": "bf9ec4d.2f82938",
        "type": "change",
        "z": "2beab0d8.f64dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "-127",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 100,
        "wires": [
            [
                "3096a8ec.3f6f78",
                "6233e22c.fb4eec"
            ]
        ]
    },
    {
        "id": "883559c4.769128",
        "type": "function",
        "z": "2beab0d8.f64dc",
        "name": "Increment Brightness",
        "func": "const scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\n// If at the max brightness, then terminate the sub-flow\nif (msg.payload >= 128) {\n    return;\n}\n    \n// Otherwise, increment the brightness\nmsg.payload += 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "6233e22c.fb4eec"
            ]
        ]
    },
    {
        "id": "cd1bd09d.e12dd",
        "type": "inject",
        "z": "2beab0d8.f64dc",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-128",
        "payloadType": "num",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "bf9ec4d.2f82938"
            ]
        ]
    },
    {
        "id": "3096a8ec.3f6f78",
        "type": "function",
        "z": "2beab0d8.f64dc",
        "name": "Enable/disable",
        "func": "// If the light is not off, then enable the control GPIO\nif (msg.payload != 0)\n    msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "41869b78.d5b4e4"
            ]
        ]
    },
    {
        "id": "c9f5b0f2.57521",
        "type": "delay",
        "z": "2beab0d8.f64dc",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "bf9ec4d.2f82938"
            ]
        ]
    },
    {
        "id": "0fc226179e56698f",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "Clock",
        "payloadType": "date",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "ae9b982c6afab139"
            ]
        ]
    },
    {
        "id": "0410f0ed780f673c",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "set_waketime",
        "func": "const zeroPad = (num, places) => String(num).padStart(places, '0');\nconst twoDigitPad = (num) => zeroPad(num, 2);\nconst formatHHMM = (hours ,minutes) => `${twoDigitPad(hours)}:${twoDigitPad(minutes)}`;\nconst toMilliseconds = (minutes) => {\n    // Convert minutes to milliseconds\n  return minutes * 60000; // 60,000 millisec in a minute\n}\nconst formatMillisecondsAsHHMM = (millisecondsSinceMidnight) => {\n    // Convert the tim einmilliseconds since midnight to an hour-minute-seconds string \n    let hoursSinceMidnight = Math.floor(millisecondsSinceMidnight / 3600000);\n    let minutesPastTheHour = Math.floor((millisecondsSinceMidnight - hoursSinceMidnight * 3600000) / 60000);\n    if (hoursSinceMidnight > 12)\n        hoursSinceMidnight -= 12;\n    return formatHHMM(hoursSinceMidnight, minutesPastTheHour);\n}\n\n// Calculate the times that each step in the wakeup sequence should execute\n\nlet wakeupOffsetMs = msg.payload;\n\nconst MinutesBeforeWakeTimeToStartFadingInWakeLight = 30;\nconst MinutesAfterWakeTimeToTurnOffWakeLight = 15;\n\nflow.set(\"wakeOffsetMs\", wakeupOffsetMs);\nflow.set(\"wakeLightStartFadeInOffsetMs\", wakeupOffsetMs - toMilliseconds(MinutesBeforeWakeTimeToStartFadingInWakeLight));\nflow.set(\"wakeLightTurnOffOffsetMs\", wakeupOffsetMs + toMilliseconds(MinutesAfterWakeTimeToTurnOffWakeLight));\n\nnode.log(\"Waketime: \" + formatMillisecondsAsHHMM(wakeupOffsetMs));\nnode.log(\"WakeLight Start FadeIn Time: \" + formatMillisecondsAsHHMM(flow.get(\"wakeLightStartFadeInOffsetMs\")));\nnode.log(\"WakeLight Off Time: \" + formatMillisecondsAsHHMM(flow.get(\"wakeLightTurnOffOffsetMs\")));\n\n// Convert the waketime into a Date object for a pretty node.status() message\nlet now = new Date();\nlet hoursSinceMidnight = Math.floor(wakeupOffsetMs / 3600000);\nlet minutesPastTheHour = Math.floor((wakeupOffsetMs - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((wakeupOffsetMs / 1000) % 60);\nlet wakeTime = new Date(now.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0));\nwakeTime.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0);\nnode.status({text:wakeTime.toLocaleTimeString()});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "f7487ce62259b9b2",
                "6455e4220fb9d87f"
            ]
        ]
    },
    {
        "id": "ae9b982c6afab139",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "mainTimerControl",
        "func": "const zeroPad = (num, places) => String(num).padStart(places, '0');\nconst twoDigitPad = (num) => zeroPad(num, 2);\nconst formatHHMMSS = (hours ,minutes, seconds) => `${twoDigitPad(hours)}:${twoDigitPad(minutes)}:${twoDigitPad(seconds)}`;\nconst toMilliseconds = (minutes) => {\n    // Convert minutes to milliseconds\n  return minutes * 60000; // 60,000 millisec in a minute\n}\nlet status = flow.get('status');\nnode.log(`status ${status}`);\n\n// Since this node is triggered once a second, determine if\n// this is the first tick/run after the user clicked the \"START\" button\n// (this allows for other nodes to do their action ONCE after being\n// started, like playing audio. Without this flag, the audio player\n// would be invoked multiple times and play overlapping audio)\n//\n// Valid \"status\" values are\n//  - stopped - NODE is \"off\"\n//  - starting - User just clicked the \"START\" button and this is the first tick/run\n//  - started - This is the second or later tick/run after the user clicked the \"START\" button\nlet isFirstTickAfterStarting = false;\nif (status == \"starting\") {\n    isFirstTickAfterStarting = true;\n    flow.set(\"isFirstTickAfterStarting\", true); // Temporarily set this \"flag\" to inform other nodes\n    flow.set(\"status\", \"started\") ;\n} else if (status == \"started\") {\n    // If this is not the first tick/run after being started, then clear the flag\n    // so other nodes won't run their \"first tick\" action anymore\n    flow.set(\"isFirstTickAfterStarting\");\n}\n\n// Get the current time, in milliseconds since midnight\nlet now = new Date();\nnow = now.getTime() - now.setHours(0,0,0,0);\n\n// Convert the current time to a string so it can be displayed in the flow\nlet hoursSinceMidnight = Math.floor(now / 3600000);\nlet minutesPastTheHour = Math.floor((now - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((now / 1000) % 60);\nif (hoursSinceMidnight > 12)\n    hoursSinceMidnight -= 12;\nlet hoursMinutesSecondsSinceMidnight = formatHHMMSS(hoursSinceMidnight, minutesPastTheHour, secondsPastTheHour);\n\n// Only do this if the system is running\nif(status === \"stopped\") {\n    node.status({ fill:'red', text:`${hoursMinutesSecondsSinceMidnight} ${flow.get(\"status\")}` });\n    return msg;\n}\n\n// System is \"running\", so show green fill\nnode.status({ fill:'green', text:`${hoursMinutesSecondsSinceMidnight} ${flow.get(\"status\")}`});\n\n\n// First: Handle wake-up seqence below\n\nlet wakeOffsetMs = flow.get(\"wakeOffsetMs\");\nlet wakeLightStartFadeInOffsetMs = flow.get(\"wakeLightStartFadeInOffsetMs\");\nlet wakeLightTurnOffOffsetMs = flow.get(\"wakeLightTurnOffOffsetMs\");\nlet maxPwmDutyCycle = flow.get(\"pwm_wu_max\");\n\n// Is it time to start the wake light fade-on sequence?\n// (just check if we're +/- 1 sec of the wake light fade-on time, since this function is only called once a sec)// OR\n// If the current time is past when the wake light should have\n// started to fade-on AND the current time is not yet past the time at which the light should turn fully on\n// (this allows for the NODE to be started within the wake light's\n// fade-on period and have the light jump to fading on, useful for testing)\nif ((Math.abs(now - wakeLightStartFadeInOffsetMs) < 500) || \n    ((now > wakeLightStartFadeInOffsetMs) && (now < wakeOffsetMs))) {\n    // Then it's time to fade in the wakeup light\n    // (convert the time remaining to a PWM duty cycle percentage)\n    let pwm_wu = Math.ceil(100 * ((now - wakeLightStartFadeInOffsetMs)/(wakeOffsetMs - wakeLightStartFadeInOffsetMs)));\n    pwm_wu = Math.min(pwm_wu, maxPwmDutyCycle);\n    node.log(\"1 pwm_wu \" + pwm_wu);\n    flow.set('pwm_wu', pwm_wu);\n}\n\n// Is it time to wake up and keep the wake light 100% on for a period of time after?\nif ((now >= wakeOffsetMs) && (now < wakeLightTurnOffOffsetMs)) {\n    // Yes, time to wake up and fully turn on the wakeup light\n    let pwm_wu = maxPwmDutyCycle;\n    node.log(\"2 pwm_wu \" + pwm_wu);\n    flow.set('pwm_wu', pwm_wu);\n}\n\n// If the current time is past MinutesAfterWakeTimeToTurnOffWakeLight, then turn off the wake light\n// (just check if we're +/- 1 sec of the wake light turn off time, since this function is only called once a sec)\nif (Math.abs(now - wakeLightTurnOffOffsetMs) < 500) {\n    // Then it's time to turn off the wakeup light\n    let pwm_wu = 0;\n    node.log(\"3 pwm_wu \" + pwm_wu);\n    flow.set('pwm_wu', pwm_wu);\n}\n\n// Second: Handle sleep/bedtime sequence below\n\nlet bedOffsetMs = flow.get(\"bedOffsetMs\");\nlet nightlightOnOffsetMs = flow.get(\"nightlightOnOffsetMs\");\nlet nightlightStartFadeOutOffsetMs = flow.get(\"nightlightStartFadeOutOffsetMs\");\n\n// Is it time to start fading-off the nightlight?\nif ((now < bedOffsetMs) && (now > nightlightStartFadeOutOffsetMs)) {\n    let pwm_nl = Math.floor(100 - (100.0 * ((now - nightlightStartFadeOutOffsetMs)/(bedOffsetMs - nightlightStartFadeOutOffsetMs))));\n    node.log(\"pwm_nl: \" + pwm_nl);\n    flow.set('pwm_nl', pwm_nl);\n}\n\n// Time to turn on the night light?\n// Either at the correct starting time OR\n// the current time is past the \"nightlight on time\" AND the current time isn't yet to the \"nightlight starting fading off\" time\nif ((Math.abs(now - nightlightOnOffsetMs) < 500) || \n    (now > nightlightOnOffsetMs && now < nightlightStartFadeOutOffsetMs)) {\n    // Yes, activate the sleep sequence and turn on the night light (100% duty cycle)\n    let pwm_nl = 100;\n    node.log(\"pwm_nl: \" + pwm_nl);\n    flow.set('pwm_nl', pwm_nl);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "fdc77b8a8db18eb4",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "turnOnOffNL",
        "func": "if (msg.payload) {\n    // Trigger night light's \"quick fade-on\"\n    flow.set('pwm_nl', 100);\n    return [ msg, null ];\n} else {\n    // Turning the night light off, so just turn it off without any fading\n    flow.set('pwm_nl', 0);\n    return [ null, msg ];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 760,
        "wires": [
            [
                "59aaf678a52d234d"
            ],
            [
                "0d0d0ab42d53c251"
            ]
        ],
        "outputLabels": [
            "On",
            "Off"
        ]
    },
    {
        "id": "570810545bd8b4e9",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "turnOnOffWU",
        "func": "// Map true/false to a brightness level (0% or 100%)\nif (msg.payload) {\n    flow.set('pwm_wu', flow.get(\"pwm_wu_max\"));\n} else {\n    flow.set('pwm_wu', 0);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 800,
        "wires": [
            [
                "482d101208bf12f0"
            ]
        ]
    },
    {
        "id": "37855b136f08bd51",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "setSystemSettings",
        "func": "var settings = flow.get('settings') || {};\nsettings[msg.topic] = msg.payload; // Sets 'settings.start_now' to true/false\nflow.set('settings', settings);\n\nlet now = new Date();\nlet msSinceMidnight = now.getTime() - now.setHours(0,0,0,0);\n\nflow.set('bedOffsetMs', msSinceMidnight);\n\n// For debugging\nlet hoursSinceMidnight = Math.floor(msSinceMidnight/(3600000 ));\nlet minutesPastTheHour = Math.floor((msSinceMidnight - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((msSinceMidnight / 1000) % 60);\nlet hoursMinutesSecondsSinceMidnight = \n    `${hoursSinceMidnight}:${minutesPastTheHour}:${secondsPastTheHour}`;\nnode.status({text:hoursMinutesSecondsSinceMidnight});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "af4a1f33f5707daf",
        "type": "comment",
        "z": "bec86240dee2b9be",
        "name": "ManualControlOfLights",
        "info": "Modifiying any of these controls will stop the current sequence.",
        "x": 160,
        "y": 640,
        "wires": []
    },
    {
        "id": "cf5b6d4f91dc95a1",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "d": true,
        "name": "OnStartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "155f3cf7d07a4cbe"
            ]
        ]
    },
    {
        "id": "b25a335ce8be0a61",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "OnStartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "InitialValues",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "12a7eab04963eede"
            ]
        ]
    },
    {
        "id": "b5be2f88e79e2c0d",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "setInitialValues",
        "func": "node.log(\"Setting initial values\");\n\n//// Only overwrite settings that are missing\nif (!flow.get(\"nl_fadeout\"))\n    flow.set(\"nl_fadeout\", 45);\nif (!flow.get(\"wu_fadein\"))\n    flow.set(\"wu_fadein\", 30);\n// if (!flow.get(\"waketime\"))\n//     flow.set(\"waketime\", 0);\nif (!flow.get(\"sleep_hours\"))\n    flow.set(\"sleep_hours\", 8);\nif (!flow.get(\"sleep_minutes\"))\n    flow.set(\"sleep_minutes\", 0);\nif (!flow.get(\"pwm_wu_max\"))\n    flow.set(\"pwm_wu_max\", 75);\n    \nflow.set(\"pwm_wu\", 0);\nflow.set(\"pwm_nl\", 0);\nflow.set(\"status\", \"stopped\");\n\n//let projectDir = msg.payload.trim() + '/.node-red/';\nlet projectDir = msg.payload.trim() + '/yogasleepnode-master/';\nflow.set(\"projectDir\", projectDir);\n\nlet audioDir = projectDir + 'yogapod_audio/';\nflow.set(\"audioDir\", audioDir);\n\nlet defaultSettings = {\n    start_now: false,\n    isoAudioEnabled: false,\n    play_audio: true,\n    background_volume: 2,\n    background_noise: \"noSound\",\n    awakening_sound: \"noSound\",\n    awakening_volume: 2,\n    relax_technique: \"noSound\",\n    relax_volume: 5,\n};\n\nlet settings = flow.get(\"settings\") || defaultSettings;\n\n// Only overwrite settings that are missing\nif (!settings.background_volume)\n    settings.background_volume = defaultSettings.background_volume;\nif (!settings.awakening_volume)\n    settings.awakening_volume = defaultSettings.awakening_volume;\nif (!settings.background_noise)\n    settings.background_noise = defaultSettings.background_noise;\nif (!settings.awakening_sound)\n    settings.awakening_sound = defaultSettings.awakening_sound;\nif (!settings.relax_technique)\n    settings.relax_technique = defaultSettings.relax_technique;\nif (!settings.relax_volume)\n    settings.relax_volume = defaultSettings.relax_volume;\nif (!settings.play_audio)\n    settings.play_audio = true;\n    \nflow.set(\"settings\", settings);\n\nnode.status({fill:'green',text:\"All Set\"});\n\n// Set the start/stop button to START, since we're just starting up\nmsg.payload = \"Start\";\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "a12b49de590c7d68",
                "142c09f5ead06703"
            ]
        ]
    },
    {
        "id": "7ce7ebac7b1ca6c2",
        "type": "status",
        "z": "bec86240dee2b9be",
        "name": "setInitStatus",
        "scope": [
            "b5be2f88e79e2c0d"
        ],
        "x": 330,
        "y": 500,
        "wires": [
            [
                "369dc82edecb7a5e",
                "6f51c63d413ff77b",
                "646968083b188d4d",
                "a51fde0545f2da2f",
                "bd6964bb416c845a"
            ]
        ]
    },
    {
        "id": "12a7eab04963eede",
        "type": "exec",
        "z": "bec86240dee2b9be",
        "command": "echo ~",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "getHomeDir",
        "x": 350,
        "y": 140,
        "wires": [
            [
                "b5be2f88e79e2c0d",
                "f1bb6a4093bc6759"
            ],
            [],
            []
        ]
    },
    {
        "id": "119b59a37a4d4ac1",
        "type": "status",
        "z": "bec86240dee2b9be",
        "name": "Start Bedtime Now",
        "scope": [
            "142c09f5ead06703"
        ],
        "x": 170,
        "y": 400,
        "wires": [
            [
                "ccbe71f4801b433d"
            ]
        ]
    },
    {
        "id": "ccbe71f4801b433d",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Enable/disable Bed Time",
        "func": "// If the \"Start Bedtime Now\" is ON/Enabled\n// then disable the \"Bed Time\" time input\nif(msg.status.text === 'on'){\n    msg[\"enabled\"] = false;\n}else{\n    msg[\"enabled\"] = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "f1bb6a4093bc6759",
        "type": "debug",
        "z": "bec86240dee2b9be",
        "d": true,
        "name": "HOME_DIR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "abfad474894b545b",
        "type": "link in",
        "z": "bec86240dee2b9be",
        "name": "",
        "links": [
            "bd0277ef.079188"
        ],
        "x": 695,
        "y": 460,
        "wires": [
            [
                "9870cb848d34e642"
            ]
        ]
    },
    {
        "id": "2fc738e26515ffd3",
        "type": "link in",
        "z": "bec86240dee2b9be",
        "name": "",
        "links": [
            "a0f9521a.06912"
        ],
        "x": 695,
        "y": 560,
        "wires": [
            [
                "fc092f2794f05478"
            ]
        ]
    },
    {
        "id": "1bd3578e31a8b4b0",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 700,
        "wires": [
            [
                "1538a8a62d46a7ab",
                "482d101208bf12f0"
            ]
        ]
    },
    {
        "id": "1538a8a62d46a7ab",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Scale NL Bright to PWM",
        "func": "const scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nlet pwmDutyCycle = flow.get('pwm_nl');\nif (pwmDutyCycle > 100)\n    pwmDutyCycle = 100;\nif (pwmDutyCycle < 0)\n    pwmDutyCycle = 0;\n\n// If the nightlight is being turned on \n// (either manually or automatically), then\n// trigger the \"turn on\" subflow by sending a message\n// to the second output\nif ((msg.payload == 100) || (pwmDutyCycle == 100))\n    return [ null, msg ];\n\n// Otherwise, the nightlight is being faded-out, so pass along\n// the PWM value to the first output\nmsg.payload = Math.round(scale(pwmDutyCycle, 0, 100, 0, 255));\nnode.status(msg.payload);\n\n// If the nightlight is being turned off, then reset\n// the trigger/latch that protects the \"Fade-in\" sub-flow\n// so that the light can be turned on again\nif (pwmDutyCycle == 0) {\n    return [ msg, msg ]; // Send to both outputs to reset the trigger\n} else {\n    return [ msg, null ];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 680,
        "wires": [
            [
                "c304be1f2b0de421",
                "0d0d0ab42d53c251"
            ],
            [
                "59aaf678a52d234d"
            ]
        ],
        "outputLabels": [
            "FadeOut",
            "QuickFadeOn"
        ]
    },
    {
        "id": "482d101208bf12f0",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Scale WL Bright to PWM",
        "func": "// Scale brightness percentage to a PWM duty cycle of 0-255\n\nconst scale = (num, in_min, in_max, out_min, out_max) => {\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nlet pwmDutyCycle = flow.get('pwm_wu');\nlet maxPwmDutyCycle = flow.get(\"pwm_wu_max\");\n\nif (pwmDutyCycle > maxPwmDutyCycle)\n    pwmDutyCycle = maxPwmDutyCycle;\nif (pwmDutyCycle < 0)\n    pwmDutyCycle = 0;\n\nmsg.payload = Math.round(scale(pwmDutyCycle, 0, 100, 0, 255));\n\nnode.status(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 780,
        "wires": [
            [
                "50ca7f3a9655b8f9",
                "2a66482516230d0b"
            ]
        ]
    },
    {
        "id": "795f18ec873f1710",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "OnStartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "182e77fe4fc8950b",
                "9486602c5812b3d7",
                "30f4b6d8e649f72d"
            ]
        ]
    },
    {
        "id": "a12b49de590c7d68",
        "type": "link out",
        "z": "bec86240dee2b9be",
        "name": "",
        "links": [
            "7580287265e63683"
        ],
        "x": 745,
        "y": 140,
        "wires": []
    },
    {
        "id": "0d0d0ab42d53c251",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Enable/disable",
        "func": "// If the light is not off, then enable the control GPIO\nif (msg.payload != 0)\n    msg.payload = 1;\n    \nnode.status(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 640,
        "wires": [
            [
                "3bed6a97686e3a0b"
            ]
        ]
    },
    {
        "id": "50ca7f3a9655b8f9",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Enable/disable",
        "func": "// If the brightness is not off, then enable the control GPIO\n// so the panel can light up\nif (msg.payload != 0)\n    msg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 820,
        "wires": [
            [
                "38300ce0b06090b6"
            ]
        ]
    },
    {
        "id": "2a66482516230d0b",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Enable/disable",
        "func": "if (msg.payload != 0)\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 780,
        "wires": [
            [
                "5206674db7e99842"
            ]
        ]
    },
    {
        "id": "c304be1f2b0de421",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Enable/disable",
        "func": "if (msg.payload != 0)\n    return msg;\nelse\n    return;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 740,
        "wires": [
            [
                "5206674db7e99842"
            ]
        ]
    },
    {
        "id": "5206674db7e99842",
        "type": "range",
        "z": "bec86240dee2b9be",
        "minin": "0",
        "maxin": "255",
        "minout": "-128",
        "maxout": "127",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "",
        "x": 1230,
        "y": 760,
        "wires": [
            [
                "b33efcb16cb2cd5d"
            ]
        ]
    },
    {
        "id": "6455e4220fb9d87f",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "calculateBedTime",
        "func": "const zeroPad = (num, places) => String(num).padStart(places, '0');\nconst twoDigitPad = (num) => zeroPad(num, 2);\nconst toMilliseconds = (minutes) => {\n    // Convert minutes to milliseconds\n  return minutes * 60000; // 60,000 millisec in a minute\n}\nconst formatHHMM = (hours ,minutes) => `${twoDigitPad(hours)}:${twoDigitPad(minutes)}`;\nconst formatMillisecondsAsHHMM = (millisecondsSinceMidnight) => {\n    // Convert the tim einmilliseconds since midnight to an hour-minute-seconds string \n    let hoursSinceMidnight = Math.floor(millisecondsSinceMidnight / 3600000);\n    let minutesPastTheHour = Math.floor((millisecondsSinceMidnight - hoursSinceMidnight * 3600000) / 60000);\n    if (hoursSinceMidnight > 12)\n        hoursSinceMidnight -= 12;\n    return formatHHMM(hoursSinceMidnight, minutesPastTheHour);\n}\nconst adjustIfTimeHasMovedIntoPreviousDay = (offsetInMs) => {\n    \n    const LengthOfDayInMs = 24 * 60 * 60 * 1000;\n    \n    // Add a full day so we can't return a negative time-offset value\n    offsetInMs += LengthOfDayInMs;\n    \n    // If the time-offset has increased into the next day, then subtract the added day\n    if (offsetInMs > LengthOfDayInMs)\n        offsetInMs -= LengthOfDayInMs;\n        \n    return offsetInMs;\n}\n\n\nif (msg.enabled == false)\n    // Do nothing and ignore msg\n    return;\n\n// Only save these two settings, since the other settings/inputs\n// are already being saved elsewhere\nswitch (msg.topic) {\n    case \"sleep_hours\":\n    case \"sleep_minutes\":\n        flow.set(msg.topic, msg.payload);\n        break;\n        \n    default:\n        // Do nothing for other settings/inputs\n        break;\n}\n\nlet sleepHours = flow.get(\"sleep_hours\");\nlet sleepMinutes = flow.get(\"sleep_minutes\");\nlet wakeOffsetMs = flow.get(\"wakeOffsetMs\");\n\n// If the wake time hasn't yet been set, then comsume the\n// message so that the \"Calculated Bed Time\" doesn't display \"Invalid Date\"\nif (!wakeOffsetMs) {\n    msg.payload = \"\";\n    return msg;\n}\n\n// Calculate the bedtime\nconst LengthOfDayInMs = 24 * 60 * 60 * 1000;\nlet bedTimeOffsetMs = LengthOfDayInMs; // Add a full day so we can't return a negative bedtime value\nbedTimeOffsetMs += wakeOffsetMs;\nbedTimeOffsetMs -= sleepHours * 60 * 60 * 1000;\nbedTimeOffsetMs -= sleepMinutes * 60 * 1000;\nif (bedTimeOffsetMs > LengthOfDayInMs) // If bedtime has increased into the next day, then subtract the added day\n    bedTimeOffsetMs -= LengthOfDayInMs;\n\n// Store the new sleep sequence times\n// These times define the start of all the parts of the sleep sequence\n// (ex. when to turn on the night light, when to play the background noise, \n// when to play the \"relaxation technique\" audio, when to turn off the nightlight, etc)\n\nconst MinutesBeforeBedTimeToTurnOnNightlight = 60;\nconst MinutesBeforeBedTimeToStartPlayingBackgroundNoise = 60;\nconst MinutesBeforeBedTimeToStartPlayingRelaxationTechnique = 30;\nconst MinutesBeforeBedTimeToStartFadingOutNightlight = 30;\n\nflow.set(\"bedOffsetMs\", bedTimeOffsetMs);\nflow.set(\"nightlightOnOffsetMs\", adjustIfTimeHasMovedIntoPreviousDay(bedTimeOffsetMs - toMilliseconds(MinutesBeforeBedTimeToTurnOnNightlight)));\nflow.set(\"backgroundNoiseStartOffsetMs\", adjustIfTimeHasMovedIntoPreviousDay(bedTimeOffsetMs - toMilliseconds(MinutesBeforeBedTimeToStartPlayingBackgroundNoise)));\nflow.set(\"relaxationTechniqueStartOffsetMs\", adjustIfTimeHasMovedIntoPreviousDay(bedTimeOffsetMs - toMilliseconds(MinutesBeforeBedTimeToStartPlayingRelaxationTechnique)));\nflow.set(\"nightlightStartFadeOutOffsetMs\", adjustIfTimeHasMovedIntoPreviousDay(bedTimeOffsetMs - toMilliseconds(MinutesBeforeBedTimeToStartFadingOutNightlight)));\n\n// Get the hours/minutes/seconds component of the calculated bedtime so it can be displayed\nlet hoursSinceMidnight = Math.floor(bedTimeOffsetMs/(3600000 ));\nlet minutesPastTheHour = Math.floor((bedTimeOffsetMs - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((bedTimeOffsetMs / 1000) % 60);\n\n// Convert the bedtime into a Date object for the UI\nlet now = new Date();\nlet bedTime = new Date(now.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0));\nbedTime.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0);\nmsg.payload = bedTime.toLocaleTimeString();\n\nnode.log(\"Bedtime: \" + msg.payload);\nnode.log(\"Nightlight On Time: \" + formatMillisecondsAsHHMM(flow.get(\"nightlightOnOffsetMs\")));\nnode.log(\"Background Noise Start Time: \" + formatMillisecondsAsHHMM(flow.get(\"backgroundNoiseStartOffsetMs\")));\nnode.log(\"Relax Tech. Start Time: \" + formatMillisecondsAsHHMM(flow.get(\"relaxationTechniqueStartOffsetMs\")));\nnode.log(\"Nightlight Start Fade-out Time: \" + formatMillisecondsAsHHMM(flow.get(\"nightlightStartFadeOutOffsetMs\")));\nnode.status({text:msg.payload});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 340,
        "wires": [
            [
                "9a8c0c06cee87108"
            ]
        ]
    },
    {
        "id": "646968083b188d4d",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Get sleep_hours",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sleep_hours",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 280,
        "wires": [
            [
                "3f43933fc95aaea3"
            ]
        ]
    },
    {
        "id": "6f51c63d413ff77b",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Get sleep_minuntes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sleep_minutes",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 340,
        "wires": [
            [
                "635b2ab039302392"
            ]
        ]
    },
    {
        "id": "a51fde0545f2da2f",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Get nl_fadeout",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "nl_fadeout",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 480,
        "wires": [
            [
                "9870cb848d34e642"
            ]
        ]
    },
    {
        "id": "bd6964bb416c845a",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Get wu_fadein",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "wu_fadein",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 540,
        "wires": [
            [
                "fc092f2794f05478"
            ]
        ]
    },
    {
        "id": "cd406526aebce552",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Set nl_fadeout",
        "rules": [
            {
                "t": "set",
                "p": "nl_fadeout",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "551248ed16475f71",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Set wu_fadein",
        "rules": [
            {
                "t": "set",
                "p": "wu_fadein",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d3ec6a7df3a69aad",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "9fc4a5fbccf297a6"
            ]
        ]
    },
    {
        "id": "9fc4a5fbccf297a6",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Set Short Fade-out/in",
        "func": "// For easier debugging\nnode.log(\"Changing fade-out/in to 3 minutes\");\n\nflow.set(\"nl_fadeout\", 3);\nflow.set(\"wu_fadein\", 3);\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "efeebc967ce10282",
        "type": "subflow:2beab0d8.f64dc",
        "z": "bec86240dee2b9be",
        "name": "",
        "env": [],
        "x": 1300,
        "y": 700,
        "wires": []
    },
    {
        "id": "59aaf678a52d234d",
        "type": "trigger",
        "z": "bec86240dee2b9be",
        "name": "",
        "op1": "100",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1100,
        "y": 700,
        "wires": [
            [
                "efeebc967ce10282"
            ]
        ]
    },
    {
        "id": "794317ba5fa71c46",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Enable/Disable Start/Stop",
        "func": "msg.payload = \"Start\";\n\n// Enable the Start button only if a wake time has been set\nlet wakeOffsetMs = flow.get(\"wakeOffsetMs\");\nmsg.enabled = (wakeOffsetMs && (wakeOffsetMs != 0));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1080,
        "wires": [
            [
                "612c17732b2e6869"
            ]
        ]
    },
    {
        "id": "f7487ce62259b9b2",
        "type": "link out",
        "z": "bec86240dee2b9be",
        "name": "",
        "links": [
            "a500887d782bb91d"
        ],
        "x": 1255,
        "y": 420,
        "wires": []
    },
    {
        "id": "a500887d782bb91d",
        "type": "link in",
        "z": "bec86240dee2b9be",
        "name": "",
        "links": [
            "f7487ce62259b9b2",
            "0e474670d2be2268"
        ],
        "x": 75,
        "y": 1080,
        "wires": [
            [
                "794317ba5fa71c46"
            ]
        ]
    },
    {
        "id": "777684c0c25a5707",
        "type": "comment",
        "z": "bec86240dee2b9be",
        "name": "Main Application Tick & Logic",
        "info": "",
        "x": 180,
        "y": 940,
        "wires": []
    },
    {
        "id": "a659c39369cd5e71",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "setSystemState",
        "func": "\nlet status = flow.get('status');\nnode.log(`status ${status}`);\n\n// Disable the Start button if the wake time is not set\nlet wakeOffsetMs = flow.get(\"wakeOffsetMs\");\nif (!wakeOffsetMs || wakeOffsetMs == 0) {\n    msg.enabled = false;\n}\n\nif (status == \"stopped\") {\n    // Enable the REST Node's behavior\n    flow.set('status', \"starting\");\n    msg.payload = \"Stop\";\n} else {\n    // Disable the REST Node's behavior\n    flow.set('status', \"stopped\");\n    msg.payload = \"Start\";\n}\n\nreturn msg;\n\n/*\n\nif (!flow.get('settings').start_now) {\n    \n    switch (status) {\n        case 'running':\n        case 'waiting':\n            msg.payload = 'Start'; // Set new label\n            flow.set('status', 'stopped');\n            flow.set(\"pwm_wu\", 0);\n            flow.set(\"pwm_nl\", 0);\n            node.status({fill:\"red\",shape:\"dot\",text:\"stopped\"});\n            break;\n        \n        case 'stopped':\n        default:\n            msg.payload = 'Stop'; // Set new label\n            flow.set('status', 'waiting');\n            flow.set(\"pwm_wu\", 0);\n            flow.set(\"pwm_nl\", 0);\n            flow.set('wu_status', '');\n            //flow.set('initial_condition', {'nl':flow.get('nl_fadeout'), 'wu':flow.get('wu_fadein')});\n            node.status({fill:\"yellow\",shape:\"dot\",text:\"waiting\"});\n            break;\n    }\n}\n*/\n/*\nelse {\n    if (flow.get('status') === 'running') {\n        // STOP PROGRAM\n        msg.payload = 'Start'; // Set new label\n        flow.set('status', 'stopped');\n        flow.set(\"pwm_wu\", 0);\n        flow.set(\"pwm_nl\", 0);\n        node.status({fill:\"red\",shape:\"dot\",text:\"stopped\"});\n        \n    } else {\n        // START PROGRAM\n        msg.payload = 'Stop';\n        \n        // User clicked \"Start\" with the \"Start Now\" option selected\n        if (flow.get('settings').start_now) {\n            // So set the bedtime to the current time\n            let now = new Date();\n            let msSinceMidnight = now.getTime() - now.setHours(0,0,0,0);\n            flow.set(\"bedOffsetMs\", msSinceMidnight)\n        }\n        \n        flow.set(\"pwm_wu\", 0);\n        flow.set(\"pwm_nl\", 0);\n        //flow.set('initial_condition', {'nl':flow.get('nl_fadeout'), 'wu':flow.get('wu_fadein')});\n        flow.set('status', 'running');\n        flow.set('wu_status', '');\n        node.status({fill:\"green\",shape:\"dot\",text:\"running\"});\n    }\n}\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('status', 'stopped');",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1080,
        "wires": [
            [
                "612c17732b2e6869",
                "500e0d2d3eafc601"
            ]
        ]
    },
    {
        "id": "cdeca8110897fbfd",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Stop msg when Disabled",
        "func": "if (msg.enabled == false)\n    return; // Consume msg\nelse\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 420,
        "wires": [
            [
                "0410f0ed780f673c"
            ]
        ]
    },
    {
        "id": "550656d56c9b9fbd",
        "type": "status",
        "z": "bec86240dee2b9be",
        "name": "setSystemState",
        "scope": [
            "ea42445f.53f978"
        ],
        "x": 380,
        "y": 1720,
        "wires": [
            [
                "4fc806fda1d88db7"
            ]
        ]
    },
    {
        "id": "4fc806fda1d88db7",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Stop Audio",
        "func": "node.log(`msg.status ${JSON.stringify(msg.status)}`);\n\nif (msg.status.text == 'stopped') {\n    msg.payload = 'stop';\n    return msg;\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1720,
        "wires": [
            [
                "4fa17cfec22cd200"
            ]
        ]
    },
    {
        "id": "300159b0f1947521",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "noSound",
        "payloadType": "str",
        "x": 160,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "1ecf614851bfa488",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "setSettings",
        "func": "var settings = flow.get('settings');\nswitch (msg.topic) {\n    \n    // These topics don't need any modification before saving\n    case 'awakening_volume':\n    case 'background_volume':\n    case 'relax_volume':\n        settings[msg.topic] = msg.payload;\n        break;\n        \n    default:\n        // User selected a sound file, so the path is important\n        //let folder = flow.get('audioDir') + msg.topic + '/';\n        //settings[msg.topic] = folder + msg.payload;\n        settings[msg.topic] = msg.payload;\n}\nnode.log(`${msg.topic} = ${settings[msg.topic]}`);\nflow.set('settings', settings);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "3964f3119bbae715",
        "type": "comment",
        "z": "bec86240dee2b9be",
        "name": "AudioSequenceControl",
        "info": "Remember to install \"mplayer\" or any other player listed [here](https://www.npmjs.com/package/play-sound). ",
        "x": 180,
        "y": 1660,
        "wires": []
    },
    {
        "id": "01879dd26fd34b15",
        "type": "comment",
        "z": "bec86240dee2b9be",
        "name": "AudioTracksSelection",
        "info": "To add an audio track:\n1 - Add the track to the corresponding folder in ~/.node-red/yogapod_audio/.\n2 - Copy the the full filepath.\n3 - Add a new option in the corresponding dropdown node. Paste the full filename as the \"value\" for the option.\n",
        "x": 180,
        "y": 1260,
        "wires": []
    },
    {
        "id": "4fa17cfec22cd200",
        "type": "exec",
        "z": "bec86240dee2b9be",
        "command": "killall omxplayer.bin",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "kill omxplayer",
        "x": 1040,
        "y": 1740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2346cc417d2c23a0",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Play Awakening",
        "func": "// Get the current time, in milliseconds since midnight\nlet now = new Date();\nnow = now.getTime() - now.setHours(0,0,0,0);\n\nlet wakeOffsetMs = flow.get('wakeOffsetMs');\n\nlet isVolumeTest = (msg.payload == \"test\");\n\n// Don't do anything if the Node isn't running OR No sound has been selected by the user\n// AND this is NOT a test of the volume\nif (((flow.get(\"status\") != 'started') || \n    (flow.get(\"settings\").awakening_sound === \"noSound\")) &&\n    (msg.payload != \"test\"))\n    return;\n\n// Only start playing the awakening sound if the current\n// time is within +/- 1 seconds of the wake time\n// so that the sound is only triggered once\nif ((Math.abs(wakeOffsetMs - now) < 500) || (msg.payload == \"test\")) {\n    \n    let volume = flow.get(\"settings\").awakening_volume;\n    let soundFile = flow.get(\"audioDir\") + \n                    \"awakening_sound/\" + \n                    flow.get(\"settings\").awakening_sound;\n    \n    node.log(`Playing ${soundFile}`);\n    \n    // Assamble the msg to send to the audio player\n    msg.options = (10 - volume) * -450; // Set volume, the only option\n    msg.options = msg.options + \" \" + soundFile;\n    msg.payload = \"start\";\n    node.log(\"ARGS \" + msg.options);\n    \n    if (isVolumeTest) {\n        // This is just a volume test\n        return [ msg, msg ];\n    } else {\n        // Play the full sound (i.e. not a volume test)\n        return [ msg, null ];\n    }\n}\n// Otherwise, consume the message\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1900,
        "wires": [
            [
                "66339823cd2de48e",
                "430154a0b21b2eea"
            ],
            [
                "ce826f5000a0a36c"
            ]
        ]
    },
    {
        "id": "8b9492ea422799a0",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Play Background",
        "func": "// Get the current time, in milliseconds since midnight\nlet now = new Date();\nnow = now.getTime() - now.setHours(0,0,0,0);\n\nlet bedTimeOffsetMs = flow.get(\"bedOffsetMs\");\nlet backgroundNoiseStartOffsetMs = flow.get('backgroundNoiseStartOffsetMs');\nlet relaxationTechniqueStartOffsetMs = flow.get(\"relaxationTechniqueStartOffsetMs\");\n\nlet isVolumeTest = (msg.payload == \"test\");\nlet shouldRestartAfterRelaxFinished = (msg.payload == \"restart\");\nlet isFirstTickAfterStarting = flow.get(\"isFirstTickAfterStarting\");\n\n// Don't do anything if the Node isn't running OR No sound has been selected by the user\n// AND this is NOT a test of the volume\nif (((flow.get(\"status\") != 'started') || \n    (flow.get(\"settings\").background_noise === \"noSound\")) &&\n    (msg.payload != \"test\"))\n    return;\n\n// Only start playing the background sound if the current\n// time is within +/- 1 seconds of the wake time\n// so that the sound is only triggered once\n// OR\n// This is the first tick after the NODE's been started AND the current\n// time is already past the time at which the background noise should have started\n// OR\n// This is only a volume test\n// OR\n// The relaxation technique just finished playing and the background noise should be restarted\nif ((Math.abs(now - backgroundNoiseStartOffsetMs) < 500) || \n    (isFirstTickAfterStarting && (now > backgroundNoiseStartOffsetMs) && (((now < relaxationTechniqueStartOffsetMs || (flow.get(\"settings\").relax_technique === \"noSound\"))) || (now > bedTimeOffsetMs))) || \n    (msg.payload == \"test\") || \n    ((now > backgroundNoiseStartOffsetMs) && shouldRestartAfterRelaxFinished)) {\n    \n    let volume = flow.get(\"settings\").background_volume;\n    let soundFile = flow.get(\"audioDir\") + \n                    \"background_noise/\" + \n                    flow.get(\"settings\").background_noise;\n    \n    node.log(`Playing ${soundFile}`);\n    \n    // Assamble the msg to send to the audio player\n    msg.options = (10 - volume) * -450; // Set volume, the only option\n    msg.options = msg.options + \" \" + soundFile;\n    msg.payload = \"start\";\n    node.log(\"ARGS \" + msg.options);\n    \n    if (isVolumeTest) {\n        // This is just a volume test\n        return [ msg, msg ];\n    } else {\n        // Play the full sound (i.e. not a volume test)\n        return [ msg, null ];\n    }\n}\n// Otherwise, consume the message\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1860,
        "wires": [
            [
                "e346b757b1a92333"
            ],
            [
                "ce826f5000a0a36c"
            ]
        ]
    },
    {
        "id": "411a7c2e50eb0581",
        "type": "status",
        "z": "bec86240dee2b9be",
        "name": "from setInitialValues",
        "scope": [
            "b5be2f88e79e2c0d"
        ],
        "x": 130,
        "y": 1360,
        "wires": [
            [
                "f3410d26d847a494",
                "560cc62aaf61af14",
                "c894f13ff6a4376e",
                "27c902707f5d03d6"
            ]
        ]
    },
    {
        "id": "e346b757b1a92333",
        "type": "exec",
        "z": "bec86240dee2b9be",
        "command": "/home/pi/yogasleepnode-master/scripts/play-sound.sh",
        "addpay": "options",
        "append": "",
        "useSpawn": "false",
        "timer": "3000",
        "winHide": false,
        "oldrc": false,
        "name": "run omxplayer",
        "x": 960,
        "y": 1880,
        "wires": [
            [
                "204974a6aae09f7c"
            ],
            [],
            []
        ]
    },
    {
        "id": "204974a6aae09f7c",
        "type": "debug",
        "z": "bec86240dee2b9be",
        "name": "1 omxplayer rc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1860,
        "wires": []
    },
    {
        "id": "eea97ce7adeaa716",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "Clock",
        "payloadType": "date",
        "x": 150,
        "y": 1900,
        "wires": [
            [
                "8b9492ea422799a0",
                "2346cc417d2c23a0",
                "907c30ee63f5d729"
            ]
        ]
    },
    {
        "id": "467a48f439b1d204",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "stap!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 730,
        "y": 1680,
        "wires": [
            [
                "4fa17cfec22cd200"
            ]
        ]
    },
    {
        "id": "f3410d26d847a494",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Get Backgrd volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "settings.background_volume",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1520,
        "wires": [
            [
                "c63df189cc21bca5"
            ]
        ]
    },
    {
        "id": "560cc62aaf61af14",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Pre-populate",
        "func": "let settings = flow.get(\"settings\");\n\n// Build background_noise message first\nlet settingsParts = settings.background_noise.split(\"/\");\nlet backgroundMsg = {payload: settingsParts[settingsParts.length - 1]};\n\n// Set the options for the \"Background Noise\" drop-down\nbackgroundMsg.options = \n[\n    { \"No Sound\":\"noSound\" },\n    { \"Convergence By S.Duncan\" : \"convergence-by-s.duncan-12-hours.mp3\" },\n    { \"Deep Serenity By S.Duncan\" : \"deep-serenity-by-s.duncan-12-hours.mp3\" },\n    { \"Nocturnal Crossings By S.Duncan\" : \"nocturnal-crossings-by-s.duncan-12-hour.mp3\" },\n    { \"Ocean Waves Big\" : \"ocean-waves-big-12-hours.mp3\" },\n    { \"Ponderings By S.Duncan\" : \"ponderings-by-s.duncan-12-hours.mp3\" },\n    { \"Heavy Rain\" : \"rain-heavy-12-hours.mp3\" },\n    { \"Light Rain\" : \"rain-light-12-hours.mp3\" },\n    { \"Refresh By S.Duncan\" : \"refresh-by-s.duncan-12-hours.mp3\" },\n    { \"Train Tracks\" : \"train-tracks-12-hours.mp3\" },\n    { \"Tranquil Calm\" : \"tranquil-calm-12-hours.mp3\" },\n    { \"White Noise\" : \"white-noise-12-hours.mp3\" },\n];\n// Set the default option\n//backgroundMsg.payload = \"noSound\";\n\n// Build awakening_sound message\nsettingsParts = settings.awakening_sound.split(\"/\");\nlet awakeningMsg = {payload: settingsParts[settingsParts.length - 1]};\n\n// Set the options for the \"Awakening Sound\" drop-down\nawakeningMsg.options = \n[\n    { \"No Sound\":\"noSound\" },\n    { \"Birds Chirping\" : \"birds-chirping-15-min.mp3\" },\n    { \"Deep Waking Meditation\" : \"deep-waking-meditation-24-min.mp3\" },\n    { \"Monk Om\" : \"monk-om-16-min.mp3\" },\n    { \"Morning Flute\" : \"morning-flute-17-min.mp3\" },\n    { \"Spiritual Awakening\" : \"spiritual-awakening-13-min.mp3\" },\n    { \"Stream Birds\" : \"stream-birds-15-minutes.mp3\" },\n];\n//awakeningMsg.payload = \"noSound\";\n\n// Build relax_technique message\nsettingsParts = settings.relax_technique.split(\"/\");\nlet relaxMsg = {payload: settingsParts[settingsParts.length - 1]};\n\n// Set the options for the \"Relaxation Technique\" drop-down\nrelaxMsg.options = \n[\n    { \"No Sound\":\"noSound\" },\n    { \"Week 2 Breath with Sound\" : \"week-2-breath-with-sound.m4a\" },\n    { \"Week 3 Box Breathing\" : \"week-3-box-breathing.m4a\" },\n    { \"Week 4 Alternate Nostril Breathing\" : \"week-4-alternate-nostril-breathing.m4a\" },\n    { \"Week 5 Ferris Wheel Breath\" : \"week-5-ferris-wheel-breath.m4a\" },\n    { \"Week 6 iRest (26 min)\" : \"week-6-irest-26-min.mp3\" },\n];\n//relaxMsg.payload = \"noSound\";\n\nreturn [ backgroundMsg, awakeningMsg, relaxMsg ];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1360,
        "wires": [
            [
                "8a9c176d49b00cd2"
            ],
            [
                "4fc396bdd223d809"
            ],
            [
                "71e7f4c88fb5c5cc"
            ]
        ],
        "outputLabels": [
            "background_noise",
            "awakening_sound",
            ""
        ]
    },
    {
        "id": "c894f13ff6a4376e",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Get Awake volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "settings.awakening_volume",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1560,
        "wires": [
            [
                "b076fb9b6a70d76a"
            ]
        ]
    },
    {
        "id": "27c902707f5d03d6",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Get Relax volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "settings.relax_volume",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1600,
        "wires": [
            [
                "f73fac85b853d365"
            ]
        ]
    },
    {
        "id": "ce826f5000a0a36c",
        "type": "delay",
        "z": "bec86240dee2b9be",
        "name": "Delay for Volume Test",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 820,
        "y": 1780,
        "wires": [
            [
                "4fa17cfec22cd200"
            ]
        ]
    },
    {
        "id": "22ae388a117585e7",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Get Current Time",
        "func": "// Get the current system time and display it for the user\n// (in case the time is off and the user needs to correct it)\n\nlet msgTimeOnly = msg;\nlet msgDateAndTime = msg;\nlet now = new Date();\n\nmsgDateAndTime.payload = now.toLocaleTimeString('en-US');\nnow.setSeconds(0);\nmsgTimeOnly.payload = now.toTimeString();\n\nreturn [msgDateAndTime, msgTimeOnly];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2100,
        "wires": [
            [
                "cdf4136a6ac8df4e"
            ],
            [
                "f337c4d85f4a9036"
            ]
        ]
    },
    {
        "id": "8778a147ef65e119",
        "type": "exec",
        "z": "bec86240dee2b9be",
        "command": "sudo /home/pi/yogasleepnode-master/scripts/set-time.sh",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Set Date/Time",
        "x": 1000,
        "y": 2100,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "44ada923d8db0d5a",
        "type": "comment",
        "z": "bec86240dee2b9be",
        "name": "Setting System Time",
        "info": "",
        "x": 130,
        "y": 2040,
        "wires": []
    },
    {
        "id": "c364af3b6fe717e9",
        "type": "inject",
        "z": "bec86240dee2b9be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2100,
        "wires": [
            [
                "22ae388a117585e7"
            ]
        ]
    },
    {
        "id": "16494be39e996c0a",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Parse",
        "func": "\nlet hoursSinceMidnight = Math.floor(msg.payload/(3600000 ));\nlet minutesPastTheHour = Math.floor((msg.payload - hoursSinceMidnight * 3600000) / 60000);\nlet secondsPastTheHour = Math.floor((msg.payload / 1000) % 60);\n\nlet now = new Date();\nlet newDateTime = new Date(now.setHours(hoursSinceMidnight,minutesPastTheHour,secondsPastTheHour,0));\n\nmsg.payload = newDateTime.toLocaleDateString() + ' ' + newDateTime.toLocaleTimeString();\nnode.status({text:msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2100,
        "wires": [
            [
                "8778a147ef65e119"
            ]
        ]
    },
    {
        "id": "f337c4d85f4a9036",
        "type": "rbe",
        "z": "bec86240dee2b9be",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "x": 510,
        "y": 2100,
        "wires": [
            [
                "edecb6a807e552de"
            ]
        ]
    },
    {
        "id": "907c30ee63f5d729",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Play Relax",
        "func": "// Get the current time, in milliseconds since midnight\nlet now = new Date();\nnow = now.getTime() - now.setHours(0,0,0,0);\n\nlet bedTime = flow.get('bedOffsetMs');\nlet relaxationTechniqueStartOffsetMs = flow.get('relaxationTechniqueStartOffsetMs');\n\nlet isVolumeTest = (msg.payload == \"test\");\nlet isFirstTickAfterStarting = flow.get(\"isFirstTickAfterStarting\");\n\n// Don't do anything if the Node isn't running OR No sound has been selected by the user\n// AND this is NOT a test of the volume\nif (((flow.get(\"status\") != 'started') || \n    (flow.get(\"settings\").relax_technique === \"noSound\")) &&\n    (msg.payload != \"test\"))\n    return;\n\n// Only start playing the relaxation technique if the current\n// time is within +/- 1 seconds of the required start time\n// so that the sound is only triggered once\n// OR\n// This is the first tick after the NODE's been started AND the current\n// time is already past the time at which the relaxation technique should have started AND\n// the current time has not yet reached the bed time\n// OR\n// This is only a volume test\nif ((Math.abs(now - relaxationTechniqueStartOffsetMs) < 500) || \n    (isFirstTickAfterStarting && (now > relaxationTechniqueStartOffsetMs) && (now < bedTime)) || \n    (msg.payload == \"test\")) {\n\n    let volume = flow.get(\"settings\").relax_volume;\n    let soundFile = flow.get(\"audioDir\") + \n                    \"relax_technique/\" + \n                    flow.get(\"settings\").relax_technique;\n    \n    node.log(`Playing ${soundFile}`);\n    \n    // Assemble the msg to send to the audio player\n    msg.options = (10 - volume) * -450; // Set volume, the only option\n    msg.options = msg.options + \" \" + soundFile;\n    msg.payload = \"start\";\n    node.log(\"ARGS \" + msg.options);\n    \n    if (isVolumeTest) {\n        // This is just a volume test\n        return [ msg, msg ];\n    } else {\n        // Play the full sound (i.e. not a volume test)\n        return [ msg, null ];\n    }\n}\n// Otherwise, consume the message\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1940,
        "wires": [
            [
                "fa0382ebd52a4248",
                "66339823cd2de48e"
            ],
            [
                "ce826f5000a0a36c"
            ]
        ]
    },
    {
        "id": "c8d026be2a93d72d",
        "type": "debug",
        "z": "bec86240dee2b9be",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1240,
        "wires": []
    },
    {
        "id": "500e0d2d3eafc601",
        "type": "function",
        "z": "bec86240dee2b9be",
        "name": "Handle Stopping Audio",
        "func": "let status = flow.get('status');\n// Only kill the audio if the NODE is stopped\n// to make sure the clicking \"STOP\" will stop any playing audio\nif (status == \"stopped\") {\n    return msg;\n} else {\n    // Consume the message\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1640,
        "wires": [
            [
                "4fa17cfec22cd200"
            ]
        ]
    },
    {
        "id": "87dd130178a93206",
        "type": "exec",
        "z": "bec86240dee2b9be",
        "command": "/home/pi/yogasleepnode-master/scripts/play-sound.sh",
        "addpay": "options",
        "append": "",
        "useSpawn": "false",
        "timer": "3000",
        "winHide": false,
        "oldrc": false,
        "name": "run omxplayer",
        "x": 920,
        "y": 2000,
        "wires": [
            [
                "e16ea8293c56270a"
            ],
            [],
            []
        ]
    },
    {
        "id": "e16ea8293c56270a",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Restart BG Noise",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "restart",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 2020,
        "wires": [
            [
                "8b9492ea422799a0"
            ]
        ]
    },
    {
        "id": "66339823cd2de48e",
        "type": "exec",
        "z": "bec86240dee2b9be",
        "command": "killall omxplayer.bin",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "kill omxplayer",
        "x": 1140,
        "y": 1940,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "430154a0b21b2eea",
        "type": "delay",
        "z": "bec86240dee2b9be",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 740,
        "y": 1900,
        "wires": [
            [
                "e346b757b1a92333"
            ]
        ]
    },
    {
        "id": "aae5bb3af39920df",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Set Max",
        "rules": [
            {
                "t": "set",
                "p": "pwm_wu_max",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "30f4b6d8e649f72d",
        "type": "change",
        "z": "bec86240dee2b9be",
        "name": "Get Max",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "pwm_wu_max",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 860,
        "wires": [
            [
                "78ad2c3881bb3fa9"
            ]
        ]
    },
    {
        "id": "fa0382ebd52a4248",
        "type": "delay",
        "z": "bec86240dee2b9be",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 760,
        "y": 2000,
        "wires": [
            [
                "87dd130178a93206"
            ]
        ]
    },
    {
        "id": "41869b78.d5b4e4",
        "type": "pi-gpiod out",
        "z": "f6f2187d.f17ca8",
        "name": "NL Enable",
        "host": "localhost",
        "port": 8888,
        "pin": "22",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "3bed6a97686e3a0b",
        "type": "pi-gpiod out",
        "z": "f6f2187d.f17ca8",
        "name": "NL Enable",
        "host": "localhost",
        "port": 8888,
        "pin": "22",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 1230,
        "y": 640,
        "wires": []
    },
    {
        "id": "38300ce0b06090b6",
        "type": "pi-gpiod out",
        "z": "f6f2187d.f17ca8",
        "name": "Wake Enable",
        "host": "localhost",
        "port": 8888,
        "pin": "27",
        "set": false,
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 1230,
        "y": 820,
        "wires": []
    },
    {
        "id": "612c17732b2e6869",
        "type": "ui_button",
        "z": "bec86240dee2b9be",
        "name": "start_stop",
        "group": "9129e728.6627d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "{{msg.payload || \"Start\"}}",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "a659c39369cd5e71"
            ]
        ]
    },
    {
        "id": "bd5cf792f2dc3b63",
        "type": "ui_button",
        "z": "bec86240dee2b9be",
        "name": "",
        "group": "a81e9f61.3e719",
        "order": 16,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Test Awakening Sound Volume",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "test",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1860,
        "wires": [
            [
                "2346cc417d2c23a0"
            ]
        ]
    },
    {
        "id": "01c4d9cdfd4552c7",
        "type": "ui_button",
        "z": "bec86240dee2b9be",
        "name": "",
        "group": "a81e9f61.3e719",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Test Background Noise Volume",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "test",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1820,
        "wires": [
            [
                "8b9492ea422799a0"
            ]
        ]
    },
    {
        "id": "b88c75d88a02451d",
        "type": "ui_button",
        "z": "bec86240dee2b9be",
        "name": "",
        "group": "a81e9f61.3e719",
        "order": 23,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Test Relax Tech. Sound Volume",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "test",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 1940,
        "wires": [
            [
                "907c30ee63f5d729"
            ]
        ]
    },
    {
        "id": "8a9c176d49b00cd2",
        "type": "ui_dropdown",
        "z": "bec86240dee2b9be",
        "name": "background_noise",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "a81e9f61.3e719",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "background_noise",
        "topicType": "str",
        "className": "",
        "x": 550,
        "y": 1320,
        "wires": [
            [
                "1ecf614851bfa488",
                "c8d026be2a93d72d"
            ]
        ]
    },
    {
        "id": "4fc396bdd223d809",
        "type": "ui_dropdown",
        "z": "bec86240dee2b9be",
        "name": "awakening_sound",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "a81e9f61.3e719",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "awakening_sound",
        "topicType": "str",
        "className": "",
        "x": 550,
        "y": 1380,
        "wires": [
            [
                "1ecf614851bfa488"
            ]
        ]
    },
    {
        "id": "71e7f4c88fb5c5cc",
        "type": "ui_dropdown",
        "z": "bec86240dee2b9be",
        "name": "relax_technique",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "a81e9f61.3e719",
        "order": 20,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "relax_technique",
        "topicType": "str",
        "className": "",
        "x": 540,
        "y": 1440,
        "wires": [
            [
                "1ecf614851bfa488"
            ]
        ]
    },
    {
        "id": "c63df189cc21bca5",
        "type": "ui_dropdown",
        "z": "bec86240dee2b9be",
        "name": "background_volume",
        "label": "Volume",
        "tooltip": "Relative volume of background noise playback",
        "place": "Medium",
        "group": "a81e9f61.3e719",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "High",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Medium",
                "value": 6,
                "type": "num"
            },
            {
                "label": "Low",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "background_volume",
        "topicType": "str",
        "className": "",
        "x": 600,
        "y": 1520,
        "wires": [
            [
                "1ecf614851bfa488",
                "c8d026be2a93d72d"
            ]
        ]
    },
    {
        "id": "b076fb9b6a70d76a",
        "type": "ui_dropdown",
        "z": "bec86240dee2b9be",
        "name": "awakening_volume",
        "label": "Volume",
        "tooltip": "Relative volume of awakening sound volume",
        "place": "Medium",
        "group": "a81e9f61.3e719",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "High",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Medium",
                "value": 5,
                "type": "num"
            },
            {
                "label": "Low",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "awakening_volume",
        "topicType": "str",
        "className": "",
        "x": 590,
        "y": 1560,
        "wires": [
            [
                "1ecf614851bfa488"
            ]
        ]
    },
    {
        "id": "f73fac85b853d365",
        "type": "ui_dropdown",
        "z": "bec86240dee2b9be",
        "name": "relax_volume",
        "label": "Volume",
        "tooltip": "Relative volume of relaxation technique volume",
        "place": "Medium",
        "group": "a81e9f61.3e719",
        "order": 22,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "High",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Medium",
                "value": 8,
                "type": "num"
            },
            {
                "label": "Low",
                "value": 6,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "relax_volume",
        "topicType": "str",
        "className": "",
        "x": 570,
        "y": 1600,
        "wires": [
            [
                "1ecf614851bfa488"
            ]
        ]
    },
    {
        "id": "182e77fe4fc8950b",
        "type": "ui_switch",
        "z": "bec86240dee2b9be",
        "name": "",
        "label": "Nightlight",
        "tooltip": "",
        "group": "426403b1.4aa8dc",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 360,
        "y": 760,
        "wires": [
            [
                "fdc77b8a8db18eb4"
            ]
        ]
    },
    {
        "id": "9486602c5812b3d7",
        "type": "ui_switch",
        "z": "bec86240dee2b9be",
        "name": "",
        "label": "Wake Up Light",
        "tooltip": "",
        "group": "426403b1.4aa8dc",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 360,
        "y": 800,
        "wires": [
            [
                "570810545bd8b4e9"
            ]
        ]
    },
    {
        "id": "142c09f5ead06703",
        "type": "ui_switch",
        "z": "bec86240dee2b9be",
        "d": true,
        "name": "start_now",
        "label": "Start Bedtime Now",
        "tooltip": "Start your sleep sequence right now or later at specific time",
        "group": "9129e728.6627d8",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "start_now",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 820,
        "y": 180,
        "wires": [
            [
                "37855b136f08bd51"
            ]
        ]
    },
    {
        "id": "155f3cf7d07a4cbe",
        "type": "ui_switch",
        "z": "bec86240dee2b9be",
        "d": true,
        "name": "play_audio",
        "label": "Play Audio Tracks",
        "tooltip": "Relaxing sounds to sleep better",
        "group": "9129e728.6627d8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "play_audio",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 610,
        "y": 240,
        "wires": [
            [
                "37855b136f08bd51"
            ]
        ]
    },
    {
        "id": "9870cb848d34e642",
        "type": "ui_slider",
        "z": "bec86240dee2b9be",
        "d": true,
        "name": "",
        "label": "Fade Out (min)",
        "tooltip": "Time to fade completly out",
        "group": "9933a45d.b3b0e",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "30",
        "step": 1,
        "className": "",
        "x": 800,
        "y": 480,
        "wires": [
            [
                "cd406526aebce552"
            ]
        ]
    },
    {
        "id": "fc092f2794f05478",
        "type": "ui_slider",
        "z": "bec86240dee2b9be",
        "d": true,
        "name": "",
        "label": "Fade In (min)    ",
        "tooltip": "WakeUp Light Fade In",
        "group": "91c4859.9f3e5f8",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "30",
        "step": 1,
        "className": "",
        "x": 790,
        "y": 540,
        "wires": [
            [
                "551248ed16475f71"
            ]
        ]
    },
    {
        "id": "3f43933fc95aaea3",
        "type": "ui_slider",
        "z": "bec86240dee2b9be",
        "name": "",
        "label": "Hours of Sleep",
        "tooltip": "Select desired hours of sleep",
        "group": "9129e728.6627d8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "sleep_hours",
        "topicType": "str",
        "min": 0,
        "max": "12",
        "step": 1,
        "className": "",
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "6455e4220fb9d87f"
            ]
        ]
    },
    {
        "id": "635b2ab039302392",
        "type": "ui_slider",
        "z": "bec86240dee2b9be",
        "name": "",
        "label": "Minutes of Sleep",
        "tooltip": "Select desired minutes of sleep",
        "group": "9129e728.6627d8",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "sleep_minutes",
        "topicType": "str",
        "min": 0,
        "max": "55",
        "step": "5",
        "className": "",
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "6455e4220fb9d87f"
            ]
        ]
    },
    {
        "id": "78ad2c3881bb3fa9",
        "type": "ui_slider",
        "z": "bec86240dee2b9be",
        "name": "",
        "label": "Wake Up Light Max Brightness",
        "tooltip": "Limits the maxinum brightness of the wake light (from 20% to 100%)",
        "group": "91c4859.9f3e5f8",
        "order": 9,
        "width": "0",
        "height": "0",
        "passthru": true,
        "outs": "end",
        "topic": "pwm_wu_max",
        "topicType": "str",
        "min": "20",
        "max": "100",
        "step": "5",
        "className": "",
        "x": 550,
        "y": 860,
        "wires": [
            [
                "aae5bb3af39920df"
            ]
        ]
    },
    {
        "id": "369dc82edecb7a5e",
        "type": "ui_text_input",
        "z": "bec86240dee2b9be",
        "name": "",
        "label": "Wake Time",
        "tooltip": "Set your wake-up time",
        "group": "9129e728.6627d8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "time",
        "delay": "0",
        "topic": "",
        "sendOnBlur": true,
        "topicType": "str",
        "x": 690,
        "y": 420,
        "wires": [
            [
                "cdeca8110897fbfd"
            ]
        ]
    },
    {
        "id": "edecb6a807e552de",
        "type": "ui_text_input",
        "z": "bec86240dee2b9be",
        "name": "",
        "label": "Current Time",
        "tooltip": "Displays the current time. Edit then press enter to correct the time.",
        "group": "9129e728.6627d8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "time",
        "delay": "0",
        "topic": "",
        "sendOnBlur": true,
        "topicType": "str",
        "x": 650,
        "y": 2100,
        "wires": [
            [
                "16494be39e996c0a"
            ]
        ]
    },
    {
        "id": "9a8c0c06cee87108",
        "type": "ui_text",
        "z": "bec86240dee2b9be",
        "group": "9129e728.6627d8",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Calculated Bed Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1620,
        "y": 340,
        "wires": []
    },
    {
        "id": "a6fa2be965fbc138",
        "type": "ui_text",
        "z": "bec86240dee2b9be",
        "group": "a81e9f61.3e719",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Awakening Sound",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 1110,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c7d1ba0f5f04bbe0",
        "type": "ui_text",
        "z": "bec86240dee2b9be",
        "group": "a81e9f61.3e719",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Background Noise",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 1110,
        "y": 1300,
        "wires": []
    },
    {
        "id": "2107259f8020b4c7",
        "type": "ui_text",
        "z": "bec86240dee2b9be",
        "group": "a81e9f61.3e719",
        "order": 18,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Relaxation Technique",
        "format": "",
        "layout": "row-left",
        "className": "",
        "x": 1120,
        "y": 1380,
        "wires": []
    },
    {
        "id": "cdf4136a6ac8df4e",
        "type": "ui_text",
        "z": "bec86240dee2b9be",
        "d": true,
        "group": "9129e728.6627d8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "System Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 530,
        "y": 2060,
        "wires": []
    },
    {
        "id": "6233e22c.fb4eec",
        "type": "i2c out",
        "z": "bec86240dee2b9be",
        "name": "Set Brightness",
        "busno": "1",
        "address": "8",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 700,
        "y": 100,
        "wires": [
            [
                "4fd7a6cd.192be8"
            ]
        ]
    },
    {
        "id": "b33efcb16cb2cd5d",
        "type": "i2c out",
        "z": "bec86240dee2b9be",
        "name": "Set Brightness",
        "busno": "1",
        "address": "8",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 1400,
        "y": 760,
        "wires": [
            []
        ]
    }
]